<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NationalInstruments.ModularInstruments.Interop.Fx40</name>
    </assembly>
    <members>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niComplexNumber">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexNumber.Real">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexNumber.Imaginary">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niComplexI16">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexI16.Real">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexI16.Imaginary">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niComplexNumberF32">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexNumberF32.Real">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexNumberF32.Imaginary">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niComplexF32">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexF32.Real">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niComplexF32.Imaginary">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSA">
            <summary>
            
            </summary>
        </member>
        <member name="P:NationalInstruments.ModularInstruments.Interop.niRFSA.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="instrumentHandle"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            Creates a new session for the device and performs the following initialization actions:
            
            Creates a new instrument driver session to the RF vector signal analyzer, using the downconverter resource name you specify with resourceName.
            Sends initialization commands to reset all hardware modules to a known state necessary for NI-RFSA operation.
            
            Note:Before initializing the RF vector signal analyzer, an IF digitizer module (and an LO source for the NI 5663 only) must be associated with the RF downconverter module in MAX. After association, pass the RF downconverter device name to this VI to initialize both modules. To change the digitizer and LO source associations, modify the downconverter Properties page in MAX, or use the niRFSA_InitWithOptions function to override the association specified in MAX. Refer to the NI RF Vector Signal                 Analyzers Getting Started Guide, installed at Start&#187;All Programs?National  Instruments&#187;NI-RFSA&#187;Documentation for information about MAX association.
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            </summary>
            <param name="Resource_Name">
            
            resourceName
            ViRsrc
            Specifies the resource name of the device to initialize.
            
            Example #
            Device Type
            Syntax
            1
            myDAQmxDevice
            NI-DAQmx device, device name =
                           "myDAQmxDevice"
            2
            myLogicalName
            IVI logical name, name =
                              "myLogicalName"
            
            For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
                        Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
                        can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new
                        name. You also can pass in the name of an IVI logical name configured with the IVI
                        Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
                        Measurement &amp; Automation Explorer Help.
            
            Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
            
            </param>
            <param name="ID_Query">
            
            IDQuery
            ViBoolean
            specifies whether NI-RFSA performs an ID query. When you perform an ID query, NI-RFSA verifies that the device you initialize is supported. 
                                                        VI_TRUE (Yes)
            
                                Perform an ID query. This value is the default.
            
                                                                        VI_FALSE (No)
            
                                Do not perform an ID query.
            
            </param>
            <param name="Reset">
            
            reset
            ViBoolean
            Specifies whether the NI-RFSA device is reset during the initialization procedure.
            
            VI_TRUE (Yes)The device is reset.
            VI_FALSE (No)The device is not reset. This value is the default.
            
            </param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            Creates a new session for the device and performs the following initialization actions:
            Creates a new instrument driver session to the RF vector signal analyzer, using the downconverter resource name you specify with resourceName.
            Sends initialization commands to reset all hardware modules to a known state necessary for NI-RFSA operation.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <param name="Resource_Name">
            
            resourceName
            ViRsrc
            Specifies the resource name of the device to initialize.
            
            Example #
            Device Type
            Syntax
            1
            myDAQmxDevice
            NI-DAQmx device, device name =
                           "myDAQmxDevice"
            2
            myLogicalName
            IVI logical name, name =
                              "myLogicalName"
            
            For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
                        Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
                        can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new
                        name. You also can pass in the name of an IVI logical name configured with the IVI
                        Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
                        Measurement &amp; Automation Explorer Help.
            
            Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
             
            </param>
            <param name="ID_Query">
            
            IDQuery
            ViBoolean
            specifies whether NI-RFSA performs an ID query. When you perform an ID query, NI-RFSA verifies that the device you initialize is supported. 
                                                        VI_TRUE (Yes)
            
                                Perform an ID query. This value is the default.
            
                                                                        VI_FALSE (No)
            
                                Do not perform an ID query.
            
            </param>
            <param name="Reset">
            
            reset
            ViBoolean
            Specifies whether the NI-RFSA device is reset during the initialization procedure.
            
            VI_TRUE (Yes)The device is reset.
            VI_FALSE (No)The device is not reset. This value is the default.
            
            </param>
            <param name="Option_String">
            
            optionString
            ViConstString
            Sets the initial value of certain attributes for the session. The following attributes are used in this parameter.
            
            Name
            Attribute
            RangeCheck
            NIRFSA_ATTR_RANGE_CHECK
            QueryInstrStatus
            NIRFSA_ATTR_QUERY_INSTRUMENT_STATUS
            Cache
            NIRFSA_ATTR_CACHE
            RecordCoercions
            NIRFSA_ATTR_RECORD_COERCIONS
            DriverSetup
            NIRFSA_ATTR_DRIVER_SETUP
            
            The format of this string is, "AttributeName=Value" where AttributeName is the name of the attribute and Value is the value to which the attribute will be set.  To set multiple attributes, separate their assignments with a comma.
            
            Example Option String:
            "RangeCheck=1,QueryInstrStatus=0,Cache=1,DriverSetup=Digitizer:pxi1slot4".
            
            If you want to use the NI 5600/5601 with an external digitizer for downconverter-only mode, use the following DriverSetup string: DriverSetup=Digitizer:&lt;external&gt;.
            
            NI 5663&#8212;LO source&#8212;Specifies the resource name of the LO source to use for this session. If you want to use the NI&#160;5601 with an LO source other than the NI 5652, use the following DriverSetup tag:DriverSetup=LO:&lt;external&gt;.
            
            To specify multiple resources in the DriverSetup string, separate their assignments with a semicolon.
            
            </param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetError(System.Runtime.InteropServices.HandleRef,System.Int32,System.Text.StringBuilder)">
             <summary>
             Retrieves and then clears the IVI error information for the session or the current execution thread.
             
             </summary>
            <param>
             Identifies your instrument session. vi is obtained from the niRFSA_init or niRFSA_InitExtCal function and identifies a particular instrument session.
             
            </param>
            <param>
             Specifies the error code.
             
            </param>
            <param>
             Specifies the error message returned.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetError(System.Int32,System.Text.StringBuilder)">
             <summary>
             Retrieves and then clears the IVI error information for the session or the current execution thread.
             
             </summary>
            <param>
             Specifies the error code.
             
            </param>
            <param>
             Specifies the error message returned.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ErrorMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Text.StringBuilder)">
             <summary>
             Converts a status code returned by an NI-RFSA function into a user-readable string.
             
             </summary>
            <param>
             Identifies your instrument session. vi is obtained from the niRFSA_init or niRFSA_InitExtCal function and identifies a particular instrument session.
             
            </param>
            <param>
             Passes the Status parameter that is returned from any NI-RFSA function. The default value is 0 (VI_SUCCESS).
             
            </param>
            <param>
             Returns the user-readable message string that corresponds to the status code you specify.
             
            </param>
            <returns>
             Converts a status code returned by an NI-RFSA function into a user-readable string.
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ErrorMessage(System.Int32,System.Text.StringBuilder)">
             <summary>
             Converts a status code returned by an NI-RFSA function into a user-readable string.
             
             </summary>
            <param>
             Passes the Status parameter that is returned from any NI-RFSA function. The default value is 0 (VI_SUCCESS).
             
            </param>
            <param>
             Returns the user-readable message string that corresponds to the status code you specify.
             
            </param>
            <returns>
             Converts a status code returned by an NI-RFSA function into a user-readable string.
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.Close">
            <summary>
            Closes the rfsa session and releases resources associated with that session. 
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureAcquisitionType(System.Int32)">
            <summary>
            
            Configures whether the session acquires I/Q data or computes a power spectrum over the specified frequency range. 
            
            </summary>
            <param name="Acquisition_Type">
            
            acquisitionType
            Int32
            Configures the type of acquisition.
            
             IQ
            Configures the driver for I/Q acquisitions. This value is the default.
            Spectrum
            Configures the driver for spectrum acquisitions.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureReferenceLevel(System.String,System.Double)">
            <summary>
            
            Configures the reference level. The reference level represents the maximum expected power of an input RF signal.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Reference_Level">
            
            referenceLevel
            double
            Specifies the expected total integrated power, in dBm, of the RF input signal.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.EnableSessionAccess(System.Boolean)">
            <summary>
            
            Enables or disables SFP session access for the specified instrument.
            SFP session access allows the NI-RFSA Soft Front Panel (SFP) to access a device with an existing open session and can help you debug your code. To enable session access, pass VI_TRUE to the enabled parameter. To disable session access, pass false to the enabled parameter.
            Refer to Configuring SFP Session Access using LabWindows/CVI or C for more information about SFP session access. 
            </summary>
            <param name="enable">
            
            enable
            bool
            Enables or disables SFP session access for the specified device. 
            True
            Enables session access.
            False
            Disables session access.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureIQCarrierFrequency(System.String,System.Double)">
            <summary>
            
            Configures the carrier frequency of the RF vector signal analyzer hardware for an I/Q acquisition. The carrier frequency is the center frequency of the I/Q acquisition.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Carrier_Frequency">
            
            carrierFrequency
            double
            Specifies the carrier frequency, in hertz (Hz), of the RF signal to acquire. The RF vector signal analyzer tunes to this frequency. NI-RFSA may coerce this value based on hardware settings and downconversion settings.
            
            NI-RFSA sets the NIRFSA_ATTR_IQ_CARRIER_FREQUENCY attribute to this value. Refer to the specifications document that shipped with your device for allowable frequency settings.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.Disable">
             <summary>
             Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
             
             </summary>
            <returns>
             ViStatus _VI_FUNC niRFSA_Disable(ViSession vi);
             Purpose
             Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQSingleRecordComplexF32(System.String,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexF32[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
            <summary>
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQSingleRecordComplexF32(System.String,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexNumberF32[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
            <summary>
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalAdjustCalTonePower(System.String,System.Double)">
             <summary>
             Specifies the calibration tone power during calibration tone amplitude calibration. You must call the niRFSA_Initiate function before calling this function.
             Supported Devices:  NI&#160;5693
             
             </summary>
            <param name = "Channel_List">
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "Measurement">
             Specifies the calibration tone power, in dBm, for the current device setting.
             
            </param>
            <returns>
             
            niRFSA_CalAdjustCalTonePower
             ViStatus  niRFSA_CalAdjustCalTonePower(ViSession vi,
                ViConstString channelList,
                ViReal64 measurement);
             Purpose
             Specifies the calibration tone power during calibration tone amplitude calibration. You must call the niRFSA_Initiate function before calling this function.
             Supported Devices:  NI&#160;5693
             
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalAdjustDeviceGain(System.String,System.Double,System.Double)">
             <summary>
             Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
             This function internally queries the attributes you set, and you must commit all attributes appropriate for your device calibration procedure prior to calling this function. Refer to ni.com/manuals for the most recent version of the calibration procedure for your device.
             Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
             Supported Devices:  NI&#160;5693/5694
             
             </summary>
            <param name = "Channel_List">
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "Frequency">
             Specifies the RF frequency, in Hz, of the measurement taken.
             
            </param>
            <param name = "Gain">
             Specifies the gain measurement, in dB.
             
            </param>
            <returns>
             
            niRFSA_CalAdjustDeviceGain
             ViStatus  niRFSA_CalAdjustDeviceGain(ViSession vi,
                ViConstString channelList,
                ViReal64 frequency,
                ViReal64 gain);
             Purpose
             Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
             This function internally queries the attributes you set, and you must commit all attributes appropriate for your device calibration procedure prior to calling this function. Refer to ni.com/manuals for the most recent version of the calibration procedure for your device.
             Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
             Supported Devices:  NI&#160;5693/5694
             
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SelfCalibrateRange(System.Int64,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Self-calibrates all configurations within the specified frequency and reference level limits.
             NI recommends that no external signals are present on the RF In port while the calibration is taking place.
             For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
             Supported Devices: NI&#160;5644R/5645R/5646R   
             
             </summary>
            <param name = "stepsToOmit">
                 Specifies which calibration steps to skip as part of the self-calibration process. A value of 0 specifies all calibration steps are performed.
                       Note&#160;&#160;To omit two or more calibration steps, specify a bitwise-OR combination of the following constants. For example, if you wanted to omit NIRFSA_VAL_SELF_CAL_AMPLITUDE_ACCURACY and NIRFSA_VAL_SELF_CAL_LO_SELF_CAL, you would pass the following string to the niRFSA_SelfCalibrate function: NIRFSA_VAL_SELF_CAL_AMPLITUDE_ACCURACY | NIRFSA_VAL_SELF_CAL_LO_SELF_CAL 
                                     NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
                       Omits the LO Self Cal step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the LO PLL may fail to lock.
                               NIRFSA_VAL_SELF_CAL_AMPLITUDE_ACCURACY
                       Omits the Amplitude Accuracy step. If you omit this step, the absolute accuracy of the device is not adjusted.
                               NIRFSA_VAL_SELF_CAL_RESIDUAL_LO_POWER
                       Omits the Residual LO Power step. If you omit this step, the Residual LO Power performance is not adjusted.
                               NIRFSA_VAL_SELF_CAL_IMAGE_SUPPRESSION
                       Omits the Image Suppression step. If you omit this step, the Residual Sideband Image Performance is not adjusted.
             
            </param>
            <param name = "minFrequency">
             Specifies the minimum RF frequency in Hz.
             
            </param>
            <param name = "maxFrequency">
             Specifies the maximum RF frequency in Hz.
             
            </param>
            <param name = "minReferenceLevel">
             Specifies the minimum reference level in dBm.
             
            </param>
            <param name = "maxReferenceLevel">
             Specifies the maximum reference level in dBm.
             
            </param>
            <returns>
             
            niRFSA_SelfCalibrateRange
             ViStatus niRFSA_SelfCalibrateRange (ViSession Instrument_Handle,ViInt64 Steps_To_Omit, ViReal64 Min_Frequency, ViReal64 Max_Frequency, ViReal64 Min_Reference_Level, ViReal64                      Max_Reference_Level);
             Purpose
             Self-calibrates all configurations within the specified frequency and reference level limits.
             NI recommends that no external signals are present on the RF In port while the calibration is taking place.
             For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
             Supported Devices: NI&#160;5644R/5645R/5646R   
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ResetWithDefaults">
             <summary>
             Resets the attribute to its default value.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
             
             </summary>
            <returns>
             
            niRFSA_ResetWithDefaults
             ViStatus _VI_FUNC niRFSA_ResetWithDefaults(ViSession vi);
             Purpose
             Resets the session to its default value.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
             
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.InvalidateAllAttributes">
            <summary>
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQMultiRecordComplexF32(System.String,System.Int64,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexF32[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
             <summary>
             Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
             This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
             Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
             
             </summary>
            <param name = "Channel_List">
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "StartingRecord">
             Specifies the first record to retrieve. Record numbers are zero-based. The default value is 0.
             
            </param>
            <param name = "NumberOfRecords">
             Specifies the number of records to fetch.
             
            </param>
            <param name = "Number_of_Samples">
             Specifies the number of samples per record.
             
            </param>
            <param name = "Timeout">
             Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data.
             
            </param>
            <param name = "Data">
             Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
             
            </param>
            <param name = "Waveform_Info">
             Contains the absolute and relative timestamps for the operation, the time interval (dt), and the
             actual number of samples read.
             The following list provides more information about each of these properties:
             absolute timestamp&#8212;Returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
             relative timestamp&#8212;Returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
             Note&#160;&#160;For the NI&#160;5644R/5645R/5646R, both timestamps are always set to 0.
             dt&#8212;Returns the time interval between data points in the acquired signal. The I/Q data sample rate is the reciprocal of this value.
             actual samples read&#8212;Returns an integer representing the number of samples in the waveform.
             offset&#8212;Returns the offset to scale data, (b), in mx + b form.
             gain&#8212;Returns the gain to scale data, (m), in mx + b form.
             Note&#160;&#160;Allocate an array of structures at least as large as numberOfRecords for this parameter.
             
            </param>
            <returns>
             
            niRFSA_FetchIQMultiRecordComplexF32
             ViStatus niRFSA_FetchIQMultiRecordComplexF32(ViSession vi, 
                ViConstString channelList, 
                ViInt64 startingRecord, 
                ViInt64 numberOfRecords, 
                ViInt64 numberOfSamples, 
                ViReal64 timeout, 
                NIComplexNumberF32* data,
                niRFSA_wfmInfo* wfmInfo);
             Purpose
             Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
             This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
             Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
             
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQMultiRecordComplexF32(System.String,System.Int64,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexNumberF32[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
             <summary>
             Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
             This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
             Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
             
             </summary>
            <param name = "Channel_List">
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "StartingRecord">
             Specifies the first record to retrieve. Record numbers are zero-based. The default value is 0.
             
            </param>
            <param name = "NumberOfRecords">
             Specifies the number of records to fetch.
             
            </param>
            <param name = "Number_of_Samples">
             Specifies the number of samples per record.
             
            </param>
            <param name = "Timeout">
             Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data.
             
            </param>
            <param name = "Data">
             Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
             
            </param>
            <param name = "Waveform_Info">
             Contains the absolute and relative timestamps for the operation, the time interval (dt), and the
             actual number of samples read.
             The following list provides more information about each of these properties:
             absolute timestamp&#8212;Returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
             relative timestamp&#8212;Returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
             Note&#160;&#160;For the NI&#160;5644R/5645R/5646R, both timestamps are always set to 0.
             dt&#8212;Returns the time interval between data points in the acquired signal. The I/Q data sample rate is the reciprocal of this value.
             actual samples read&#8212;Returns an integer representing the number of samples in the waveform.
             offset&#8212;Returns the offset to scale data, (b), in mx + b form.
             gain&#8212;Returns the gain to scale data, (m), in mx + b form.
             Note&#160;&#160;Allocate an array of structures at least as large as numberOfRecords for this parameter.
             
            </param>
            <returns>
             
            niRFSA_FetchIQMultiRecordComplexF32
             ViStatus niRFSA_FetchIQMultiRecordComplexF32(ViSession vi, 
                ViConstString channelList, 
                ViInt64 startingRecord, 
                ViInt64 numberOfRecords, 
                ViInt64 numberOfSamples, 
                ViReal64 timeout, 
                NIComplexNumberF32* data,
                niRFSA_wfmInfo* wfmInfo);
             Purpose
             Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
             This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function because the niRFSA_ReadIQSingleRecordComplexF64 function performs the fetch as part of the function.
             Supported Devices:  NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667
             
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetUserData(System.String,System.Int32,System.Byte[])">
             <summary>
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetUserData(System.String,System.Int32,System.Byte[],System.Int32@)">
             <summary>
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitizerSampleClockRate(System.String,System.Double)">
            <summary>
            Description
            Returns the actual frequency, in hertz (Hz), of the digitizer Sample Clock.
            Units: hertz (Hz)
            Supported Devices: NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitizerSampleClockRate(System.String,System.Double@)">
            <summary>
            Description
            Returns the actual frequency, in hertz (Hz), of the digitizer Sample Clock.
            Units: hertz (Hz)
            Supported Devices: NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedDigitizerSampleClockOutputTerminal(System.String,System.String)">
            <summary>
            Specifies the terminal at which to export the Digitizer Sample Clock.
            Valid Values: "" (empty string), "ClkOut"
            Default Value: "" (empty string)
            Supported Devices: NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedDigitizerSampleClockOutputTerminal(System.String,System.String@)">
            <summary>
            Specifies the terminal at which to export the Digitizer Sample Clock.
            Valid Values: "" (empty string), "ClkOut"
            Default Value: "" (empty string)
            Supported Devices: NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLo2ExportEnabled(System.String,System.Boolean)">
            <summary>
            Specifies whether to enable the LO2 OUT terminal on the installed devices.
            Set this attribute to TRUE to export the 4 GHz LO signal from the device LO2 IN terminal to the LO2 OUT terminal.
            You can also export the LO2 signal by setting the Lo2ExportEnabled attribute by call SetLo2ExportEnabled function with parameter true.
            Default Value: false
            Supported Devices: NI 5603/5605/5606 (external digitizer mode), NI 5665/5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLo2ExportEnabled(System.String,System.Boolean@)">
            <summary>
            Specifies whether to enable the LO2 OUT terminal on the installed devices.
            Set this attribute to TRUE to export the 4 GHz LO signal from the device LO2 IN terminal to the LO2 OUT terminal.
            You can also export the LO2 signal by setting the Lo2ExportEnabled attribute by call SetLo2ExportEnabled function with parameter true.
            Default Value: false
            Supported Devices: NI 5603/5605/5606 (external digitizer mode), NI 5665/5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalibrationCorrection100mhzFilter(System.String,System.Double)">
            <summary>
            Specifies the internal gain self-calibration correction for the 100 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
            Units: dB
            Default Value: 0 
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalibrationCorrection100mhzFilter(System.String,System.Double@)">
            <summary>
            Specifies the internal gain self-calibration correction for the 100 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
            Units: dB
            Default Value: 0 
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalibrationCorrection320mhzFilter(System.String,System.Double)">
            <summary>
            Specifies the internal gain self-calibration correction for the 320 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
            Units: dB
            Default Value: 0 
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalibrationCorrection320mhzFilter(System.String,System.Double@)">
            <summary>
            Specifies the internal gain self-calibration correction for the 320 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
            Units: dB
            Default Value: 0 
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalibrationCorrection765mhzFilter(System.String,System.Double)">
            <summary>
            Specifies the internal gain self-calibration correction for the 765 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
            Units: dB
            Default Value: 0 
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalibrationCorrection765mhzFilter(System.String,System.Double@)">
            <summary>
            Specifies the internal gain self-calibration correction for the 765 MHz IF filter path. The value you specify using this attribute overrides any previously-set value.
            Units: dB
            Default Value: 0 
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalDigitizerId(System.String,System.String)">
            <summary>
            Specifies the digitizer ID used during self calibration.
            Default Value: "" (empty string) 
            Supported Devices: NI 5603/5605/5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalDigitizerId(System.String,System.String@)">
            <summary>
            Specifies the digitizer ID used during self calibration.
            Default Value: "" (empty string) 
            Supported Devices: NI 5603/5605/5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalRfLowbandSignalConditioningPathSelection(System.String,System.Int32)">
            <summary>
            Specifies the RF lowband signal conditioning path.
            Valid Values: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath2, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath3, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath4, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath5
            Default Value: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalRfLowbandSignalConditioningPathSelection(System.String,System.Int32@)">
            <summary>
            Specifies the RF lowband signal conditioning path.
            Valid Values: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath2, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath3, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath4, niRfsaConstants.ExtCalRfLowbandSignalConditioningPath5
            Default Value: niRfsaConstants.ExtCalRfLowbandSignalConditioningPath1
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfHighPassFiltering(System.String,System.Double)">
            <summary>
            Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering.
            For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this attribute returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
            The NI 5606 features high pass filters at 1.35 GHz and 2.2 GHz.
            Valid Values: 0 to 26.5
            Default Value: 0
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfHighPassFilteringe(System.String,System.Double@)">
            <summary>
            Specifies the maximum corner frequency of the high pass filter in the RF signal path. The device uses the highest frequency high-pass filter option below or equal to the value you specify and returns a coerced value. Specifying a value of 0 disables high pass filtering.
            For multispan acquisitions, the device uses the appropriate filter for each subspan during acquisition, depending on the details of your application and the value you specify. In multispan acquisition spectrum applications, this attribute returns the value you specified rather than a coerced value if multiple high-pass filters are used during the acquisition.
            The NI 5606 features high pass filters at 1.35 GHz and 2.2 GHz.
            Valid Values: 0 to 26.5
            Default Value: 0
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalIfAttenuationTableSize(System.String,System.Int32)">
            <summary>
            Returns the size of the selected IF attenuation table.
            Valid Values: 0-132
            Default Value: 0
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalIfAttenuationTableSize(System.String,System.Int32@)">
            <summary>
            Returns the size of the selected IF attenuation table.
            Valid Values: 0-132
            Default Value: 0
            Supported Devices: NI 5606
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMaxDeviceInstantaneousBandwidth(System.String,System.Double)">
            <summary>
            Returns the maximum instantaneous bandwidth of the device.
            Default Value: N/A
            Supported Devices: NI 5600/5601/5603/5605/5606 (external digitizer mode), NI 5661/5663/5663E/5665/5667/5668R, NI 5693/5694
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMaxDeviceInstantaneousBandwidth(System.String,System.Double@)">
            <summary>
            Returns the maximum instantaneous bandwidth of the device.
            Default Value: N/A
            Supported Devices: NI 5600/5601/5603/5605/5606 (external digitizer mode), NI 5661/5663/5663E/5665/5667/5668R, NI 5693/5694
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMaxIQRate(System.String,System.Double)">
            <summary>
            Returns the maximum I/Q rate.
            Default Value: N/A
            Supported Devices: NI 5661/5663/5663E/5665/5667/5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMaxIQRate(System.String,System.Double@)">
            <summary>
            Returns the maximum I/Q rate.
            Default Value: N/A
            Supported Devices: NI 5661/5663/5663E/5665/5667/5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetNoiseSourcePowerEnabled(System.String,System.Int32)">
            <summary>
            Enables the 28 V DC source on the device front panel.
            Units: dB
            Default Value: Disabled
            Supported Devices: NI 5606, NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNoiseSourcePowerEnabled(System.String,System.Int32@)">
            <summary>
            Enables the 28 V DC source on the device front panel.
            Units: dB
            Default Value: Disabled
            Supported Devices: NI 5606, NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetFpgaTargetName(System.String,System.String)">
            <summary>
            Returns a string containing the name of the FPGA target being used. This name can be used with the RIO open session to open a reference to the FPGA.
            This attribute is channel dependent if multiple targets are supported.
            Supported Devices: NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFpgaTargetName(System.String,System.String@)">
            <summary>
            Returns a string containing the name of the FPGA target being used. This name can be used with the RIO open session to open a reference to the FPGA.
            This attribute is channel dependent if multiple targets are supported.
            Supported Devices: NI 5668R
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSubspanOverlap(System.String,System.Double)">
            <summary>
            Specifies the amount of overlap between consecutive subspans in a multispan acquisition. Overlapping subspans can reduce the power level of spurs in acquired data. The value you specify determines the amount of shift as a percentage of subspan width.
            Specifying a value of 0 disables subspan overlap. In this case, NI-RFSA uses either a single-span acquisition or a multispan acquisition without overlap, depending on the frequency range requested and the current device settings.
            Specifying a value greater than 0 causes NI-RFSA to use a multispan acquisition with the specified overlap even in situations in which it would normally use a single-span acquisition. NI-RFSA acquires data within the overlapped percentage and uses the minimum of the acquired values.
            NoteNI: RFSA may apply further shifts to the specified value to accommodate fixed-frequency edges of components such as preselectors. 
            Valid Values: 0 to &lt;100
            Default Value: 0
            Supported Devices: NI 5665/5668R
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSubspanOverlap(System.String,System.Double@)">
            <summary>
            Specifies the amount of overlap between consecutive subspans in a multispan acquisition. Overlapping subspans can reduce the power level of spurs in acquired data. The value you specify determines the amount of shift as a percentage of subspan width.
            Specifying a value of 0 disables subspan overlap. In this case, NI-RFSA uses either a single-span acquisition or a multispan acquisition without overlap, depending on the frequency range requested and the current device settings.
            Specifying a value greater than 0 causes NI-RFSA to use a multispan acquisition with the specified overlap even in situations in which it would normally use a single-span acquisition. NI-RFSA acquires data within the overlapped percentage and uses the minimum of the acquired values.
            NoteNI: RFSA may apply further shifts to the specified value to accommodate fixed-frequency edges of components such as preselectors. 
            Valid Values: 0 to &lt;100
            Default Value: 0
            Supported Devices: NI 5665/5668R
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureIQRate(System.String,System.Double)">
            <summary>
            
            Configures the rate at which the device samples I/Q values. The utilized downconverter bandwidth is equal to the coerced iqRate times 0.8.
            
            NI 5661&#8212;You should not need to configure an iqRate higher than 25 Samples per second (S/s) because the NI 5600 RF downconverter bandwidth is 20 MHz. If you choose to configure a higher I/Q rate, you may see aliasing effects at negative frequencies because the IF frequency of the NI 5600 RF downconverter is 15 MHz.
            NI 5663&#8212;Your maximum allowed instantaneous bandwidth depends on the I/Q carrier frequency you use. Refer to the NI 5601 RF downconverter overview for more information about instantaneous bandwidth.
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="IQ_Rate">
            
            iqRate
            double
            Specifies the I/Q rate for the acquisition. The value is expressed in samples per second (S/s).
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureNumberOfSamples(System.String,System.Boolean,System.Int64)">
            <summary>
            
            Configures the number of samples in a finite acquisition or configures the device to continuously acquire samples.
            If you configure the device for finite acquisition, it acquires the specified number of samples and then stops the acquisition. You can configure the device to acquire multiple records using the niRFSA_ConfigureNumberOfRecords function. Each record contains the number of samples specified in this function. The default number of records to acquire is 1.
            
            If you configure the device to continuously acquire samples, it continues acquiring data until you call the Abort() function to abort the acquisition. The device stores data in onboard memory in a circular fashion. After the device fills the memory, it starts overwriting previously acquired data from the beginning of the memory buffer. Retrieve the samples as they are being acquired using the niRFSA fetch IQ functions to avoid overwriting data before you retrieve it.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Number_of_Samples_Is_Finite">
            
            numberOfSamplesIsFinite
            bool
            Specifies whether to configure the device to acquire a finite number of samples or to acquire samples continuously.
            
            true The device acquires a finite number of samples.
            false The device continuously acquires samples.
            
            </param>
            <param name="Samples_Per_Record">
            
            samplesPerRecord
            int64
            Specifies the number of samples per record if numberOfSamplesIsFinite is set to true.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureNumberOfRecords(System.String,System.Boolean,System.Int64)">
            <summary>
            
            Configures the number of records in a finite acquisition or configures the device to continuously acquire records. You can only configure the device to acquire multiple records if the numberOfRecordsIsFinite parameter is set to true.
            
            If you configure the device to acquire records continuously, it continues acquiring records until you call the Abort() function to abort the acquisition. The device stores records in onboard memory in a circular fashion. Once the device fills the memory, it starts overwriting previously acquired records from the beginning of the memory buffer. Fetch the records as they are acquired to avoid overwriting data before you retrieve it.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use "" (an empty string) or NULL to specify all channels.
            
            </param>
            <param name="Number_of_Records_Is_Finite">
            
            numberOfRecordsIsFinite
            bool
            Specifies whether to configure the device to acquire a finite number of records or to acquire records continuously.
            
            true The device acquires a finite number of records.
            false The device continuously acquires records.
            
            </param>
            <param name="Number_of_Records">
            
            numberOfRecords
            Int64
            Specifies the number of records to acquire if numberOfRecordsIsFinite is set to true. The default number of records to acquire is 1.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureSpectrumFrequencyCenterSpan(System.String,System.Double,System.Double)">
            <summary>
            
            Configures the span and center frequency of the spectrum read by NI-RFSA. A spectrum acquisition consists of data surrounding the center frequency.
            
            Note:If you configure the spectrum span to a value larger than the instantaneous bandwidth of the device, NI-RFSA
                        performs multiple acquisitions and combines them into a spectrum of the size you
                        requested.
            
            Note:For the NI 5663, NI-RFSA does not support continuous acquisitions from frequency bands for which the instantaneous bandwidth differs. Refer to the NI 5601 RF Downconverter topic for more information about instantaneous bandwidth.
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Center_Frequency">
            
            centerFrequency
            double
            Specifies the center frequency of a spectrum acquisition. The value is expressed in hertz (Hz). The NI-RFSA device you use determines the valid range. Refer to your device specifications document for more information about frequency range.
            
            </param>
            <param name="Span">
            
            span
            double
            Specifies the span of a spectrum acquisition. The value is expressed in hertz (Hz).
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureSpectrumFrequencyStartStop(System.String,System.Double,System.Double)">
            <summary>
            
            Configures the start and stop frequencies of the spectrum read by NI-RFSA.
            
            Note:If you configure the spectrum span (stopFrequency &#8211;
                            startFrequency) to a value larger than the instantaneous bandwidth of the device, NI-RFSA
                        performs multiple acquisitions and combines them into a spectrum of the size you
                        request.
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use "" (an empty string) or NULL to specify all channels.
            
            </param>
            <param name="Start_Frequency">
            
            startFrequency
            double
            Specifies the lower limit of a span of frequencies. This value is expressed in hertz (Hz).
            
            </param>
            <param name="Stop_Frequency">
            
            stopFrequency
            double
            Specifies the upper limit of a span of frequencies. This value is expressed in hertz (Hz).
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureResolutionBandwidth(System.String,System.Double)">
            <summary>
            
            Configures the resolution bandwidth of a spectrum acquisition. The resolution bandwidth controls the width of the frequency bins in the power spectrum computed by NI-RFSA. A larger value for resolution bandwidth means the frequency bins are wider, and hence you get fewer bins, or spectral lines.
            By default, the resolution bandwidth value corresponds to the 3 decibels (dB) bandwidth of the window type NI-RFSA uses to compute the spectrum. To specify the frequency bin width directly, change the ResolutionBandwidthType attribute to RbwBinWidth.
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            string
            Identifies which channels to apply settings. Use an empty string or NULL to specify all channels.
            
            </param>
            <param name="Resolution_Bandwidth">
            
            resolutionBandwidth
            double
            Specifies the resolution bandwidth of a spectrum acquisition. The value is expressed in hertz (Hz). Configure the type of resolution bandwidth with the ResolutionBandwidthType attribute.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureDigitalEdgeStartTrigger(System.String,System.Int32)">
            <summary>
            
            Configures the device to wait for a digital edge Start trigger at the beginning of the acquisition.
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Source">
            
            source
            string
            Specifies the source of the digital edge for the Start trigger.
            
            PFI0
            The trigger is received on PFI 0.
            PFI1
            The trigger is received on PFI 1.
            PXI_Trig0
            The trigger is received on PXI trigger line 0.
            PXI_Trig1
            The trigger is received on PXI trigger line 1.
            PXI_Trig2
            The trigger is received on PXI trigger line 2.
            PXI_Trig3
            The trigger is received on PXI trigger line 3.
            PXI_Trig4
            The trigger is received on PXI trigger line 4.
            PXI_Trig5
            The trigger is received on PXI trigger line 5.
            PXI_Trig6
            The trigger is received on PXI trigger line 6.
            PXI_Trig7
            The trigger is received on PXI trigger line 7.
            PXI_STAR
            The trigger is received on the PXI star trigger line.
            
            </param>
            <param name="Edge">
            
            edge
            ViInt32
            Specifies the edge to detect.
            
            Rising EdgeNI-RFSA detects a rising edge.
            Falling EdgeNI-RFSA detects a falling edge.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureSoftwareEdgeStartTrigger">
            <summary>
            
            Configures the device to wait for a software Start trigger at the beginning of the acquisition. The device  waits until you call the SendSoftwareEdgeTrigger function to assert the trigger.
            Supported Devices: NI 5661/5663
            
            </summary>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.DisableStartTrigger">
            <summary>
            
            Configures the device to not wait for a Start trigger at the beginning of the acquisition. This function is only necessary if you configured a Start trigger in the past and now want to disable it.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureDigitalEdgeRefTrigger(System.String,System.Int32,System.Int64)">
            <summary>
            
            Configures the device to wait for a digital edge Reference trigger to mark a reference point within the record.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Source">
            
            source
            ConstString
            Specifies the source of the digital edge for the Reference trigger.
            
             NIRFSA_VAL_PFI0_STR  ("PFI0")
            The trigger is received on PFI 0.
            NIRFSA_VAL_PFI1_STR  ("PFI1")
            The trigger is received on PFI 1.
             NIRFSA_VAL_PXI_TRIG0_STR ("PXI_Trig0")
            The trigger is received on PXI trigger line 0.
             NIRFSA_VAL_PXI_TRIG1_STR ("PXI_Trig1")
            The trigger is received on PXI trigger line 1.
             NIRFSA_VAL_PXI_TRIG2_STR ("PXI_Trig2")
            The trigger is received on PXI trigger line 2.
             NIRFSA_VAL_PXI_TRIG3_STR ("PXI_Trig3")
            The trigger is received on PXI trigger line 3.
             NIRFSA_VAL_PXI_TRIG4_STR ("PXI_Trig4")
            The trigger is received on PXI trigger line 4.
             NIRFSA_VAL_PXI_TRIG5_STR ("PXI_Trig5")
            The trigger is received on PXI trigger line 5.
             NIRFSA_VAL_PXI_TRIG6_STR ("PXI_Trig6")
            The trigger is received on PXI trigger line 6.
             NIRFSA_VAL_PXI_TRIG7_STR ("PXI_Trig7")
            The trigger is received on PXI trigger line 7.
             NIRFSA_VAL_PXI_STAR_STR ("PXI_STAR")
            The trigger is received on the PXI star trigger line.
            
            </param>
            <param name="Edge">
            
            edge
            Int32
            Specifies the trigger edge to detect.
            
            NIRFSA_VAL_RISING_EDGE (900)NI-RFSA detects a rising edge.
            NIRFSA_VAL_FALLING_EDGE (901)NI-RFSA detects a falling edge.
            
            </param>
            <param name="Pretrigger_Samples">
            
            pretriggerSamples
            Int64
            Specifies the number of samples to store for each record that was acquired in the time period immediately before the trigger occurred. 
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureIQPowerEdgeRefTrigger(System.String,System.Double,System.Int32,System.Int64)">
            <summary>
            
            Configures the device to wait for the complex power of the I/Q data to cross the specified threshold to mark a reference point within the record.
            
            To trigger on bursted signals, add a minimum quiet time (configured with the NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_MINIMUM_QUIET_TIME attribute) to ensure the trigger does not occur in the middle of a burst if the acquisition starts while a burst is being generated. The quiet time should be set to a value smaller than the time between bursts, but large enough to ignore power changes within a burst.
            
            Supported Devices: NI 5661/5663
            </summary>
            <param name="Source">
            
            source
            ConstString
            Specifies the source of the RF signal for the power edge Reference trigger. The only supported value is channel "0".
            
            </param>
            <param name="Level">
            
            level
            double
            Specifies the threshold above or below which the device  triggers.
            
            </param>
            <param name="Slope">
            
            slope
            Int32
            Specifies whether the device detects a positive or negative slope on the trigger signal.
            
            NIRFSA_VAL_RISING_SLOPE (1000)NI-RFSA detects a rising edge (positive slope). This value is the default.
            NIRFSA_VAL_FALLING_SLOPE (1001)NI-RFSA detects a falling edge (negative slope).
            
            </param>
            <param name="Pretrigger_Samples">
            
            pretriggerSamples
            Int64
            Specifies the number of samples to store for each record that was acquired in the time period immediately before the trigger occurred. 
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureSoftwareEdgeRefTrigger(System.Int64)">
            <summary>
            
            Configures the device to wait for a software Reference trigger to mark a reference point within the record. The device waits until you call the SendSoftwareEdgeTrigger function to assert the trigger.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Pretrigger_Samples">
            
            pretriggerSamples
            Int64
            Specifies the number of samples to store for each record that was acquired in the time period immediately before the trigger occurred. 
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.DisableRefTrigger">
            <summary>
            
            Configures the device to not wait for a Reference trigger to mark a reference point within a record. This function is only necessary if you configured a Reference trigger in the past and now want to disable it.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureDigitalEdgeAdvanceTrigger(System.String,System.Int32)">
            <summary>
            
            Configures the device to wait for a digital edge Advance trigger. The Advance trigger indicates where a new record begins.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Source">
            
            source
            ConstString
            Specifies the source of the digital edge for the Advance trigger.
            
             NIRFSA_VAL_PFI0_STR  ("PFI0")
            The trigger is received on PFI 0.
            NIRFSA_VAL_PFI1_STR  ("PFI1")
            The trigger is received on PFI 1.
             NIRFSA_VAL_PXI_TRIG0_STR ("PXI_Trig0")
            The trigger is received on PXI trigger line 0.
             NIRFSA_VAL_PXI_TRIG1_STR ("PXI_Trig1")
            The trigger is received on PXI trigger line 1.
             NIRFSA_VAL_PXI_TRIG2_STR ("PXI_Trig2")
            The trigger is received on PXI trigger line 2.
             NIRFSA_VAL_PXI_TRIG3_STR ("PXI_Trig3")
            The trigger is received on PXI trigger line 3.
             NIRFSA_VAL_PXI_TRIG4_STR ("PXI_Trig4")
            The trigger is received on PXI trigger line 4.
             NIRFSA_VAL_PXI_TRIG5_STR ("PXI_Trig5")
            The trigger is received on PXI trigger line 5.
             NIRFSA_VAL_PXI_TRIG6_STR ("PXI_Trig6")
            The trigger is received on PXI trigger line 6.
             NIRFSA_VAL_PXI_TRIG7_STR ("PXI_Trig7")
            The trigger is received on PXI trigger line 7.
             NIRFSA_VAL_PXI_STAR_STR ("PXI_STAR")
            The trigger is received on the PXI star trigger line.
            
            </param>
            <param name="Edge">
            
            edge
            Int32
            Specifies the trigger edge to detect.
            
            NIRFSA_VAL_RISING_EDGE (900)NI-RFSA detects a rising edge.
            NIRFSA_VAL_FALLING_EDGE (901)NI-RFSA detects a falling edge.
            
            </param>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureSoftwareEdgeAdvanceTrigger">
            <summary>
            
            Configures the device to wait for a digital edge Advance trigger. The Advance trigger indicates where a new record begins. The device waits until you call the SendSoftwareEdgeTrigger function to assert the trigger.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.DisableAdvanceTrigger">
            <summary>
            
            Configures the device to not use an Advance trigger. This function is only necessary if you configured an Advance trigger in the past and now want to disable it.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <returns>
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value           Meaning
            0               Success
            Positive Values Warnings
            Negative Values Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SendSoftwareEdgeTrigger(System.Int32,System.String)">
            <summary>
            
            Sends a trigger to the device when you configure a software version of a supported trigger and the device is waiting for the trigger to be sent. This function also can be used to override a hardware trigger.
            This function returns an error in the following situations:
            You configure an invalid trigger.
            The instrument driver is in spectrum mode.
            You have not previously called the niRFSA_Initiate function.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Trigger">
            
            trigger
            Int32
            Specifies the software signal to send.
            
            StartTrigger (1100)NI-RFSA sends a Start software trigger.
            RefTrigger (702)NI-RFSA sends a Reference software trigger.
            AdvanceTrigger (1102)NI-RFSA sends an Advance software trigger.
            ArmRefTrigger (1103)NI-RFSA sends an Arm Reference software trigger.
            
            </param>
            <param name="Trigger_Identifier">
            
            triggerIdentifier
            ConstString
            Specifies a particular instance of a trigger. NI-RFSA does not currently support this parameter.
            
            </param>
            <returns>
            
            status
            Status
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ExportSignal(System.Int32,System.String,System.String)">
            <summary>
            
            Routes signals (triggers, clocks, and events) to the specified output terminal.
            
            If you export a signal with this function and  commit the session, the signal is routed to the output terminal you specify. If you then reconfigure the signal to have a different output terminal, the previous output terminal is tristated when the session is next committed. If you change the outputTerminal to NIRFSA_VAL_DO_NOT_EXPORT and commit, the previous output terminal is tristated.
            
            Any signals, except for those exported over PXI trigger lines, that are exported within a session persist after the session closes to prevent signal glitches between sessions. PXI trigger lines are always set to tristate when a session is closed. If you wish to have the output terminal tristated when the session closes, first change the outputTerminal for the exported signal to NIRFSA_VAL_DO_NOT_EXPORT and commit the session again before closing it.
            
            You can also tristate all PFI lines by setting the resetDevice parameter in the niRFSA_init function or by using the niRFSA_reset function.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Signal">
            
            signal
            ViInt32
            Specifies the type of signal to route. You can choose to export the Start, Reference, and Advance triggers and the Ready for Start, Ready for Advance, Ready for Ref, End of Record, and Done events.
            
            NIRFSA_VAL_START_TRIGGER (1100)NI-RFSA routes a Start trigger signal.
            NIRFSA_VAL_REF_TRIGGER (702)NI-RFSA routes a Reference trigger signal.
            NIRFSA_VAL_ADVANCE_TRIGGER (1102)NI-RFSA routes an Advance trigger signal.
            NIRFSA_VAL_READY_FOR_START_EVENT (1200)NI-RFSA routes a Ready for Start event signal.
            NIRFSA_VAL_READY_FOR_ADVANCE_EVENT (1202)NI-RFSA routes a  Ready for Advance event signal.
            NIRFSA_VAL_READY_FOR_REF_EVENT (1201)NI-RFSA routes a Ready for Reference event signal.
            NIRFSA_VAL_END_OF_RECORD_EVENT (1203)NI-RFSA routes an End of Record event signal.
            NIRFSA_VAL_DONE_EVENT (1204)NI-RFSA routes a Done event signal.
            NIRFSA_VAL_REF_CLOCK (1205)NI-RFSA routes a Reference clock signal.
            </param>
            <param name="Signal_Identifier">
            
            signalIdentifier
            ViConstString
            Specifies a particular instance of a trigger. NI-RFSA does not currently support this parameter.
            
            </param>
            <param name="Output_Terminal">
            
            outputTerminal
            ViConstString
            Specifies the terminal where the signal will be exported. You can also choose not to export any signal.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigureRefClock(System.String,System.Double)">
            <summary>
            
            Configures the NI-RFSA device Reference clock.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <param name="Ref_Clock_Source">
            
            refClockSource
            ViConstString
            Specifies the Reference clock source.
            
            NIRFSA_VAL_ONBOARD_CLOCK_STR ("OnboardClock")
            NI 5661&#8212;Lock the NI-RFSA device to the NI 5600 RF downconverter onboard clock.
            
            NI 5663&#8212;Lock the NI 5622 to the NI 5652 LO source onboard clock. Connect the REF IN/OUT connector on the NI 5652 to the CLK IN terminal on the NI 5622.
            NIRFSA_VAL_REF_IN_STR ("RefIn")
            NI 5661&#8212;Lock the NI-RFSA device to the signal at the external FREQ REF IN connector on the
                              NI 5600.
            
            NI 5663&#8212;Connect the external signal to the NI&#160;5652 REF IN/OUT connector. Only use this configuration in downconverter-only mode.
            NIRFSA_VAL_CLK_IN_STR ("ClkIn")
            NI 5661&#8212;This configuration does not apply to the NI 5661.
            
            NI 5663&#8212;Lock the NI 5622 to an external 10 MHz signal. Connect the external signal to the CLK IN connector on the NI 5622, and connect the NI 5622 CLK&#160;OUT connector to the REF IN/OUT connector on the NI 5652.
            NIRFSA_VAL_PXI_CLK_STR ("PXI_Clk")
            NI 5661&#8212;Lock the NI-RFSA device to the PXI backplane clock using the NI&#160;5600. You must connect the PXI 10 MHz connector to the FREQ REF IN connector on the
                              NI&#160;5600 front panel to use this option.
            
            NI 5663&#8212;Lock the NI 5663 to the PXI backplane clock.
            
            </param>
            <param name="Ref_Clock_Rate">
            
            refClockRate
            ViReal64
            Specifies the reference clock rate, expressed in hertz (Hz). The default value is 10 MHz, which is the only supported value.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ConfigurePXIChassisClk10(System.String)">
            <summary>
            
            Specifies the signal to drive the 10&#160;MHz Reference clock on the PXI backplane. This option can only be configured when the NI&#160;5600 is installed in Slot&#160;2 of the PXI chassis. 
            
            Supported Devices: NI 5600 (downconverter only mode), NI 5661
            </summary>
            <param name="PXI_Clk_10_Source">
            
            PXIClk10Source
            ViConstString
            Specifies the signal to drive the 10 MHz Reference clock on the PXI backplane. This option can only be configured when the NI&#160;5600 is in Slot&#160;2 of the PXI chassis. 
            
                                                                         NIRFSA_VAL_NONE_STR ("None")
            
                                The device does not drive the PXI 10 MHz backplane Reference
                              clock.
            
                                                                        NIRFSA_VAL_ONBOARD_CLOCK_STR ("OnboardClock")
            
                                The device drives the PXI 10 MHz backplane Reference clock with
                              the NI&#160;5600 onboard clock. You must connect the 10 MHz OUT connector to the
                              PXI 10 MHz I/O connector on the NI&#160;5600 front panel to use this option.
            
                                                                        NIRFSA_VAL_REF_IN_STR ("RefIn")
            
                                The device drives the PXI 10 MHz backplane Reference clock with
                              the reference source attached to the NI&#160;5600 FREQ REF IN connector. You must
                              connect the 10&#160;MHz&#160;OUT connector to the PXI&#160;10&#160;MHz&#160;I/O connector on the NI&#160;5600 front
                              panel to use this option.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ResetAttribute(System.String,System.Int32)">
            <summary>
            
            Resets the attribute to its default value.
            
            Supported Devices: 
            
            </summary>
            <param name="Channel_Name">
            
            channelName
            ViConstString
            Specifies the name of the channel on which to reset the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to "" (empty string) or VI_NULL.
            
            </param>
            <param name="Attribute_ID">
            
            attributeID
            ViAttr
            Pass the ID of an attribute.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.Initiate">
            <summary>
            
            Starts an I/Q acquisition. You may use this function in conjunction with the NI-RFSA fetch IQ functions to retrieve acquired I/Q data, or use the NI-RFSA read IQ functions to both initiate the acquisition and retrieve I/Q data at one time.
            
            For improved accuracy, add a wait after calling the niRFSA_Commit function and before calling the niRFSA_Initiate function to allow the device additional settling time. Refer to the specifications document that shipped with your device for information about settling time and accuracy.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQSingleRecordComplexI16(System.String,System.Int64,System.Int64,System.Double,System.Int16[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
            <summary>
            
            Fetches binary I/Q data from a single record in an acquisition. The fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
            
            This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as a fetch is performed as part of that function.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Record_Number">
            
            recordNumber
            ViInt64
            Specifies the record to retrieve. Record numbers are zero-based.
            
            </param>
            <param name="Number_of_Samples">
            
            numberOfSamples
            ViInt64
            Specifies the number of samples to fetch. A value of &#8211;1 specifies that NI-RFSA will fetch all samples. The default value is 1000.
            
            </param>
            <param name="Timeout">
            
            timeout
            ViReal64
            Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
            
            </param>
            <param name="Data">
            
            data
            NIComplexI16*
            Returns the acquired waveform. Allocate an NI ComplexI16 array at least as large as numberOfSamples.
            
            </param>
            <param name="Waveform_Info">
            
            wfmInfo
            niRFSA_wfmInfo*
            Contains the absolute and relative timestamps for the operation, the time interval, and the actual number of samples read.
            
            The following list provides more information about each of these properties:
            absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
            relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
            dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
            actual samples read&#8212;returns an integer representing the number of samples in the waveform.
            offset&#8212;returns the offset to scale data (b) in mx+b form.
            gain&#8212;returns the gain to scale data (m) in mx+b form.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQSingleRecordComplexI16(System.String,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexI16[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
            <summary>
            Fetches binary I/Q data from a single record in an acquisition. The fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
            This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as a fetch is performed as part of that function.
            Supported Devices: NI 5661/5663
            </summary>
            <param name = "Channel_List">
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            </param>
            <param name = "Record_Number">
            recordNumber
            ViInt64
            Specifies the record to retrieve. Record numbers are zero-based.
            </param>
            <param name = "Number_of_Samples">
            numberOfSamples
            ViInt64
            Specifies the number of samples to fetch. A value of &#8211;1 specifies that NI-RFSA will fetch all samples. The default value is 1000.
            </param>
            <param name = "Timeout">
            timeout
            ViReal64
            Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
            </param>
            <param name = "Data">
            data
            NIComplexI16*
            Returns the acquired waveform. Allocate an NI ComplexI16 array at least as large as numberOfSamples.
            </param>
            <param name = "Waveform_Info">
            wfmInfo
            niRFSA_wfmInfo*
            Contains the absolute and relative timestamps for the operation, the time interval, and the actual number of samples read.
            The following list provides more information about each of these properties:
            absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
            relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
            dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
            actual samples read&#8212;returns an integer representing the number of samples in the waveform.
            offset&#8212;returns the offset to scale data (b) in mx+b form.
            gain&#8212;returns the gain to scale data (m) in mx+b form.
            </param>
            <returns>
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQSingleRecordComplexF64(System.String,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexNumber[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
            <summary>
            
            Fetches I/Q data from a single record in an acquisition. The fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
            
            This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Record_Number">
            
            recordNumber
            ViInt64
            Specifies the record to retrieve. Record numbers are zero-based.
            
            </param>
            <param name="Number_of_Samples">
            
            numberOfSamples
            ViInt64
            Specifies the number of samples to fetch.
            
            </param>
            <param name="Timeout">
            
            timeout
            ViReal64
            Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
            
            </param>
            <param name="Data">
            
            data
            NIComplexNumber*
            Returns the acquired waveform. Allocate an NIComplexNumber array at least as large as numberOfSamples.
            
            </param>
            <param name="Waveform_Info">
            
            wfmInfo
            niRFSA_wfmInfo*
            Returns the absolute and relative timestamps for the operation, the time interval, and the actual number of samples read.
            
            The following list provides more information about each of these properties:
            absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
            relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
            dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
            actual samples read&#8212;returns an integer representing the number of samples in the waveform.
            offset&#8212;returns the offset to scale data (b) in mx+b form.
            gain&#8212;returns the gain to scale data (m) in mx+b form.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ReadIQSingleRecordComplexF64(System.String,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexNumber[],System.Int64,NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo@)">
            <summary>
            
            Initiates an acquisition and fetches a single I/Q data record. Do not use this function if you have configured the device to continuously acquire data samples or to acquire multiple records.
            
            Supported Devices: NI 5661/5663
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Timeout">
            
            timeout
            ViReal64
            Specifies in seconds the time allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available.
            
            </param>
            <param name="Data">
            
            data
            NIComplexNumber*
            Returns the acquired waveform. Allocate an NIComplexNumber array at least as large as numberOfSamples.
            
            </param>
            <param name="Data_Array_Size">
            
            dataArraySize
            ViInt64
            Specifies the size of the array for the data parameter. The array needs to be at least as large as the number of samples configured in the niRFSA_ConfigureNumberOfSamples function.
            
            </param>
            <param name="Waveform_Info">
            
            wfmInfo*
            niRFSA_wfmInfo
            Returns additional information about the data array.
            
            The following list provides more information about each of these properties:
            absolute timestamp&#8212;returns the timestamp, in seconds, of the first fetched sample that is comparable between records and acquisitions.
            relative timestamp&#8212;returns a timestamp that corresponds to the difference, in seconds, between the first sample returned and the Reference trigger location.
            dt&#8212;returns the time interval between data points in the acquired signal. The I/Q data sampling rate is the reciprocal of this value.
            actual samples read&#8212;returns an integer representing the number of samples in the waveform.
            offset&#8212;returns the offset to scale data (b) in mx+b form.
            gain&#8212;returns the gain to scale data (m) in mx+b form.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQMultiRecordComplexI16(System.String,System.Int64,System.Int64,System.Int64,System.Double,System.Int16[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo[])">
            <summary>
            
            Fetches binary I/Q data from multiple records in an acquisition. Fetching transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
            
            This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Starting_Record">
            
            startingRecord
            ViInt64
            Specifies the first record to retrieve. Record numbers are zero-based.
            
            </param>
            <param name="Number_of_Records">
            
            numberOfRecords
            ViInt64
            Specifies the number of records to fetch. A value of &#8211;1 specifies that NI-RFSA fetches all records in an acquisition starting with the record specified by startingRecord. Record numbers are zero-based. The default value is &#8211;1.
            
            </param>
            <param name="Number_of_Samples">
            
            numberofSamples
            ViInt64
            Specifies the number of samples per record.
            </param>
            <param name="Timeout">
            
            timeout
            ViReal64
            Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
            
            </param>
            <param name="Data">
            
            data
            NIComplexI16*
            Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
            
            </param>
            <param name="Waveform_Info">
            
            wfmInfo
            niRFSA_wfmInfo*
            Returns an array of structures containing information about each record fetched. Each structure contains the absolute and relative timestamps, the dt, and the actual number of samples read for the corresponding record.
            
            The following list provides more information about each of these properties:
            absolute timestamp&#8212;returns the timestamp in seconds of the first fetched sample that is comparable between records and acquisitions.
            relative timestamp&#8212;returns a timestamp that corresponds to the difference in seconds between the first sample returned and the Reference trigger location.
            dt&#8212;returns the time interval between data points in the acquired signal. The IQ data sampling rate is the reciprocal of this value.
            actual samples read&#8212;returns an integer representing the number of samples in the waveform.
            offset&#8212;returns the offset to scale data in mx+b form.
            gain&#8212;returns the gain to scale data in mx+b form.
            Note:Allocate an array of structures at least as large as numberOfRecords for this parameter.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQMultiRecordComplexI16(System.String,System.Int64,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexI16[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo[])">
            <summary>
            Fetches binary I/Q data from multiple records in an acquisition. Fetching transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
            This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
            Supported Devices: NI 5661/5663
            </summary>
            <param name = "Channel_List">
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            </param>
            <param name = "Starting_Record">
            startingRecord
            ViInt64
            Specifies the first record to retrieve. Record numbers are zero-based.
            </param>
            <param name = "Number_of_Records">
            numberOfRecords
            ViInt64
            Specifies the number of records to fetch. A value of &#8211;1 specifies that NI-RFSA fetches all records in an acquisition starting with the record specified by startingRecord. Record numbers are zero-based. The default value is &#8211;1.
            </param>
            <param name = "Number_of_Samples">
            numberofSamples
            ViInt64
            Specifies the number of samples per record.
            </param>
            <param name = "Timeout">
            timeout
            ViReal64
            Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
            </param>
            <param name = "Data">
            data
            NIComplexI16*
            Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
            </param>
            <param name = "Waveform_Info">
            wfmInfo
            niRFSA_wfmInfo*
            Returns an array of structures containing information about each record fetched. Each structure contains the absolute and relative timestamps, the dt, and the actual number of samples read for the corresponding record.
            The following list provides more information about each of these properties:
            absolute timestamp&#8212;returns the timestamp in seconds of the first fetched sample that is comparable between records and acquisitions.
            relative timestamp&#8212;returns a timestamp that corresponds to the difference in seconds between the first sample returned and the Reference trigger location.
            dt&#8212;returns the time interval between data points in the acquired signal. The IQ data sampling rate is the reciprocal of this value.
            actual samples read&#8212;returns an integer representing the number of samples in the waveform.
            offset&#8212;returns the offset to scale data in mx+b form.
            gain&#8212;returns the gain to scale data in mx+b form.
            Note:Allocate an array of structures at least as large as numberOfRecords for this parameter.
            </param>
            <returns>
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            The general meaning of the status code is as follows:
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.FetchIQMultiRecordComplexF64(System.String,System.Int64,System.Int64,System.Int64,System.Double,NationalInstruments.ModularInstruments.Interop.niComplexNumber[],NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo[])">
            <summary>
            
            Fetches I/Q data from multiple records in an acquisition. A fetch transfers acquired waveform data from device memory to computer memory. The data was acquired to onboard memory previously by the hardware after the acquisition was initiated.
            
            This function is not necessary if you use the niRFSA_ReadIQSingleRecordComplexF64 function, as the fetch is performed as part of that function.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Starting_Record">
            
            startingRecord
            ViInt64
            Specifies the first record to retrieve. Record numbers are zero-based.
            
            </param>
            <param name="Number_of_Records">
            
            numberOfRecords
            ViInt64
            Specifies the number of records to fetch. A value of &#8211;1 specifies that NI-RFSA fetches all records in an acquisition starting with the record specified by startingRecord. Record numbers are zero-based.  The default value is &#8211;1.
            
            </param>
            <param name="Number_of_Samples">
            
            numberOfSamples
            ViInt64
            Specifies the number of samples per record.
            
            </param>
            <param name="Timeout">
            
            timeout
            ViReal64
            Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. A value of 0 specifies the function immediately returns available data. The default value is 10.
            
            </param>
            <param name="Data">
            
            data
            NIComplexNumber*
            Returns the acquired waveform for each record fetched. The waveforms are written sequentially in the array. Allocate an array at least as large as numberOfSamples times numberOfRecords for this parameter.
            
            </param>
            <param name="Waveform_Info">
            
            wfmInfo
            niRFSA_wfmInfo*
            Returns an array of structures containing information about each record fetched. Each structure contains the absolute and relative timestamps, the dt, and the actual number of samples read for the corresponding record.
            
            The following list provides more information about each of these properties:
            absolute timestamp&#8212;returns the timestamp in seconds of the first fetched sample that is comparable between records and acquisitions.
            relative timestamp&#8212;returns a timestamp that corresponds to the difference in seconds between the first sample returned and the Reference trigger location.
            dt&#8212;returns the time interval between data points in the acquired signal. The IQ data sampling rate is the reciprocal of this value.
            actual samples read&#8212;returns an integer representing the number of samples in the waveform.
            offset&#8212;returns the offset to scale data in mx+b form.
            gain&#8212;returns the gain to scale data in mx+b form.
            Note:Allocate an array of structures at least as large as numberOfRecords for this parameter.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.Abort">
            <summary>
            
            Stops an acquisition previously started with the niRFSA_Initiate function. Calling this function is optional, unless you want to stop an acquisition before it is complete or you are continuously acquiring data.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ReadPowerSpectrumF64(System.String,System.Double,System.Double[],System.Int32,NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo@)">
            <summary>
            
            Initiates a spectrum acquisition and returns power spectrum data.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Timeout">
            
            timeout
            ViReal64
            Specifies the time, in seconds, allotted for the function to complete before returning a timeout error. A value of &#8211;1 specifies the function waits until all data is available. The default value is 10.
            
            </param>
            <param name="Power_Spectrum_Data">
            
            powerSpectrumData[]
            ViReal64
            Returns power spectrum data. Allocate an array as large as dataArraySize.
            
            </param>
            <param name="Data_Array_Size">
            
            dataArraySize
            ViInt64
            Specifies the size of the array you specify for the powerSpectrumData parameter. Use the niRFSA_GetNumberOfSpectralLines function to obtain the array size to allocate. The array must be at least as large as the number of spectral lines that NI-RFSA computes for the power spectrum.
            
            </param>
            <param name="Spectrum_Info">
            
            spectrumInfo
            niRFSA_spectrumInfo*
            Returns additional information about the powerSpectrumData array. This information includes the frequency, in hertz (Hz) corresponding to the first element in the array, the frequency increment, in Hz, between adjacent array elements, and the number of spectral lines the function returned.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNumberOfSpectralLines(System.String,System.Int32@)">
            <summary>
            
            Returns the number of spectral lines that NI-RFSA will compute with the current power spectrum configuration.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663 
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Number_of_Spectral_Lines">
            
            numberOfSpectralLines
            ViInt32*
            Returns the value of the NIRFSA_ATTR_NUM_SPECTRAL_LINES attribute.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CheckAcquisitionStatus(System.Boolean@)">
            <summary>
            
            Checks the status of the acquisition. Use this function to check for any errors that may occur during signal acquisition or to check whether the device has completed the acquisition operation. 
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Is_Done">
            
            isDone
            ViBoolean*
            Returns signal acquisition status.
            
            VI_TRUESignal acquisition is complete.
            VI_FALSESignal acquisition is not complete.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.reset">
            <summary>
            
            Resets the device to a default initialization state.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.Commit">
            <summary>
            
            Commits settings to hardware. Calling this function is optional. Settings are automatically committed to hardware when you call the niRFSA_Initiate function, a read IQ function, or the niRFSA_ReadPowerSpectrumF64 function. 
            
            For improved accuracy, add a wait after calling this function and before calling the niRFSA_Initiate function to allow the device additional settling time. Refer to the specifications document that shipped with your device for information about settling time and accuracy.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.self_test(System.Int16@,System.Text.StringBuilder)">
            <summary>
            
            Performs a self-test on the NI-RFSA device and returns the test result. This function performs a simple series of tests verifying that the NI-RFSA device is powered on and responding.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <param name="testResult">
            
            testResult
            ViInt16*
            Returns the value from the device self-test. A value of 0 means success.
            
            </param>
            <param name="testMessage">
            
            testMessage[]
            ViChar
            Returns the self-test response string from the NI-RFSA device.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SelfCal">
            <summary>
            
            Self-calibrates the IF digitizer associated with the NI-RFSA device. If self calibration is performed successfully, the new calibration constants are immediately stored in the self calibration area of the digitizer EEPROM. Refer to the NI High-Speed Digitizers Help for more information about how often to self-calibrate. 
            
            Call this function to obtain more accurate acquisition results when the environmental conditions change significantly.
            
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.PerformThermalCorrection">
            <summary>
            
            Corrects for temperature variations while acquiring the same signal for extended periods of time in a continuous acquisition. Measurements are affected by changes in temperature. NI-RFSA internally acquires the
                        temperature every time you initiate an acquisition. If you are performing a continuous acquisition, National Instruments recommends calling this function once every 10&#160;minutes in a stable temperature environment to periodically update temperature calibration.
                        Supported Devices: NI 5661/5663
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFetchBacklog(System.String,System.Int64,System.Int64@)">
            <summary>
            
            Returns the number of points acquired that have not been fetched yet.
            
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Record_Number">
            
            recordNumber
            ViInt64
            Specifies the record from which to read the backlog. Record numbers are zero-based. The default value is 0.
            
            </param>
            <param name="Backlog">
            
            backlog
            ViInt64*
            Returns the number of samples available to read for the requested record.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.revision_query(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            
            Returns the revision numbers of the NI-RFSA instrument driver.
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            </summary>
            <param name="Instrument_Driver_Revision">
            
            driverRev
            ViChar[]
            Returns the instrument driver software revision numbers in the form of a string. The value of the NIRFSA_ATTR_SPECIFIC_DRIVER_REVISION attribute is returned.
            
            You must pass a ViChar array with at least 256&#160;bytes.
            
            </param>
            <param name="Firmware_Revision">
            
            instRev
            ViChar[]
            Returns the instrument firmware revision numbers in the form of a string. The value of the NIRFSA_ATTR_INSTRUMENT_FIRMWARE_REVISION attribute is returned.
            
            You must pass a ViChar array with at least 256&#160;bytes.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpectralInfoForSMT(NationalInstruments.ModularInstruments.Interop.SmtSpectrumInfo@)">
            <summary>
            
            Returns information about the power spectrum NI-RFSA computes.
            
            Note:The NI Spectral Measurements Toolkit (SMT) requires this information. 
            Supported Devices: NI 5661/5663
            
            </summary>
            <param name="Spectrum_Info">
            
            spectrumInfo
            SmtSpectrumInfo*
            Returns a cluster containing information about the power spectrum NI-RFSA computes that is needed by the SMT.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFrequencyResponse(System.String,System.Int32,System.Double[],System.Double[],System.Double[],System.Int32@)">
            <summary>
            
            Returns the IF response, based upon current NI-RFSA settings. The NI 5661/5663 automatically corrects for the IF response when Digital IF Equalization is enabled, which is the default state. If you are using downconverter only mode, you can use information returned from this VI to correct your measurement.
            Supported Devices: NI 5600/5601 (downconverter only mode), NI 5661/5663
            
            </summary>
            <param name="Channel_List">
            
            channelList
            ViConstString
            Identifies which channels to apply settings. Use "" (an empty string) or VI_NULL to specify all channels.
            
            </param>
            <param name="Buffer_Size">
            
            bufferSize
            ViInt32
            Specifies the size of the array you specify for the powerSpectrumData parameter. Use the niRFSA_GetNumberOfSpectralLines function to learn the array size you need to allocate. The array must be at least as large as the number of spectral lines that NI-RFSA computes for the power spectrum.
            
            </param>
            <param name="Frequencies">
            
            frequencies[]
            ViReal64
            Returns an array containing the frequencies, in hertz (Hz), that correspond to the response data.
            
            Pass VI_NULL if you do not want to use this parameter.
            
            </param>
            <param name="Magnitude_Response">
            
            magnitudeResponse[]
            ViReal64
            Returns an array containing the magnitude IF response, in decibels (dB). The magnitude IF response is normalized to the center frequency at each frequency in the frequencies array.
            
            Pass VI_NULL if you do not want to use this parameter.
            
            </param>
            <param name="Phase_Response">
            
            phaseResponse[]
            ViReal64
            Returns an array containing the phase IF response, in degrees. The phase IF response is normalized to the center frequency at each frequency entry in the frequencies array.
            
            Pass VI_NULL if you do not want to use this parameter.
            
            </param>
            <param name="Number_of_Frequencies">
            
            numberOfFrequencies
            ViInt32*
            Returns the required number of elements in the frequencies array and the response arrays. If bufferSize is 0, this parameter returns the expected array size. The expected array size depends on which NI-RFSA device you use (NI&#160;5661 or NI&#160;5663) and on the current settings (NI&#160;5663 only).
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.
            
            To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.
            
            The general meaning of the status code is as follows:
            
            Value
            Meaning
            0
            Success
            Positive Values
            Warnings
            Negative Values
            Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalAdjustIFAttenuationCalibration(System.String,System.Int32,System.Int32,System.Double[],System.Double)">
             <summary>
             Specifies the IF attenuation settings. Call this function for every measurement taken.
             Supported Devices: NI 5601
             
             </summary>
            <param name = "channelList">
             channelList
             ViConstString
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "iFFilter">
             IFFilter
             ViInt32
             Specifies the IF filter used.
             NIRFSA_VAL_187_5_MHZ_WIDE (1400)
             Uses the 187.5 MHz wide bandwidth filter.
             NIRFSA_VAL_187_5_MHZ_NARROW (1401)
             Uses the 187.5 MHz narrow bandwidth filter.
             NIRFSA_VAL_53_MHZ (1402)
             Uses the 53 MHz filter.
             NIRFSA_VAL_BYPASS (1403)
             Bypasses the IF filter.
             
            </param>
            <param name = "numberofAttenuators">
             numberOfAttenuators
             ViInt32
             Specifies the number of attenuators to use during the IF attenuation adjustment.
             
            </param>
            <param name = "attenuatorSettings">
             attenuatorSettings
             ViReal64* 
             Specifies the IF attenuator settings for the measurement. The first element in the array corresponds with IF1, the next element corresponds to IF2, and so on.
             
            </param>
            <param name = "measurement">
             measurement
             ViReal64
             Specifies the measurement taken for the current input configuration.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalAdjustIFResponseCalibration(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Double[])">
             <summary>
             Specifies the IF response settings for the driver.
             Supported Devices: NI 5601
             
             </summary>
            <param name = "channelList">
             channelList
             ViConstString
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "iFFilter">
             IFFilter
             ViInt32
             Specifies the IF filter used.
             NIRFSA_VAL_187_5_MHZ_WIDE (1400)
             Uses the 187.5 MHz wide bandwidth path.
             NIRFSA_VAL_187_5_MHZ_NARROW (1401)
             Uses the 187.5 MHz narrow bandwidth path.
             NIRFSA_VAL_53_MHZ (1402)
             Uses the 53 MHz path.
             NIRFSA_VAL_BYPASS (1403)
             Bypasses the IF path.
             
            </param>
            <param name = "rFFrequency">
             RFFrequency
             ViReal64
             Specifies the RF frequency used during the IF response adjustment.
             
            </param>
            <param name = "bandwidth">
             bandwidth
             ViReal64
             Specifies the bandwidth to use for the IF response adjustment.
             
            </param>
            <param name = "numberofMeasurements">
             numberOfMeasurements
             ViInt32
             Specifies the number of measurements to make.
             
            </param>
            <param name = "measurements">
             measurements
             ViReal64*
             Specifies the relevant measurements taken for each IF filter configuration.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalAdjustRefLevelCalibration(System.String,System.Int32,System.Int32,System.Int32,System.Double,System.Double)">
             <summary>
             Write the reference level settings to the driver. The reference level calibration data is split into either the default configuration data or the mechanical relay disabled configuration data.
             Supported Devices: NI 5601
             
             </summary>
            <param name = "channelList">
             channelList
             ViConstString
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "referenceLevelCalDataType">
             referenceLevelCalDataType
             ViInt32
             Specifies whether the reference level calibration data being used is the default configuration data or the mechanical relay disabled configuration data.
             NIRFSA_VAL_EXT_CAL_DEFAULT (1800)
             The data is the default configuration data.
             NIRFSA_VAL_EXT_CAL_MECHANICAL_ATTENUATOR_DISABLED (1801)
             The data is the configuration data when the mechanical relay is disabled. Use this option to save uncalibrated measurements for more advanced operation.
             
            </param>
            <param name = "rFBand">
             RFBand
             ViInt32
             Specifies the RF band used during the reference level calibration.
             NIRFSA_VAL_RF_BAND_1
             The RF band 1 path is used.
             NIRFSA_VAL_RF_BAND_2
             The RF band 2 path is used.
             NIRFSA_VAL_RF_BAND_3
             The RF band 3 path is used.
             NIRFSA_VAL_RF_BAND_4
             The RF band 4 path is used.
             
            </param>
            <param name = "attenuatorTableNumber">
             attenuatorTableNumber
             ViInt32
             Specifies which attenuation table you are using. Valid values are 0 to 2.
             
            </param>
            <param name = "frequency">
             frequency
             ViReal64
             Specifies the frequency for the reference level adjustment.
             
            </param>
            <param name = "measurement">
             measurement
             ViReal64
             Specifies the relevant measurement taken for the current configuration.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalSetTemperature(System.Double)">
             <summary>
             Writes the calibration temperature to the driver. 
             Supported Devices: NI 5601
             
             </summary>
            <param name = "temperaturedegreesC">
             temperature
             ViReal64
             Specifies the calibration temperature.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ChangeExtCalPassword(System.String,System.String)">
             <summary>
             Changes the password that is required to initialize an external calibration session.
             Supported Devices: NI 5601
             
             </summary>
            <param name = "oldpassword">
             ViConstString
             oldPassword
             Specifies the previous password used to protect the calibration values.
             
            </param>
            <param name = "newpassword">
             ViConstString
             newPassword
             Specifies the new password to use to protect the calibration values.
             The maximum length of the password varies by device. The NI 5601 can have a password that is up to 10 characters long.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CloseCalibrationStep">
             <summary>
             Closes an EEPROM-specific calibration step. This step ensures that all the measurements required for this particular calibration step haven been recorded by the user via the adjust function calls. 
             Supported Devices: NI 5601
             
             </summary>
            <returns>
             Closes an EEPROM-specific calibration step. This step ensures that all the measurements required for this particular calibration step haven been recorded by the user via the adjust function calls. 
             Supported Devices: NI 5601
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CloseExtCal(System.Int32)">
             <summary>
             Closes an NI-RFSA external calibration session and, if specified, stores the new calibration constants and calibration data, such as time, in the onboard EEPROM.
             Supported Devices: NI 5661/5663/5663E
             
             </summary>
            <param name = "action">
             action
             ViInt32
             Specifies how to use the calibration values from this session as the session is closed.
             Defined Values:
                       NIRFSA_VAL_EXT_CAL_ABORT               The old calibration constants are kept, and the new ones are discarded.
             NIRFSA_VAL_EXT_CAL_COMMITThe new calibration constants are stored in the EEPROM.
             
            </param>
            <returns>
             Closes an NI-RFSA external calibration session and, if specified, stores the new calibration constants and calibration data, such as time, in the onboard EEPROM.
             Supported Devices: NI 5661/5663/5663E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CreateConfigurationList(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.niRFSAProperties[],System.Boolean)">
             <summary>
             Creates an empty RF configuration list for RF list mode. An RF configuration list is composed of configuration list steps. Each step specifies the state of the instrument by specifying values for attributes/properties.
             After a configuration list is created, the list is enabled using the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST attribute or by setting setAsActiveList to  VI_TRUE. Call the niRFSA_CreateConfigurationListStep function to add steps to the configuration list.
             Supported Devices: NI 5663E
             
             </summary>
            <param name = "listName">
             listName
             ViConstString
             Specifies the name of the configuration list. This string  may not contain spaces, special characters, or punctuation marks.
             
            </param>
            <param name = "numberOfListAttributes">
             numberOfListAttributes
             ViInt32
             Specifies the number of list attributes to set.
             
            </param>
            <param name = "listAttributeIDs">
             listAttributeIDs
             ViAttr[]
             Specifies the configuration list attributes that will be set.
             You can include the following properties in your configuration list:
             NIRFSA_ATTR_IQ_CARRIER_FREQUENCY
             NIRFSA_ATTR_REFERENCE_LEVEL
             NIRFSA_ATTR_DOWNCONVERTER_CENTER_FREQUENCY
             NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_LEVEL
             NIRFSA_ATTR_TIMER_EVENT_INTERVAL
             NIRFSA_ATTR_FREQUENCY_SETTLING
             
            </param>
            <param name = "setAsActiveList">
             setAsActiveList
             ViBoolean
             Sets the current list as the active configuration list when this parameter is set to TRUE. 
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CreateConfigurationListStep(System.Boolean)">
             <summary>
             Creates a new configuration list step in the configuration list for RF list mode specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST attribute. When you create a configuration list step, a new instance of each attribute specified by the configuration list is created. Configuration list attributes are specified when a configuration list is created.  
             Supported Devices: NI 5663E
             
             </summary>
            <param name = "setAsActiveStep">
             setAsActiveStep
             ViBoolean
             Sets this step as the active step for the active configuration list. If you do not set this parameter, use the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attribute to set the active step.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.DeleteConfigurationList(System.String)">
             <summary>
             Deletes a previously created configuration list and all the configuration list steps in the RF list mode configuration list. When a configuration list step is deleted, all the instances of the properties associated with the configuration list step are also removed.
             Supported Devices: NI 5663E
             
             </summary>
            <param name = "listName">
             listName
             ViConstString
             Specifies the name of the configuration list. This string  may not contain spaces, special characters, or punctuation marks.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalUserDefinedInfo(System.Text.StringBuilder)">
             <summary>
             Returns user-defined information from the onboard EEPROM.
             Supported Devices: NI 5661/5663/5663E
             
             </summary>
            <param name = "userdefinedinfo">
             info
             ViChar[]
             Returns the user-defined information stored in the device onboard EEPROM.
             
            </param>
            <returns>
             Returns user-defined information from the onboard EEPROM.
             Supported Devices: NI 5661/5663/5663E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalUserDefinedInfoMaxSize(System.Int32@)">
             <summary>
             Returns user-defined information from the onboard EEPROM. The size of the cal user defined information is 21 characters.
             Supported Devices: NI 5661/5663/5663E
             
             </summary>
            <param name = "infoSize">
             infoSize
             ViInt32* 
             Returns the number of characters of user-defined information that can be stored in the device onboard EEPROM.
             
            </param>
            <returns>
             Returns user-defined information from the onboard EEPROM. The size of the cal user defined information is 21 characters.
             Supported Devices: NI 5661/5663/5663E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExtCalLastDateAndTime(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
             Returns the date and time of the last successful external calibration. The time returned is 24-hour local time; for example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter.
             Supported Devices: NI 5600/5601 and NI 5661/5663/5663E
             
             </summary>
            <param name = "year">
             year
             ViInt32*
             Returns the year of the last external calibration. It is expressed as an integer.
             
            </param>
            <param name = "month">
             month
             ViInt32*
             Returns the month of the last external calibration. It is expressed as an integer. For example, December is represented as 12.
             
            </param>
            <param name = "day">
             day
             ViInt32*
             Returns the day of the last external calibration. It is expressed as an integer.
             
            </param>
            <param name = "hour">
             hour
             ViInt32*
             Returns the year of the last external calibration. It is expressed as an integer.
             
            </param>
            <param name = "minute">
             minute
             ViInt32*
             Returns the minute of the last external calibration. It is expressed as an integer.
             
            </param>
            <returns>
             Returns the date and time of the last successful external calibration. The time returned is 24-hour local time; for example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter.
             Supported Devices: NI 5600/5601 and NI 5661/5663/5663E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExtCalLastTemp(System.Double@)">
             <summary>
             Returns the temperature recorded at the last successful external calibration. The temperature is returned in degrees Celsius.
             Supported Devices: NI 5661/5663/5663E
             
             </summary>
            <param name = "temperature">
             temperature
             ViReal64*
             Returns the temperature of the last external calibration. It is expressed in degrees Celsius.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExtCalRecommendedInterval(System.Int32@)">
             <summary>
             Returns the recommended interval between external calibrations in months.
             Supported Devices: NI 5600/5601 and NI 5661/5663/5663E
             
             </summary>
            <param name = "months">
             months
             ViInt32*
             Specifies the recommended maximum interval between external calibrations in months.
             
            </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNormalizationCoefficients(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.niRFSA_coefficientInfo@,System.Int32@)">
             <summary>
             Returns coefficients for the specified channel list that you can use to convert binary data to normalized and calibrated data.
             The raw data of an acquisition may not perfectly map to the digitizer vertical range. The difference is due to the digitizer's internal hardware settings being set so that NI-RFSA can handle issues such as range overflow. This function returns niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values that you can use normalize the data. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter.
             To get data that maps to the digitizer vertical range, normalize the raw data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element, then adding the offset value from the same element.
             Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
             After applying the gain and offset, the normalized data is such that:
             The maximum possible positive binary value maps to the maximum positive value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
             The maximum possible negative binary value maps to the maximum negative value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
             The value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. is divided evenly across the possible binary values.
             To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
             Supported Devices: NI 5663/5663E
             
             </summary>
            <param name = "channelList">
             channelList
             ViConstString
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "bufferSize">
             bufferSize
             ViInt32
             Specifies the size of the array you specify for the coefficientInfo parameter.
             
            </param>
            <param name = "coefficientInfo">
             coefficientInfo
             niRFSA_coefficientInfo[]
             Specifies the array for storing the coefficient info.
             offset is the number that should be added to the data from a peer-to-peer stream after the gain has been applied if you want to scale unscaled data.
             gain returns the multiplier that you should use to scale data obtained from a peer-to-peer stream.
             
            </param>
            <param name = "numberofCoefficientSets">
             numberOfCoefficientSets
             ViInt32*
             Returns the number of valid coefficient sets. 
             
            </param>
            <returns>
             Returns coefficients for the specified channel list that you can use to convert binary data to normalized and calibrated data.
             The raw data of an acquisition may not perfectly map to the digitizer vertical range. The difference is due to the digitizer's internal hardware settings being set so that NI-RFSA can handle issues such as range overflow. This function returns niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values that you can use normalize the data. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter.
             To get data that maps to the digitizer vertical range, normalize the raw data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element, then adding the offset value from the same element.
             Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
             After applying the gain and offset, the normalized data is such that:
             The maximum possible positive binary value maps to the maximum positive value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
             The maximum possible negative binary value maps to the maximum negative value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. 
             The value of the NIRFSA_ATTR_DIGITIZER_VERTICAL_RANGE attribute. is divided evenly across the possible binary values.
             To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
             Supported Devices: NI 5663/5663E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetScalingCoefficients(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.niRFSA_coefficientInfo@,System.Int32@)">
             <summary>
             Returns coefficients for the specified channel list that you can use to convert unscaled data to scaled I/Q data.
             Data from an acquisition may be unscaled if sent by a peer-to-peer stream or fetched as unscaled data. You can use this function to obtain niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values you can use scale this data into the actual I/Q values. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter. To get the actual I/Q values, scale the unscaled data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element then adding the offset from the same element.
             Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
             To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
             Supported Devices: NI 5663/5663E
             
             </summary>
            <param name = "channelList">
             channelList
             ViConstString
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "arraySize">
             arraySize
             ViInt32
             Specifies the size of the array you specify for the coefficientInfo parameter.
             
            </param>
            <param name = "coefficientInfo">
             coefficientInfo
             niRFSA_coefficientInfo[]
             Specifies the array for storing the coefficient info.
             offset is the number that should be added to the data from a peer-to-peer stream after the gain has been applied if you want to scale unscaled data.
             gain returns the multiplier that you should use to scale data obtained from a peer-to-peer stream.
             
            </param>
            <param name = "numberOfCoefficientSets">
             numberOfCoefficientSets
             ViInt32*
             Returns the number of valid coefficient sets. 
             
            </param>
            <returns>
             Returns coefficients for the specified channel list that you can use to convert unscaled data to scaled I/Q data.
             Data from an acquisition may be unscaled if sent by a peer-to-peer stream or fetched as unscaled data. You can use this function to obtain niRFSA_coefficientInfo structures in the coefficientInfo array that provide gain and offset values you can use scale this data into the actual I/Q values. The coefficientInfo array returns one element for each channel specified in the channelList parameter. The element order matches the order specified by the channelList parameter. To get the actual I/Q values, scale the unscaled data from an acquisition by multiplying it by the gain value of the appropriate coefficientInfo element then adding the offset from the same element.
             Note  The coefficients are calculated by NI-RFSA for the current configuration of the device, so they are only valid for acquisitions obtained with the same device configuration.
             To get the required size of the array, call this function with bufferSize set to 0 and NULL for the coefficientInfo array. This function returns the required size in the numberOfCoefficientSets parameter.
             Supported Devices: NI 5663/5663E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetStreamEndpointHandle(System.String,System.UInt32@)">
             <summary>
             Returns a writer endpoint handle that can be used with NI-P2P to configure a peer-to-peer stream with the digitizer as an endpoint.
             Supported Devices: NI 5663/5663E
             
             </summary>
            <param name = "streamEndpoint">
             streamEndpoint
             ViConstString
             Specifies the name of the stream resources you want to use.
             
            </param>
            <param name = "writerHandle">
             writerHandle
             ViUInt32*
             Returns the writer endpoint handle which will be used with NI-P2P API to create a stream with the digitizer as an endpoint.
             
            </param>
            <returns>
             Returns a writer endpoint handle that can be used with NI-P2P to configure a peer-to-peer stream with the digitizer as an endpoint.
             Supported Devices: NI 5663/5663E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.InitExtCal(System.String,System.String,System.String,System.Runtime.InteropServices.HandleRef@)">
             <summary>
             Creates and initializes a special NI-RFSA external calibration session. The instrumentHandle returned is an NI-RFSA session that can be used to configure the device using normal attributes and functions. However, flags have been set that allow you to program an external calibration procedure using the special calibration attributes and functions.
             Supported Devices: NI 5601
             
             </summary>
            <param name = "resourceName">
            <table><tr><td>
             resourceName
             ViRsrc
             Specifies the resource name of the device to initialize.
             Example #
             Device Type
             Syntax
             1
             myDAQmxDevice
             NI-DAQmx device, device name =
                            &#34;myDAQmxDevice&#34;
             2
             myLogicalName
             IVI logical name, name =
                               &#34;myLogicalName&#34;
             For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
                         Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
                         can rename an NI-DAQmx device by right-clicking on the name in MAX and entering a new
                         name. You also can pass in the name of an IVI logical name configured with the IVI
                         Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
                         Measurement &#38; Automation Explorer Help.
             Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
             </td>
              </tr></table>
             
            </param>
            <param name = "password">
             password
             ViConstString
             Specifies the password for opening a calibration session. The initial password is factory configured to "NI". password can be a maximum of ten alphanumeric characters.
             
            </param>
            <param name = "optionstring">
             optionString
             ViConstString
             Sets the initial value of certain options for the session.
             The following options are used in this parameter.
             calAction:create&#08211;Use this option when starting a calibration step for the first time.
             calAction:append&#08211;Use this option when appending to existing calibration data.
             
            </param>
            <param name = "instrumentHandle">
             vi
             ViSession
             Identifies your instrument session.
             
            </param>
            <returns>
             Creates and initializes a special NI-RFSA external calibration session. The instrumentHandle returned is an NI-RFSA session that can be used to configure the device using normal attributes and functions. However, flags have been set that allow you to program an external calibration procedure using the special calibration attributes and functions.
             Supported Devices: NI 5601
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.InitializeCalibrationStep(System.Int32)">
             <summary>
             Initializes an EEPROM-specific calibration step.
             Supported Devices: NI 5601
             
             </summary>
            <param name = "calibrationstep">
             calibrationStep
             ViInt32
             Specifies the EEPROM-specific calibration step to initialize.
             Defined Values:
             NIRFSA_VAL_EXT_CAL_IF_ATTENUATION_CALIBRATION
             Initializes the IF attenuation calibration step.
             NIRFSA_VAL_EXT_CAL_IF_RESPONSE_CALIBRATION
             Initializes the IF response calibration step.
             NIRFSA_VAL_EXT_CAL_REF_LEVEL_CALIBRATION
             Initializes the reference level calibration step.
             
            </param>
            <returns>
             Initializes an EEPROM-specific calibration step.
             Supported Devices: NI 5601
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ResetDevice">
             <summary>
             Performs a hard reset on the device which consists of the following actions:
             Signal acquisition is stopped
             All routes are released
             External bidirectional terminals are tristated
             FPGAs are reset
             Hardware is configured to its default state
             All session attributes are reset to their default states
             During a device reset, routes of signals between this and other devices are released, regardless of which device created the route.
             On the NI 5600, if you are using PXI_CLK10, you continue to drive the clock even after a device reset.
             Supported Devices: NI 5600/5601 (external digitizer mode), NI 5661/5663/5663E
             
             </summary>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalUserDefinedInfo(System.String)">
             <summary>
             niRFSA_SetCalUserDefinedInfo
             ViStatus _VI_FUNC niRFSA_SetCalUserDefinedInfo(ViSession vi, 
                ViConstString info);
             Purpose
             Stores user-defined information in the onboard EEPROM.
             Supported Devices: NI 5601
             
             </summary>
            <param name = "userdefinedinfo">
             info
             ViConstString
             Specifies the string to store in the device onboard EEPROM. This string can be up to 21 characters long.
             
            </param>
            <returns>
             niRFSA_SetCalUserDefinedInfo
             ViStatus _VI_FUNC niRFSA_SetCalUserDefinedInfo(ViSession vi, 
                ViConstString info);
             Purpose
             Stores user-defined information in the onboard EEPROM.
             Supported Devices: NI 5601
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.IsSelfCalValid(System.Boolean@,System.Int64@)">
             <summary>
             Indicates which calibration steps contain valid calibration data. To omit the unnecessary self-calibration of steps with valid calibration data, you can pass the validSteps parameter to the stepsToOmit parameter of the niRFSA_SelfCalibrate function.
             Supported Devices: NI&#160;5661/5663/5663E/5665
             
             </summary>
            <param name = "selfCalValid">
             Returns VI_TRUE if all the calibration data is valid and VI_FALSE if any of the calibration data is invalid.
             
            </param>
            <param name = "validSteps">
             Returns valid steps.
             Note&#160;&#160;If two or more calibration steps are valid, this parameter returns a bitwise-OR combination of the calibration steps. For example, if both NIRFSA_VAL_SELF_CAL_IF_FLATNESS and NIRFSA_VAL_SELF_CAL_LO_SELF_CAL steps are valid, NI-RFSA returns the following string: NIRFSA_VAL_SELF_CAL_IF_FLATNESS | NIRFSA_VAL_SELF_CAL_LO_SELF_CAL    
             NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
             Indicates the Gain Reference calibration data is valid. This step measures the changes in gain since the last external calibration was run.
              NIRFSA_VAL_SELF_CAL_IF_FLATNESS
             Indicates the IF Flatness calibration data is valid. This step measures the IF response of the entire system for each of the supported IF filters.
              NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
             Indicates the Digitizer Self Cal calibration data is valid. This step calls for digitizer self-calibration if the digitizer is associated with the RF downconverter.
               NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
             Indicates the LO Self Cal calibration data is valid. This step calls for LO self-calibration if the LO source module is associated with the RF downconverter.
              NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
             Indicates the Preselector Alignment calibration data is valid. This step generates coefficients to align the preselector across the frequency range of 3.6 GHz to 14 GHz.
             
            </param>
            <returns>
             
            niRFSA_IsSelfCalValid
             ViStatus niRFSA_IsSelfCalValid(ViSession vi, ViBoolean* selfCalValid, ViInt64* validSteps);
             Purpose
             Indicates which calibration steps contain valid calibration data. To omit the unnecessary self-calibration of steps with valid calibration data, you can pass the validSteps parameter to the stepsToOmit parameter of the niRFSA_SelfCalibrate function.
             Supported Devices: NI&#160;5661/5663/5663E/5665
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.InitializeExternalAlignmentStep(System.Int32)">
             <summary>
             Initializes an EEPROM-specific external alignment step.
             Supported Devices: NI&#160;5605
             
             </summary>
            <param name = "externalAlignmentStep">
             Specifies which external alignment step you want to initialize. 
             NIRFSA_VAL_PRESELECTOR_ALIGNMENT
             Initiates preselector alignment. This step generates coefficients to align the preselector across the frequency range of 3.6 GHz to 14 GHz.
             
            </param>
            <returns>
             
            niRFSA_InitializeExternalAlignmentStep
             ViStatus niRFSA_InitializeExternalAlignmentStep(ViSession vi,
                ViInt32 externalAlignmentStep);
             Purpose
             Initializes an EEPROM-specific external alignment step.
             Supported Devices: NI&#160;5605
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.InitializeExternalAlignment(System.String,System.String,System.Runtime.InteropServices.HandleRef@)">
             <summary>
             Creates and initializes a special NI-RFSA external alignment session.
              The ViSession returned is an NI-RFSA session that you can use to configure the device using normal attributes and functions. However, NI-RFSA sets flags that allow you to program an external alignment procedure using the external alignment attributes and functions.
             Supported Devices: NI&#160;5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "resourceName">
             Specifies the resource name of the device to initialize.
             Example #
             Device Type
             Syntax
             1
             myDAQmxDevice
             NI-DAQmx device, device name =
                            &#34;myDAQmxDevice&#34;
             2
             myLogicalName
             IVI logical name, name =
                               &#34;myLogicalName&#34;
             For NI-DAQmx devices, the syntax is the device name specified in MAX, as shown in
                         Example 1. Typical default names for NI-DAQmx devices in MAX are Dev1 or PXI1Slot2. You
                         can rename an NI-DAQmx device by right-clicking the name in MAX, selecting Rename from the drop-down menu, and entering a new name. You can also pass in the name of an IVI logical name configured with the IVI
                         Configuration utility. For additional information, refer to the Installed Devices&#187;IVI topic of the
                         Measurement &#38; Automation Explorer Help.
             Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, IVI logical names are case-sensitive. If you use an IVI logical name, verify the name is identical to the name shown in the IVI Configuration Utility.
             
            </param>
            <param name = "optionstring">
             Sets the initial value of certain attributes for the session. The attributes shown in the following table are used in this parameter.
             Name
             Attribute
             RangeCheck
             NIRFSA_ATTR_RANGE_CHECK
             QueryInstrStatus
             NIRFSA_ATTR_QUERY_INSTRUMENT_STATUS
             Cache
             NIRFSA_ATTR_CACHE
             RecordCoercions
             NIRFSA_ATTR_RECORD_COERCIONS
             DriverSetup
             NIRFSA_ATTR_DRIVER_SETUP
             Simulate
             NIRFSA_ATTR_SIMULATE
             The format of this string is &#34;AttributeName=Value&#34;, where AttributeName is the name of the attribute and Value is the value to which the attribute will be set. To set multiple attributes, separate their assignments with a comma.
             
            </param>
            <param name="instrumentHandle"></param>
            <returns>
             
            niRFSA_InitializeExternalAlignment
             ViStatus niRFSA_InitializeExternalAlignment(ViRsrc resourceName, 
                ViConstString optionString,
                ViSession* vi);
             Purpose
             Creates and initializes a special NI-RFSA external alignment session.
              The ViSession returned is an NI-RFSA session that you can use to configure the device using normal attributes and functions. However, NI-RFSA sets flags that allow you to program an external alignment procedure using the external alignment attributes and functions.
             Supported Devices: NI&#160;5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSelfCalLastTemp(System.Int64,System.Double@)">
             <summary>
             Returns the temperature, in degrees Celsius, at the last successful self-calibration.
             Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "selfCalibrationStep">
             Specifies the self-calibration step to query for the last successful self-calibration temperature data.
             NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
             Selects the Preselector Alignment self-calibration step.
             NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
             Selects the Gain Reference self-calibration step.
              NIRFSA_VAL_SELF_CAL_IF_FLATNESS
             Selects the IF Flatness self-calibration step.
              NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
             Selects the Digitizer Self Cal self-calibration step.
               NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
             Selects the LO Self Cal self-calibration step.
             
            </param>
            <param name = "temperature">
             The temperature, in degrees Celsius, of the last self-calibration.
             
            </param>
            <returns>
             
            niRFSA_GetSelfCalLastTemp
             ViStatus niRFSA_GetSelfCalLastTemp(ViSession vi,
                ViInt64 selfCalibrationStep,
                ViReal64* temp);
             Purpose
             Returns the temperature, in degrees Celsius, at the last successful self-calibration.
             Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSelfCalLastDateAndTime(System.Int64,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
             <summary>
             Returns the date and time of the last successful self-calibration.
             The time returned is 24-hour local time and the date is returned as integer values. For example, if the device was calibrated at 2:30 PM on December 31, 2010, this function returns 14 for the hour parameter, 30 for the minute parameter, 12 for the month parameter, 31 for the day parameter, and 2010 for the year parameter.
             Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "selfCalibrationStep">
             Specifies the self-calibration step to query for the last successful self-calibration date and time data.
             NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
             Selects the Gain Reference self-calibration step.
              NIRFSA_VAL_SELF_CAL_IF_FLATNESS
             Selects the IF Flatness self-calibration step.
              NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
             Selects the Digitizer Self Cal self-calibration step.
               NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
             Selects the LO Self Cal self-calibration step.
             NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
             Selects the Preselector Alignment self-calibration step.
             
            </param>
            <param name = "year">
             Returns the year of the last external calibration. 
             
            </param>
            <param name = "month">
             Returns the month of the last external calibration. 
             
            </param>
            <param name = "day">
             Returns the day of the last external calibration. 
             
            </param>
            <param name = "hour">
             Returns the year of the last external calibration. It is expressed as an integer.
             
            </param>
            <param name = "minute">
             Returns the minute of the last external calibration. 
             
            </param>
            <returns>
             
            niRFSA_GetSelfCalLastDateAndTime
             ViStatus  niRFSA_GetSelfCalLastDateAndTime(ViSession vi, ViInt64 selfCalibrationStep,
                ViInt32* year, 
                ViInt32* month, 
                ViInt32* day, 
                ViInt32* hour, 
                ViInt32* minute);
             Purpose
             Returns the date and time of the last successful self-calibration.
             The time returned is 24-hour local time and the date is returned as integer values. For example, if the device was calibrated at 2:30 PM on December 31, 2010, this function returns 14 for the hour parameter, 30 for the minute parameter, 12 for the month parameter, 31 for the day parameter, and 2010 for the year parameter.
             Supported Devices:  NI 5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRelayOperationsCount(System.String,System.Int32[],System.Int32@)">
             <summary>
             Returns an array consisting of all the relay counts for your device. When you call this function and pass a VI_NULL pointer to the operationsCount parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the number of relays, the operationsCount parameter returns the appropriate value.
             Supported Devices: NI&#160;5603/5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelList">
             Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
             
            </param>
            <param name = "operationsCountArray">
             Specifies the operations count array, when used as an input. You can select VI_NULL or a pointer to a ViInt32 array. VI_NULL is the default. 
               When bufferSize is greater than or equal to the number of relays, operationsCount returns the number of relay operations.
             
            </param>
            <param name = "bufferSize">
             Functions as an input or an output. bufferSize receives or returns the number of relays that are on the device.
             
            </param>
            <returns>
             
            niRFSA_GetRelayOperationsCount
             ViStatus niRFSA_GetRelayOperationsCount(ViSession vi,
                ViConstString channelList,
                ViInt32 operationsCount[],
                ViInt32* bufferSize);
             Purpose
             Returns an array consisting of all the relay counts for your device. When you call this function and pass a VI_NULL pointer to the operationsCount parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the number of relays, the operationsCount parameter returns the appropriate value.
             Supported Devices: NI&#160;5603/5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRelayName(System.String,System.Int32,System.Text.StringBuilder,System.Int32@)">
             <summary>
             Returns the name of a relay for your device. When you call this function and pass a VI_NULL pointer to the name parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the name of relay, the name parameter returns the appropriate value.
             Supported Devices: NI&#160;5603/5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelList">
             Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
             
            </param>
            <param name = "indexofRelay">
             Specifies the index of the relay. 
             
            </param>
            <param name = "name">
             Specifies the relay name, when used as an input. You can select VI_NULL or a pointer to a ViInt32 array. VI_NULL is the default.  When bufferSize is greater than or equal to the number of relays, name returns the relay name.
             
            </param>
            <param name = "bufferSize">
             When a VI_NULL pointer is passed in for the name, bufferSize is populated with the number of relays on the device. When bufferSize equals the size of the name, the relay is identified in the name parameter.
             
            </param>
            <returns>
             
            niRFSA_GetRelayName
             ViStatus niRFSA_GetRelayName(ViSession vi,
                ViConstString channelList,
                ViInt32 index,
                ViChar name[],
                ViInt32* bufferSize);
             Purpose
             Returns the name of a relay for your device. When you call this function and pass a VI_NULL pointer to the name parameter, bufferSize is populated with the number of relays on the device. When you call this function and specify a value for bufferSize that is greater than or equal to the name of relay, the name parameter returns the appropriate value.
             Supported Devices: NI&#160;5603/5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetGainReferenceCalBaseline(System.Int32,System.Double[],System.Int32@)">
             <summary>
             Returns the gain reference calibration constants. 
             Supported Devices: NI&#160;5603/5605 (external digitizer mode), NI 5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "bufferSize">
             Specifies the buffer size.
             
            </param>
            <param name = "gainReferenceCalConstants">
             Returns the gain reference calibration constants. 
             
            </param>
            <param name = "numberofRefCalConstants">
             Specifies the number of elements in the gainReferenceCalConstants array.
             
            </param>
            <returns>
             
            niRFSA_GetGainReferenceCalBaseline
             ViStatus niRFSA_GetGainReferenceCalBaseline(ViSession vi, ViInt32 bufferSize, ViReal64 gainReferenceCalConstants[], ViInt32* numberOfRefCalConstants);
             Purpose
             Returns the gain reference calibration constants. 
             Supported Devices: NI&#160;5603/5605 (external digitizer mode), NI 5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDeviceResponse(System.String,System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Int32@)">
             <summary>
             Returns the requested response type, based on current NI-RFSA settings. The NI&#160;5661/5663/5663E/5665 automatically corrects for the IF and RF response when you set the NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED attribute to VI_TRUE. If you are using external digitizer mode, you can use information returned from this function to correct your measurement.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelList">
             Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
             
            </param>
            <param name = "responseType">
             Specifies the IF, RF, or combined (IF and RF) response of the downconverter or RF vector signal analyzer (VSA) that NI-RFSA returns. The default value is NIRFSA_VAL_DOWNCONVERTER_IF_RESPONSE.
              NIRFSA_VAL_DOWNCONVERTER_IF_RESPONSE
             Returns the IF response of the downconverter.
             NIRFSA_VAL_DOWNCONVERTER_RF_RESPONSE
             Returns the RF response of the downconverter. This value is supported only for the NI&#160;5603/5605/5665.
             NIRFSA_VAL_DOWNCONVERTER_COMBINED_RESPONSE
             Returns the combined RF and IF response of the downconverter. The combined response is in terms of IF frequency. This value is supported only for the NI&#160;5603/5605/5665.
             NIRFSA_VAL_VSA_IF_RESPONSE
             Returns the IF response of the entire RF vector signal analyzer. This value is supported only for the NI&#160;5665.
             NIRFSA_VAL_VSA_COMBINED_RESPONSE
             Returns the combined IF and RF response of the entire RF vector signal analyzer. The combined response is in terms of IF frequency. This value is supported only for the NI&#160;5665.
             
            </param>
            <param name = "bufferSize">
             Specifies the size of the array you specify for the frequencies, magnitudeResponse, and phaseResponse parameters.
             
            </param>
            <param name = "frequencies">
             Returns an array containing the frequencies, in hertz (Hz), that correspond to the response data.
             Pass VI_NULL if you do not want to use this parameter.
             
            </param>
            <param name = "magnitudeResponse">
             Returns an array containing the magnitude of the requested response, in decibels (dB). The magnitude response is normalized to the center frequency at each frequency in the frequencies array.
             Pass VI_NULL if you do not want to use this parameter.
             
            </param>
            <param name = "phaseResponse">
             Returns an array containing the phase of the requested response, in radians. The phase response is normalized to the center frequency at each frequency entry in the frequencies array.
             Pass VI_NULL if you do not want to use this parameter.
             
            </param>
            <param name = "numberofFrequencies">
             Returns the required number of elements in the frequencies array and the response arrays. If bufferSize is 0, this parameter returns the expected array size. The expected array size depends on which NI-RFSA device you use (NI&#160;5661/5663/5663E/5665) and on the current settings (NI&#160;5663/5663E/5665 only).
             
            </param>
            <returns>
             
            niRFSA_GetDeviceResponse
             ViStatus niRFSA_GetDeviceResponse(ViSession vi,
                ViConstString channelList,
                ViInt32 bufferSize,
                ViInt32 responseType,
                ViReal64 frequencies[],
                ViReal64 magnitudeResponse[],
                ViReal64 phaseResponse[],
                ViInt32* numberOfFrequencies);
             Purpose
             Returns the requested response type, based on current NI-RFSA settings. The NI&#160;5661/5663/5663E/5665 automatically corrects for the IF and RF response when you set the NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED attribute to VI_TRUE. If you are using external digitizer mode, you can use information returned from this function to correct your measurement.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.EnableSessionAccess(System.String,System.Boolean)">
             <summary>
             
             Enables or disables SFP session access for the specified instrument.
             SFP session access allows the NI-RFSA Soft Front Panel (SFP) to access a device with an existing open session and can help you debug your code. To enable session access, pass VI_TRUE to the enabled parameter. To disable session access, pass VI_FALSE to the enabled parameter.
             Refer to Configuring SFP Session Access in LabWindows/CVI or C for more information about SFP session access.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
             
             </summary>
             <param name="channelList"></param>
            <param name = "enable">
             Enables or disables SFP session access for the specified device.
             VI_TRUEEnables session access.
             VI_FALSEDisables session access.
             
            </param>
            <returns>
             
            niRFSA_EnableSessionAccess
             ViStatus niRFSA_EnableSessionAccess(ViSession vi,
                ViBoolean enable);
             Purpose
             Enables or disables SFP session access for the specified instrument.
             SFP session access allows the NI-RFSA Soft Front Panel (SFP) to access a device with an existing open session and can help you debug your code. To enable session access, pass VI_TRUE to the enabled parameter. To disable session access, pass VI_FALSE to the enabled parameter.
             Refer to Configuring SFP Session Access in LabWindows/CVI or C for more information about SFP session access.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5644R/5645R/5646R, NI&#160;5661/5663/5663E/5665/5667, NI&#160;5693/5694
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ExternalAlignmentAdjustPreselector(System.Int32,System.Double[])">
             <summary>
             Stores the preselector alignment coefficients that NI-RFSA uses to compute the preselector-tuning DAC value whenever the preselector is enabled. These coefficients are based on the desired center frequency for the preselector. 
             Supported Devices: NI 5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "numberOfCoefficients">
             Specifies the length for the coefficients array.
             
            </param>
            <param name = "coefficients">
             Specifies the coefficients in the polynomial used to map the preselector center frequency to a preselector-tuning DAC value. Enter the coefficients in the array in order of highest order coefficient first (index 0) down to lowest order coefficient last. 
             
            </param>
            <returns>
             
            niRFSA_ExternalAlignmentAdjustPreselector
             ViStatus  niRFSA_ExternalAlignmentAdjustPreselector(ViSession vi,
                ViInt32 numberOfCoefficients,
                ViReal64* coefficients);
             Purpose
             Stores the preselector alignment coefficients that NI-RFSA uses to compute the preselector-tuning DAC value whenever the preselector is enabled. These coefficients are based on the desired center frequency for the preselector. 
             Supported Devices: NI 5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ExtCalStoreBaselineForSelfCalibration(System.String,System.Int64)">
             <summary>
             Specifies the external calibration step to run and stores the associated constants in the device memory so that they can be compared with the computed constants at run time. A password is required to run the function.
             Supported Devices: NI&#160;5603/5605/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "password">
             Specifies the password for the calibration session. The initial password is factory configured to NI. password can be a maximum of ten alphanumeric characters.
             
            </param>
            <param name = "stepToRun">
             Specifies the step for which constants are computed. 
             NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
             Calls for preselector alignment.
             NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
             Measures the changes in gain since the last external calibration was run.
              NIRFSA_VAL_SELF_CAL_IF_FLATNESS
             Measures the IF response of the entire system for each of the supported IF filters.
              NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
             Calls for digitizer self-calibration, if the digitizer is associated with the RF downconverter.
               NIRFSA_VAL_SELF_CAL_LO_SELF_CALL
             Calls for LO self-calibration, if the LO source module is associated with the RF downconverter.
             
            </param>
            <returns>
             
            niRFSA_ExtCalStoreBaselineForSelfCalibration
             ViStatus niRFSA_ExtCalStoreBaselineForSelfCalibration(ViSession vi, ViConstString password, ViReal64 stepToRun);
             Purpose
             Specifies the external calibration step to run and stores the associated constants in the device memory so that they can be compared with the computed constants at run time. A password is required to run the function.
             Supported Devices: NI&#160;5603/5605/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CloseExternalAlignmentStep">
             <summary>
             Closes an EEPROM-specific external alignment step.
             Supported Devices: NI&#160;5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <returns>
             
            niRFSA_CloseExternalAlignmentStep
             ViStatus  niRFSA_CloseExternalAlignmentStep(ViSession vi);
             Purpose
             Closes an EEPROM-specific external alignment step.
             Supported Devices: NI&#160;5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalAdjustDownconverterGain(System.String,System.Double,System.Double)">
             <summary>
             Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
             This function internally queries the attributes you set, and you must set and commit the following attributes prior to calling this function.
             NIRFSA_ATTR_CAL_RF_ELECTRONIC_ATTENUATION_INDEX (This attribute is required only when the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute is set to NIRFSA_VAL_EXT_CAL_RF_BAND_1.)
             NIRFSA_ATTR_CAL_RF_MECHANICAL_ATTENUATION_INDEX
             NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION
             NIRFSA_ATTR_CAL_IF_ATTENUATION_INDEX
             NIRFSA_ATTR_CAL_IF_FILTER_SELECTION
             NIRFSA_ATTR_CHANNEL_COUPLING
             NIRFSA_ATTR_RF_PREAMP_ENABLED
             Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
             Supported Devices: NI&#160;5603/5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelList">
             Identifies which channels to apply settings. Specify an empty string as the value of this parameter.
             
            </param>
            <param name = "frequency">
             Specifies the RF frequency, in Hz, of the measurement taken.
             
            </param>
            <param name = "gain">
             Specifies the gain measurement, in dB.
             
            </param>
            <returns>
             
            niRFSA_CalAdjustDownconverterGain
             ViStatus  niRFSA_CalAdjustDownconverterGain(ViSession vi,
                ViConstString channelList,
                ViReal64 frequency,
                ViReal64 gain);
             Purpose
             Records measured gain information that is gathered during the Reference Level Calibration step and IF Attenuation Calibration step.
             This function internally queries the attributes you set, and you must set and commit the following attributes prior to calling this function.
             NIRFSA_ATTR_CAL_RF_ELECTRONIC_ATTENUATION_INDEX (This attribute is required only when the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute is set to NIRFSA_VAL_EXT_CAL_RF_BAND_1.)
             NIRFSA_ATTR_CAL_RF_MECHANICAL_ATTENUATION_INDEX
             NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION
             NIRFSA_ATTR_CAL_IF_ATTENUATION_INDEX
             NIRFSA_ATTR_CAL_IF_FILTER_SELECTION
             NIRFSA_ATTR_CHANNEL_COUPLING
             NIRFSA_ATTR_RF_PREAMP_ENABLED
             Call this function immediately after a measurement is made and while the device under test (DUT) is still in the same state as it was during the measurement.
             Supported Devices: NI&#160;5603/5605
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SelfCalibrate(System.Int64)">
             <summary>
             Self-calibrates the modules associated with the NI RF vector signal analyzer that support self-calibration. If self-calibration is performed successfully, the new calibration constants are stored immediately in the self-calibration area of the module EEPROM. Refer to the specifications document for your device for more information about how often to self-calibrate. 
             For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if the niRFSA_IsSelfCalValid function indicates that the calibration data for a specific step is still valid, you can omit that step for faster execution. 
             Note&#160;&#160;The IF Flatness step can take approximately 15 minutes to complete on the NI&#160;5603 and approximately 25 minutes to complete on the NI&#160;5605.
             Supported Devices: NI&#160;5661/5663/5663E/5665
             
             </summary>
            <param name = "stepsToOmit">
             Specifies which calibration steps to skip as part of the self-calibration process. A value of 0 specifies that no calibration steps are omitted.
             Note&#160;&#160;To omit two or more calibration steps, specify a bitwise-OR combination of the following constants. For example, if you wanted to omit NIRFSA_VAL_SELF_CAL_IF_FLATNESS and NIRFSA_VAL_SELF_CAL_LO_SELF_CAL, you would pass the following string to the niRFSA_SelfCalibrate function: NIRFSA_VAL_SELF_CAL_IF_FLATNESS | NIRFSA_VAL_SELF_CAL_LO_SELF_CAL   
             NIRFSA_VAL_SELF_CAL_GAIN_REFERENCE
             Omits the Gain Reference step. If you omit this step and the  niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the absolute accuracy of the device is not guaranteed.
              NIRFSA_VAL_SELF_CAL_IF_FLATNESS
             Omits the IF Flatness step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the IF flatness specifications are not guaranteed.
              NIRFSA_VAL_SELF_CAL_DIGITIZER_SELF_CAL
             Omits the Digitizer Self Cal step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the absolute accuracy of the device is not guaranteed.
               NIRFSA_VAL_SELF_CAL_LO_SELF_CAL
             Omits the LO Self Cal step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the LO PLL may fail to lock.
             NIRFSA_VAL_SELF_CAL_PRESELECTOR_ALIGNMENT
             Omits the Preselector Alignment step. If you omit this step and the niRFSA_IsSelfCalValid function indicates the calibration data for this step is invalid, the preselector alignment specifications are not guaranteed. 
             
            </param>
            <returns>
             
            niRFSA_SelfCalibrate
             ViStatus niRFSA_SelfCalibrate(ViSession vi, 
                ViInt64 stepsToOmit);
             Purpose
             Self-calibrates the modules associated with the NI RF vector signal analyzer that support self-calibration. If self-calibration is performed successfully, the new calibration constants are stored immediately in the self-calibration area of the module EEPROM. Refer to the specifications document for your device for more information about how often to self-calibrate. 
             For best results, NI recommends that you perform a complete self-calibration without omitting any steps. However, if the niRFSA_IsSelfCalValid function indicates that the calibration data for a specific step is still valid, you can omit that step for faster execution. 
             Note&#160;&#160;The IF Flatness step can take approximately 15 minutes to complete on the NI&#160;5603 and approximately 25 minutes to complete on the NI&#160;5605.
             Supported Devices: NI&#160;5661/5663/5663E/5665
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetTerminalName(System.Int32,System.String,System.Int32,System.Text.StringBuilder)">
             <summary>
             Returns the fully qualified name of the signal being queried. Signals can be triggers, clocks, or events.
             You can pass the terminalName parameter that is returned to the source parameter of a configure trigger function.
             Supported Devices: NI&#160;5663/5663E/5665
             
             </summary>
            <param name = "signal">
             Specifies the signal for which you want to query the terminal.
             NIRFSA_VAL_START_TRIGGER (1100)NI-RFSA returns the terminal name for the Start trigger.
             NIRFSA_VAL_REF_TRIGGER (702)NI-RFSA returns the terminal name for the Reference trigger.
             NIRFSA_VAL_ADVANCE_TRIGGER (1102)NI-RFSA returns the terminal name for the Advance trigger.
             NIRFSA_VAL_READY_FOR_START_EVENT (1200)NI-RFSA returns the terminal name for the Ready for Start event.
             NIRFSA_VAL_READY_FOR_ADVANCE_EVENT (1202)NI-RFSA returns the terminal name for the Ready for Advance event.
             NIRFSA_VAL_READY_FOR_REF_EVENT (1201)NI-RFSA returns the terminal name for the Ready for Reference event.
             NIRFSA_VAL_END_OF_RECORD_EVENT (1203)NI-RFSA returns the terminal name for the End of Record event.
             NIRFSA_VAL_DONE_EVENT (1204)NI-RFSA returns the terminal name for the Done event.
             NIRFSA_VAL_REF_CLOCK (1205)NI-RFSA does not support this option for the niRFSA_GetTerminalName function. 
             
            </param>
            <param name = "signalIdentifier">
             Specifies a particular instance of a trigger. NI-RFSA does not support this parameter.
             
            </param>
            <param name = "bufferSize">
             Passes the number of bytes in the ViChar buffer that you allocate for the terminalName parameter.
             If you pass a negative number, the function copies the value to the buffer regardless of the number of bytes in the buffer.
             
            </param>
            <param name = "terminalName">
             Returns the fully qualified name of the signal being queried. For example, if you select NIRFSA_VAL_START_TRIGGER 
              as the signal, this parameter returns /DigitizerName/StartTrigger, where DigitizerName is the name of your associated digitizer module in MAX.
             
            </param>
            <returns>
             
            niRFSA_GetTerminalName
             ViStatus niRFSA_GetTerminalName(ViSession vi, 
                ViInt32 signal, 
                ViConstString signalIdentifier, 
                ViInt32 bufferSize,
                ViChar terminalName[]);
             Purpose
             Returns the fully qualified name of the signal being queried. Signals can be triggers, clocks, or events.
             You can pass the terminalName parameter that is returned to the source parameter of a configure trigger function.
             Supported Devices: NI&#160;5663/5663E/5665
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.CalAdjustLOExportCalibration(System.String,System.Int32,System.Int32,System.Double[],System.Double[])">
             <summary>
             LO export calibration measures the NI&#160;5603/5605 LO output power level.
              The LO output power measurements are taken from the NI&#160;5653 module. In MIMO applications, when the LO is exported from one NI&#160;5603/5605 module to another subsequent NI&#160;5603/5605, an output power signal of approximately +7 dBm is expected on each LO connector (LO1, LO2, and LO3). This function records the LO attenuation that results in an output power of +7 dBm (or greater) on the three LO output terminals.
             The NI 5665 uses three LOs, but only LO1 is variable in frequency. This VI takes an array of frequencies and attenuations; however, for LO2 and LO3, this array must have only one element because these two LO sources operate only at one frequency. LO1 can have multiple values for specific frequencies.
             Supported Devices: NI&#160;5603/5605
             
             </summary>
            <param name = "channelList">
             Identifies which channels to apply settings. Specify 0 as the value of this parameter.
             
            </param>
            <param name = "LONumber">
             Specifies the LO source to use for the LO export calibration.
             NIRFSA_VAL_EXT_CAL_LO1 &#160;&#160;&#160; (2200)
             Selects LO1, which is the 3.2&#160;GHz to 8.3&#160;GHz variable signal path.
             NIRFSA_VAL_EXT_CAL_LO2 &#160;&#160;&#160; (2201)
             Selects LO2, which is the 4&#160;GHz signal path.
             NIRFSA_VAL_EXT_CAL_LO3 &#160;&#160;&#160; (2202)
             Selects LO3, which is the 800&#160;MHz signal path.
             
            </param>
            <param name = "numberOfFrequencyPoints">
             Specifies the length of the frequencies and LOAttenuation arrays.
             
            </param>
            <param name = "frequencies">
             Specifies frequencies for the LO output power measurement.  The length of this array equals the numberOfFrequencyPoints parameter.
             
            </param>
            <param name = "LOAttenuations">
             Specifies the attenuation value of the corresponding frequency point that results in a +7 dBm output signal on the respective LO OUT connector. The length of this array equals the numberOfFrequencyPoints parameter.
             
            </param>
            <returns>
             
            niRFSA_CalAdjustLOExportCalibration
             ViStatus  niRFSA_CalAdjustLOExportCalibration(ViSession vi, 
                ViConstString channelList, 
                ViInt32 LONumber, 
                ViInt32 numberOfFrequencyPoints, 
                ViReal64* frequencyPoints, 
                ViReal64* LOAttenuation);
             Purpose
             LO export calibration measures the NI&#160;5603/5605 LO output power level.
              The LO output power measurements are taken from the NI&#160;5653 module. In MIMO applications, when the LO is exported from one NI&#160;5603/5605 module to another subsequent NI&#160;5603/5605, an output power signal of approximately +7 dBm is expected on each LO connector (LO1, LO2, and LO3). This function records the LO attenuation that results in an output power of +7 dBm (or greater) on the three LO output terminals.
             The NI 5665 uses three LOs, but only LO1 is variable in frequency. This VI takes an array of frequencies and attenuations; however, for LO2 and LO3, this array must have only one element because these two LO sources operate only at one frequency. LO1 can have multiple values for specific frequencies.
             Supported Devices: NI&#160;5603/5605
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ClearError">
             <summary>
             Clears the error information associated with the session. 
             Supported Devices: NI&#160;5600/5661/5663/5663E/5665
             
             </summary>
            <returns>
             
            ClearError()
             ViStatus ClearError(ViSession vi);
             Purpose
             Clears the error information associated with the session. 
             Supported Devices: NI&#160;5600/5661/5663/5663E/5665
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.LockSession(System.Boolean@)">
             <summary>
             Obtains a multithread lock on the instrument session. Before doing so, this function waits until all other execution threads have released their locks on the instrument session.
             Other threads might have obtained a lock on this session in the following ways:
               - Your application already called this function.
               - A call to NI-RFSA locked the session.
            
             After the call to this function returns successfully, no other threads can access the instrument session until you call the niRFSA_UnlockSession function. Use the niRFSA_LockSession function and the niRFSA_UnlockSession function around a sequence of calls to NI-RFSA functions if you require that the NI-RFSA device retain its settings through the end of the sequence.
             You can safely make nested calls to the niRFSA_LockSession function within the same thread. To completely unlock the session, balance each call to the niRFSA_LockSession function with a call to the niRFSA_UnlockSession function.  
             If, however, you use callerHasLock in all calls to the niRFSA_LockSession function and the niRFSA_UnlockSession function within a function, the IVI Library locks the session only once within the function regardless of the number of calls you make to the niRFSA_LockSession function. 
             Locking the session only once allows you to call the niRFSA_UnlockSession function just once at the end of the function.
             Supported Devices: NI&#160;5600/5661/5663/5663E/5665
             
            </summary>
            <param name = "callerHasLock">
             Keeps track of whether you obtain a lock and therefore need to unlock the session in complex functions.   
             Pass a reference to a local boolean variable.  In the declaration of the local variable, initialize it to false. Pass the address of the same local variable to any other calls you make to this function or the niRFSA_UnlockSession function in the same function
             The niRFSA_LockSession function and the niRFSA_UnlockSession function each inspect the current value and take the following actions:
             niRFSA_LockSession
               - true:     The niRFSA_LockSession function does not lock the session again.
               - false:    The niRFSA_LockSession function obtains the lock and sets the value of the parameter to true.
             niRFSA_UnlockSession
               - true:     The niRFSA_UnlockSession function releases the lock and sets the value of the parameter to false.
               - false:    The niRFSA_UnlockSession function does not attempt to unlock the session
            
            </param>
            <returns>
             
            niRFSA_LockSession
             ViStatus niRFSA_LockSession(ViSession vi,
                ViBoolean *callerHasLock);
             Purpose
             Obtains a multithread lock on the instrument session. Before doing so, this function waits until all other execution threads have released their locks on the instrument session.
             Other threads might have obtained a lock on this session in the following ways:
               - Your application already called this function.
               - A call to NI-RFSA locked the session.
            
             After the call to this function returns successfully, no other threads can access the instrument session until you call the niRFSA_UnlockSession function. Use the niRFSA_LockSession function and the niRFSA_UnlockSession function around a sequence of calls to NI-RFSA functions if you require that the NI-RFSA device retain its settings through the end of the sequence.
             You can safely make nested calls to the niRFSA_LockSession function within the same thread. To completely unlock the session, balance each call to the niRFSA_LockSession function with a call to the niRFSA_UnlockSession function.  
             If, however, you use callerHasLock in all calls to the niRFSA_LockSession function and the niRFSA_UnlockSession function within a function, the IVI Library locks the session only once within the function regardless of the number of calls you make to the niRFSA_LockSession function. 
             Locking the session only once allows you to call the niRFSA_UnlockSession function just once at the end of the function.
             Supported Devices: NI&#160;5600/5661/5663/5663E/5665
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.UnlockSession(System.Boolean@)">
             <summary>
             Releases a lock obtained on an NI-RFSA device session by calling the niRFSA_LockSession function.
            
             Supported Devices: NI&#160;5600/5661/5663/5663E/5665
             
            </summary>
            <param name = "callerHasLock">
             Reference to a local boolean variable previously initialized by a call to the niRFSA_LockSession function
             The niRFSA_LockSession function and the niRFSA_UnlockSession function each inspect the current value and take the following actions:
             niRFSA_LockSession
               - true:     The niRFSA_LockSession function does not lock the session again.
               - false:    The niRFSA_LockSession function obtains the lock and sets the value of the parameter to true.
             niRFSA_UnlockSession
               - true:     The niRFSA_UnlockSession function releases the lock and sets the value of the parameter to false.
               - false:    The niRFSA_UnlockSession function does not attempt to unlock the session
            
             Thus, you can call the niRFSA_UnlockSession function at the end of your function regardless of whether you actually have the lock.
            
            </param>
            <returns>
             
            niRFSA_UnlockSession
             ViStatus niRFSA_UnlockSession(ViSession vi,
                ViBoolean *callerHasLock);
             Purpose
             Releases a lock obtained on an NI-RFSA device session by calling the niRFSA_LockSession function.
            
             Supported Devices: NI&#160;5600/5661/5663/5663E/5665
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ResetWithOptions(System.UInt64)">
             <summary>
             Resets all properties to default values and specifies steps to omit during the reset process, such as signal routes.
             For the NI 5600, this function does not reset the PXI Clock signal that is driven by devices installed in the Star Trigger Controller Slot, also known as the System Timing Slot.
             By default, this function resets all properties to their default values, aborts generation, clears all routes, and resets session properties to initial values.
             You can specify steps to omit using the steps to omit parameter. 
             For example, if you specify NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES for the steps to omit parameter, this function does not release signal routes during the reset process.
             When routes of signals between two devices are released, they are released regardless of which device created the route.
             
             Supported Devices:  NI 5600/5601/5603/5605/5606 (external digitizer mode), NI 5644R/5645R/5646R, NI 5661/5663/5663E/5665/5667/5668R, NI 5693/5694
             
             </summary>
             <param name="stepsToOmit">
             Specifies a list of steps to skip during the reset process.
             
             The default value is NIRFSA_VAL_RESET_WITH_OPTIONS_NONE, which specifies that no step is omitted during reset.
             
             NIRFSA_VAL_RESET_WITH_OPTIONS_NONE (0) : No step is omitted during reset. 
             NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES (1) :  Omits the routing reset step. Routing is preserved after a reset. However, routing related properties are reset to default, and routing is released if the default properties are committed after a reset. 
             
              Note  NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES is not supported in external calibration or alignment sessions. 
              Note  NIRFSA_VAL_RESET_WITH_OPTIONS_ROUTES is not supported for the NI 5600/5661. 
              
             </param>
            <returns>	
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSA function to determine if an error has occurred.	
             To obtain a text description of the status code and additional information about the error condition, call the GetError() function. To clear the error information from NI-RFSA, call the ClearError() function.	
             The general meaning of the status code is as follows:	
             Value           Meaning	
             0               Success	
             Positive Values Warnings	
             Negative Values Errors	
            	
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.Dispose">
            <summary>
            Closes the rfsa session and releases resources associated with that session. 
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.VstSelfCalibrate(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ClearSelfCalibrationRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSAProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSAProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSAProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetString(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetString(NationalInstruments.ModularInstruments.Interop.niRFSAProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetInt32(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetInt32(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int32)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int32@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDouble(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDouble(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Double)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Double@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Boolean)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetString(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetString(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetString(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetString(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetInt64(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetInt64(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int64)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInt64(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.Int64@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInt64(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int64@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInt64(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int64@)">
            <summary>
            
            </summary>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSession(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSession(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSession(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String,System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSession(NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAttributeBoolean(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Boolean)">
             <summary>
             Sets the value of a ViBoolean attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Pass the value to which you want to set the attribute.
             Note&#160;&#160;Some of the values might not be valid depending on the
             current state of the instrument session.
             
            </param>
            <returns>
             
            niRFSA_SetAttributeViBoolean
             ViStatus niRFSA_SetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean value);
             Purpose
             Sets the value of a ViBoolean attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAttributeInt32(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int32)">
             <summary>
             Sets the value of a ViInt32 attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel-based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Pass the value to which you want to set the attribute.
             Note&#160;&#160;Some of the values might not be valid depending on the
             current state of the instrument session.
             
            </param>
            <returns>
             
            niRFSA_SetAttributeViInt32
             ViStatus niRFSA_SetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 value);
             Purpose
             Sets the value of a ViInt32 attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAttributeInt64(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int64)">
             <summary>
             Sets the value of a ViInt64 attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes. 
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Pass the value to which you want to set the attribute.
             Note&#160;&#160;Some of the values might not be valid depending on the
             current state of the instrument session.
             
            </param>
            <returns>
             
            niRFSA_SetAttributeViInt64
             ViStatus niRFSA_SetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 value);
             Purpose
             Sets the value of a ViInt64 attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes. 
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAttributeReal64(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Double)">
             <summary>
             Sets the value of a ViReal64 attribute.
             Use this low-level function to set the values of inherent IVI attributes, and instrument-specific attributes. 
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread-locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Pass the value to which you want to set the attribute.
             Note&#160;&#160;Some of the values might not be valid depending on the
             current state of the instrument session.
             
            </param>
            <returns>
             
            niRFSA_SetAttributeViReal64
             ViStatus niRFSA_SetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 value);
             Purpose
             Sets the value of a ViReal64 attribute.
             Use this low-level function to set the values of inherent IVI attributes, and instrument-specific attributes. 
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread-locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAttributeSession(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.IntPtr)">
             <summary>
             Sets the value of a ViSession attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Pass the value to which you want to set the attribute.
             Note&#160;&#160;Some of the values might not be valid depending on the
             current state of the instrument session.
             
            </param>
            <returns>
             
            niRFSA_SetAttributeViSession
             ViStatus niRFSA_SetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession value);
             Purpose
             Sets the value of a ViSession attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAttributeString(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String)">
             <summary>
             Sets the value of a ViString attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Pass the value to which you want to set the attribute.
             Note&#160;&#160;Some of the values might not be valid depending on the
             current state of the instrument session.
             
            </param>
            <returns>
             
            niRFSA_SetAttributeViString
             ViStatus niRFSA_SetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViConstString value);
             Purpose
             Sets the value of a ViString attribute.
             Use this low-level function to set the values of inherent IVI attributes and instrument-specific attributes.
             NI-RFSA contains high-level functions that set most of the instrument attributes. NI&#160;recommends you use the high-level functions as much as possible. High-level functions handle order dependencies and multithread locking for you.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAttributeBoolean(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Boolean@)">
             <summary>
             Queries the value of a ViBoolean attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes.  
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Returns the current value of the attribute. Pass the address of a ViBoolean variable.
             
            </param>
            <returns>
             
            niRFSA_GetAttributeViBoolean
             ViStatus niRFSA_GetAttributeViBoolean(ViSession vi, ViConstString channelName, ViAttr attributeId, ViBoolean *value);
             Purpose
             Queries the value of a ViBoolean attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes.  
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAttributeInt32(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int32@)">
             <summary>
             Queries the value of a ViInt32 attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Returns the current value of the attribute. Pass the address of a ViInt32 variable.
             
            </param>
            <returns>
             
            niRFSA_GetAttributeViInt32
             ViStatus niRFSA_GetAttributeViInt32(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt32 *value);
             Purpose
             Queries the value of a ViInt32 attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAttributeInt64(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Int64@)">
             <summary>
             Queries the value of a ViInt64 attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Returns the current value of the attribute. Pass the address of a ViInt64 variable.
             
            </param>
            <returns>
             
            niRFSA_GetAttributeViInt64
             ViStatus niRFSA_GetAttributeViInt64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViInt64 *value);
             Purpose
             Queries the value of a ViInt64 attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAttributeReal64(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.Double@)">
             <summary>
             Queries the value of a ViReal64 attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Returns the current value of the attribute. Pass the address of a ViReal64 variable.
             
            </param>
            <returns>
             
            niRFSA_GetAttributeViReal64
             ViStatus niRFSA_GetAttributeViReal64(ViSession vi, ViConstString channelName, ViAttr attributeId, ViReal64 *value);
             Purpose
             Queries the value of a ViReal64 attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAttributeSession(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.IntPtr@)">
             <summary>
             Queries the value of a ViSession attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             Returns the current value of the attribute. Pass the address of a ViSession variable.
             
            </param>
            <returns>
             
            niRFSA_GetAttributeViSession
             ViStatus niRFSA_GetAttributeViSession(ViSession vi, ViConstString channelName, ViAttr attributeId, ViSession *value);
             Purpose
             Queries the value of a ViSession attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAttributeString(System.String,NationalInstruments.ModularInstruments.Interop.niRFSAProperties,System.String@)">
             <summary>
             Queries the value of a ViString attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             You must provide a ViChar array to serve as a buffer for the value. You pass the number of bytes in the buffer as the bufferSize parameter. If the current value of the attribute, including the terminating NULL byte, is larger than the size you indicate in the bufferSize parameter, the function copies buffer size &#8211;&#160;1&#160;bytes into the buffer, places an ASCII NULL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is &#34;123456&#34; and the buffer size is 4, the function places &#34;123&#34; into the buffer and returns 7.
             If you want to call this function just to get the required buffer size, you can pass 0 for bufferSize and VI_NULL for the attributeValue buffer.
             If you want the function to fill in the buffer regardless of the number of bytes in the value, pass a negative number for bufferSize.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
             </summary>
            <param name = "channelName">
             Specifies the name of the channel on which to check the attribute value if the attribute is channel based. If the attribute is not channel based, set this parameter to &#34;&#34; (empty string) or VI_NULL.
             
            </param>
            <param name = "attributeID">
             Pass the ID of an attribute.
             
            </param>
            <param name = "attributeValue">
             The buffer in which the function returns the current value of the attribute.  The buffer must be of type ViChar and have at least as many bytes as indicated in bufferSize.
             If you specify 0 for the bufferSize parameter, you can pass VI_NULL for this parameter.
             
            </param>
            <returns>
             
            niRFSA_GetAttributeViString
             ViStatus niRFSA_GetAttributeViString(ViSession vi, ViConstString channelName, ViAttr attributeId, ViChar value[]);
             Purpose
             Queries the value of a ViString attribute.
             You can use this low-level function to get the values of inherent IVI attributes and instrument-specific attributes. 
             You must provide a ViChar array to serve as a buffer for the value. You pass the number of bytes in the buffer as the bufferSize parameter. If the current value of the attribute, including the terminating NULL byte, is larger than the size you indicate in the bufferSize parameter, the function copies buffer size &#8211;&#160;1&#160;bytes into the buffer, places an ASCII NULL byte at the end of the buffer, and returns the buffer size you must pass to get the entire value. For example, if the value is &#34;123456&#34; and the buffer size is 4, the function places &#34;123&#34; into the buffer and returns 7.
             If you want to call this function just to get the required buffer size, you can pass 0 for bufferSize and VI_NULL for the attributeValue buffer.
             If you want the function to fill in the buffer regardless of the number of bytes in the value, pass a negative number for bufferSize.
             Supported Devices: NI&#160;5600/5601/5603/5605 (external digitizer mode), NI&#160;5661/5663/5663E/5665
             if(typeof(Print_Link)=="function")  {
             Print_Link();
             }
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetStepGainEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether to enable or disable the step gain amplifier. 
                Default Value: NIRFSA_VAL_STEP_GAIN_DISABLED 
                Supported Devices: NI 5694         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetStepGainEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether to enable or disable the step gain amplifier. 
                Default Value: NIRFSA_VAL_STEP_GAIN_DISABLED 
                Supported Devices: NI 5694         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDownconvertorPreselectorEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether the preselector is enabled on the downconverter. 
                NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
                Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
                NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDownconvertorPreselectorEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether the preselector is enabled on the downconverter. 
                NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
                Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
                NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfPreselectorFilter(System.String,System.Int32)">
             <summary>
            Specifies the RF preselector filter to use. 
                Default Values: 
                NI 5667, NI 5693: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_9 
                NI 5665: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_NONE 
                Supported Devices: NI 5665/5667, NI 5693        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfPreselectorFilter(System.String,System.Int32@)">
             <summary>
            Specifies the RF preselector filter to use. 
                Default Values: 
                NI 5667, NI 5693: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_9 
                NI 5665: NIRFSA_VAL_RF_PRESELECTOR_FILTER_PATH_NONE 
                Supported Devices: NI 5665/5667, NI 5693        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLowFrequencyByPassEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether to use the low-frequency bypass path for the incoming RF signal. 
                Default Value: NIRFSA_VAL_DISABLED 
                Supported Devices: NI 5693, NI 5667        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLowFrequencyByPassEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether to use the low-frequency bypass path for the incoming RF signal. 
                Default Value: NIRFSA_VAL_DISABLED 
                Supported Devices: NI 5693, NI 5667        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetNotchFilterEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether the notch filter is enabled on the RF conditioning module. 
                Default Value: NIRFSA_VAL_NOTCH_FILTER_DISABLED 
                Supported Devices: NI 5661/5663/5663E/5665/5667, NI 5693        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNotchFilterEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether the notch filter is enabled on the RF conditioning module. 
                Default Value: NIRFSA_VAL_NOTCH_FILTER_DISABLED 
                Supported Devices: NI 5661/5663/5663E/5665/5667, NI 5693        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSignalConditioningEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether all signal conditioning is enabled on the NI 5694. 
                NOTE: If you set this attribute to NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED,    NI-RFSA bypasses all signal conditioning, prevents any signal downconversion,    and fixes the values for NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute, the    NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute, and the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute. 
                Default Value: NIRFSA_VAL_SIGNAL_CONDITIONING_ENABLED 
                Supported Devices:NI 5694        
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSignalConditioningEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether all signal conditioning is enabled on the NI 5694. 
                NOTE: If you set this attribute to NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED,    NI-RFSA bypasses all signal conditioning, prevents any signal downconversion,    and fixes the values for NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute, the    NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute, and the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute. 
                Default Value: NIRFSA_VAL_SIGNAL_CONDITIONING_ENABLED 
                Supported Devices:NI 5694        
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIfConditioningDownConversionEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether downconversion to 21.4 MHz is enabled for the IF conditioning module.    The IF output frequency is 21.4 MHz when you enable this attribute, and it is 193.6 MHz    when you disable this attribute. 
                NOTE: If you set the NIRFSA_ATTR_SIGNAL_CONDITIONING_ENABLED attribute to    NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED, you cannot set the    NIRFSA_ATTR_IF_CONDITIONING_DOWN_CONVERSION_ENABLED attribute to NIRFSA_VAL_ENABLED. 
                NOTE: For the NI 5661/5663/5663E/5665, the only valid value for this attribute is NIRFSA_VAL_DISABLED. 
                Default Values: NIRFSA_VAL_DISABLED 
                
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfConditioningDownConversionEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether downconversion to 21.4 MHz is enabled for the IF conditioning module.    The IF output frequency is 21.4 MHz when you enable this attribute, and it is 193.6 MHz    when you disable this attribute. 
                NOTE: If you set the NIRFSA_ATTR_SIGNAL_CONDITIONING_ENABLED attribute to    NIRFSA_VAL_SIGNAL_CONDITIONING_BYPASSED, you cannot set the    NIRFSA_ATTR_IF_CONDITIONING_DOWN_CONVERSION_ENABLED attribute to NIRFSA_VAL_ENABLED. 
                NOTE: For the NI 5661/5663/5663E/5665, the only valid value for this attribute is NIRFSA_VAL_DISABLED. 
                Default Values: NIRFSA_VAL_DISABLED 
                
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIfFilterBandwidth(System.String,System.Double)">
             <summary>
            Specifies the IF filter path bandwidth for your device configuration. 
                NOTE: For composite devices, such as the NI 5663/5663E/5665/5667, the IF filter path    bandwidth includes all IF filters across the component modules of a composite device. 
                NOTE: For the NI 5601 and NI 5663/5663E, set the NIRFSA_ATTR_IF_FILTER attribute to choose    the IF filter you want to use. Read the value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute    to determine the IF filters used by the NI 5601 and NI 5663/5663E. 
                Default Values: For spectrum acquisition types the default is greater than or    equal to the NIRFSA_ATTR_SPECTRUM_SPAN attribute. NI-RFSA chooses the default    value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute to correspond to the    appropriate IF filter. For I/Q acquisition types NI-RFSA chooses the default    value corresponding to the widest IF filter possible for your equipment setup.
                Supported Devices: NI 5601/5603/5605, NI 5663/5663E/5665/5667, NI 5694        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfFilterBandwidth(System.String,System.Double@)">
             <summary>
            Specifies the IF filter path bandwidth for your device configuration. 
                NOTE: For composite devices, such as the NI 5663/5663E/5665/5667, the IF filter path    bandwidth includes all IF filters across the component modules of a composite device. 
                NOTE: For the NI 5601 and NI 5663/5663E, set the NIRFSA_ATTR_IF_FILTER attribute to choose    the IF filter you want to use. Read the value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute    to determine the IF filters used by the NI 5601 and NI 5663/5663E. 
                Default Values: For spectrum acquisition types the default is greater than or    equal to the NIRFSA_ATTR_SPECTRUM_SPAN attribute. NI-RFSA chooses the default    value of the NIRFSA_ATTR_IF_FILTER_BANDWIDTH attribute to correspond to the    appropriate IF filter. For I/Q acquisition types NI-RFSA chooses the default    value corresponding to the widest IF filter possible for your equipment setup.
                Supported Devices: NI 5601/5603/5605, NI 5663/5663E/5665/5667, NI 5694        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCenterFrequency(System.String,System.Double)">
             <summary>
            Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
                 NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
                Units: hertz (Hz) 
                Default Value: 1 GHz 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCenterFrequency(System.String,System.Double@)">
             <summary>
            Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
                 NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
                Units: hertz (Hz) 
                Default Value: 1 GHz 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSmoothSpectrumEnabled(System.String,System.Int32)">
            <summary>
            Enables smooth spectrum.
            Default Value: Disabled
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSmoothSpectrumEnabled(System.String,System.Int32@)">
            <summary>
            Enables smooth spectrum.
            Default Value: Disabled
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFftWindowShapeFactor(System.String,System.Double@)">
             <summary>
            Returns the shape factor of the window used in the fast Fourier transform (FFT).    The Window Shape Factor is defined as ratio of the 60 dB to 6 dB bandwidths. 
                Default Value: N/A 
                Supported Devices: NI 5661/5663/5663E/5665/5667        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfConditioningTemperature(System.String,System.Double@)">
             <summary>
            Returns the current temperature, in degrees Celsius, of the RF conditioning module. 
                Default Value: N/A 
                Supported Devices: NI 5667        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfConditioningTemperature(System.String,System.Double@)">
             <summary>
            Returns the current temperature, in degrees Celsius, of the IF conditioning module. 
                Default Value: N/A 
                Supported Devices: NI 5667        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoSource(System.String,System.String)">
             <summary>
            Specifies the source for the LO to be used to down convert.
                If no down conversion is required, this attribute will be ignored.   Default Value: NIRFSA_VAL_ONBOARD_STR   Supported Devices: NI 5694        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoSource(System.String,System.String@)">
             <summary>
            Specifies the source for the LO to be used to down convert.
                If no down conversion is required, this attribute will be ignored.   Default Value: NIRFSA_VAL_ONBOARD_STR   Supported Devices: NI 5694        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetConfigurationListStepTriggerSource(System.String,System.String)">
             <summary>
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetConfigurationListStepTriggerSource(System.String,System.String@)">
             <summary>
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDdcRefTriggerOverride(System.String,System.Boolean)">
             <summary>
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDdcRefTriggerOverride(System.String,System.Boolean@)">
             <summary>
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMinimumReconfigTime(System.String,System.Double)">
             <summary>
            This attribute is not for customer use. 
                Default Value: 0 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMinimumReconfigTime(System.String,System.Double@)">
             <summary>
            This attribute is not for customer use. 
                Default Value: 0 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetContiguousMultiRecord(System.String,System.Int32)">
             <summary>
             
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetContiguousMultiRecord(System.String,System.Int32@)">
             <summary>
             
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetTimerStartSource(System.String,System.String)">
            <summary>
            This property is not for customer use.
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetTimerStartSource(System.String,System.String@)">
            <summary>
            This property is not for customer use.
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetStartTriggerDelay(System.String,System.Double)">
             <summary>
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetStartTriggerDelay(System.String,System.Double@)">
             <summary>
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDownconvertorCalToneMode(System.String,System.Int32)">
             <summary>
            Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
                Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDownconvertorCalToneMode(System.String,System.Int32@)">
             <summary>
            Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
                Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDownconvertorCalToneFrequency(System.String,System.Double)">
             <summary>
            Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
                Supported Devices: NI 5603/5605          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDownconvertorCalToneFrequency(System.String,System.Double@)">
             <summary>
            Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
                Supported Devices: NI 5603/5605          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfPreselectorCalToneMode(System.String,System.Int32)">
             <summary>
            Specifies the location in a signal path where an RF preselector calibration    tone is injected or whether the tone is disabled. 
                Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
                Supported Devices: NI 5667, NI 5693         
             
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfPreselectorCalToneMode(System.String,System.Int32@)">
             <summary>
            Specifies the location in a signal path where an RF preselector calibration    tone is injected or whether the tone is disabled. 
                Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
                Supported Devices: NI 5667, NI 5693         
             
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfPreselectorCalToneFrequency(System.String,System.Double)">
             <summary>
            Specifies the frequency of the RF preselector calibration tone, in hertz (Hz). 
                 Valid Values: 34.5 MHz to 7.5 GHz 
                Default Value: 612.5 MHz 
                Supported Devices: NI 5667, NI 5693          
             
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfPreselectorCalToneFrequency(System.String,System.Double@)">
            <summary>
             Specifies the frequency of the RF preselector calibration tone, in hertz (Hz). 
                 Valid Values: 34.5 MHz to 7.5 GHz 
                Default Value: 612.5 MHz 
                Supported Devices: NI 5667, NI 5693          
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalToneStepAttenuation(System.String,System.Double)">
            <summary>
            Specifies the step attenuator to engage in the calibration tone path. This property is valid only during a calibration session.
            Units: dB
            Valid Values: 2.00, 10.00
            Default Value: 2.00 dB
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalToneStepAttenuation(System.String,System.Double@)">
            <summary>
            Specifies the step attenuator to engage in the calibration tone path. This property is valid only during a calibration session.
            Units: dB
            Valid Values: 2.00, 10.00
            Default Value: 2.00 dB
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalTonePowerReferredToRfIn(System.String,System.Double)">
             <summary>
            Returns the power of a virtual signal connected to the RF IN connector on the    NI 5693 front panel when the calibration tone is enabled. 
                You can enable a calibration tone for the NI 5693 by setting the    NIRFSA_ATTR_RF_PRESELECTOR_CAL_TONE_MODE attribute to    NIRFSA_VAL_CAL_TONE_LOWBAND_RF or NIRFSA_VAL_CAL_TONE_HIGHBAND_RF. 
                Units: dBm 
                Default Value: N/A 
                Supported Devices: NI 5693          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalTonePowerReferredToRfIn(System.String,System.Double@)">
             <summary>
            Returns the power of a virtual signal connected to the RF IN connector on the    NI 5693 front panel when the calibration tone is enabled. 
                You can enable a calibration tone for the NI 5693 by setting the    NIRFSA_ATTR_RF_PRESELECTOR_CAL_TONE_MODE attribute to    NIRFSA_VAL_CAL_TONE_LOWBAND_RF or NIRFSA_VAL_CAL_TONE_HIGHBAND_RF. 
                Units: dBm 
                Default Value: N/A 
                Supported Devices: NI 5693          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInputPort(System.String,System.Int32@)">
             <summary>
            Specifies the connector(s) to use to acquire the signal.    To set this attribute, the NI-RFSA device must be in the    Configuration state. 
                Default Value: NIRFSA_VAL_RF_IN 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetInputPort(System.String,System.Int32)">
             <summary>
            Specifies the connector(s) to use to acquire the signal.    To set this attribute, the NI-RFSA device must be in the    Configuration state. 
                Default Value: NIRFSA_VAL_RF_IN 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoInPower(System.String,System.Double@)">
             <summary>
            Returns the power level, in dBm, expected at the LO IN terminal    when the NIRFSA_ATTR_LO_SOURCE attribute is set to NIRFSA_VAL_LO_IN_STR. 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoInPower(System.String,System.Double)">
             <summary>
            Returns the power level, in dBm, expected at the LO IN terminal    when the NIRFSA_ATTR_LO_SOURCE attribute is set to NIRFSA_VAL_LO_IN_STR. 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoPllFractionalModeEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether to use fractional mode for the LO PLL or not. Fractional mode    gives a finer frequency step resolution, but may result in non-harmonic spurs.    Refer to the NI PXIe-5644R Specifications or the NI PXIe-5645R Specifications    for more information about fractional mode and non harmonic spurs. 
                NOTE: The NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is only    applicable when using the internal LO. 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoPllFractionalModeEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether to use fractional mode for the LO PLL or not. Fractional mode    gives a finer frequency step resolution, but may result in non-harmonic spurs.    Refer to the NI PXIe-5644R Specifications or the NI PXIe-5645R Specifications    for more information about fractional mode and non harmonic spurs. 
                NOTE: The NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is only    applicable when using the internal LO. 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoFrequencyStepSize(System.String,System.Double@)">
             <summary>
            Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
                The LO frequency can only be tuned by multiples of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. The LO frequency can therefore be offset from the requested    center frequency by as much as half of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. This offset is corrected by digitally frequency shifting the    NIRFSA_ATTR_LO_FREQUENCY attribute to the value requested in either the    NIRFSA_ATTR_IQ_CARRIER_FREQUENCY attribute or the NIRFSA_ATTR_SPECTRUM_CENTER_FREQUENCY attribute. 
                When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_ENABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute can    accept any value from 50 kHz to 24 MHz. 
                When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_DISABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute is    coerced to 4 MHz, 5 MHz, 6 MHz, 12 MHz or 24 MHz. 
                Valid Values: 50 kHz to 24 MHz 
                Default Value: 200 kHz 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoFrequencyStepSize(System.String,System.Double)">
             <summary>
            Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
                The LO frequency can only be tuned by multiples of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. The LO frequency can therefore be offset from the requested    center frequency by as much as half of the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE    attribute. This offset is corrected by digitally frequency shifting the    NIRFSA_ATTR_LO_FREQUENCY attribute to the value requested in either the    NIRFSA_ATTR_IQ_CARRIER_FREQUENCY attribute or the NIRFSA_ATTR_SPECTRUM_CENTER_FREQUENCY attribute. 
                When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_ENABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute can    accept any value from 50 kHz to 24 MHz. 
                When the NIRFSA_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is set to    NIRFSA_VAL_DISABLED, the NIRFSA_ATTR_LO_FREQUENCY_STEP_SIZE attribute is    coerced to 4 MHz, 5 MHz, 6 MHz, 12 MHz or 24 MHz. 
                Valid Values: 50 kHz to 24 MHz 
                Default Value: 200 kHz 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqInPortCarrierFrequency(System.String,System.Double@)">
             <summary>
            Configures the frequency of the signal. The onboard signal    processing (OSP) will frequency shift the signal at this    frequency to baseband prior to acquiring it. 
                Valid Values: -60 MHz to +60 MHz 
                Default Value: 0 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqInPortCarrierFrequency(System.String,System.Double)">
             <summary>
            Configures the frequency of the signal. The onboard signal    processing (OSP) will frequency shift the signal at this    frequency to baseband prior to acquiring it. 
                Valid Values: -60 MHz to +60 MHz 
                Default Value: 0 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqInportTerminalConfiguration(System.String,System.Int32@)">
             <summary>
            Configures the terminal configuration of the I/Q terminals. 
                Default Value: NIRFSA_VAL_DIFFERENTIAL    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqInportTerminalConfiguration(System.String,System.Int32)">
             <summary>
            Configures the terminal configuration of the I/Q terminals. 
                Default Value: NIRFSA_VAL_DIFFERENTIAL    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqInPortVerticalRange(System.String,System.Double@)">
             <summary>
            Specifies the voltage range for the I/Q terminals. 
                The voltage range in differential mode is configurable from 2 Vpk-pk to 0.032 Vpk-pk in    1 dB steps. In single-ended mode, valid ranges are half those for    differential. Values are always coerced up to the next valid range. 
                Valid Values: 0 Vpk-pk to 2 Vpk-pk for differential terminal configuration,    0 Vpk-pk to 1 Vpk-pk for single-ended terminal configuration.
                Default Value: 2 Vpk-pk 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqInPortVerticalRange(System.String,System.Double)">
             <summary>
            Specifies the voltage range for the I/Q terminals. 
                The voltage range in differential mode is configurable from 2 Vpk-pk to 0.032 Vpk-pk in    1 dB steps. In single-ended mode, valid ranges are half those for    differential. Values are always coerced up to the next valid range. 
                Valid Values: 0 Vpk-pk to 2 Vpk-pk for differential terminal configuration,    0 Vpk-pk to 1 Vpk-pk for single-ended terminal configuration.
                Default Value: 2 Vpk-pk 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqInPortTemperature(System.String,System.Double@)">
             <summary>
            Returns the temperature of the I/Q IN circuitry on the device. 
                Units: degrees C 
                Supported Devices: NI 5644R/5645R         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqInPortTemperature(System.String,System.Double)">
             <summary>
            Returns the temperature of the I/Q IN circuitry on the device. 
                Units: degrees C 
                Supported Devices: NI 5644R/5645R         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncStartTriggerMaster(System.String,System.Boolean)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the shared    Start Trigger between multiple devices. The master device distributes the    synchronized Start Trigger to all devices in the system through the    Start Trigger distribution line. 
                When synchronizing the Start Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Start Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_START_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_START_TRIGGER_STR. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: VI_FALSE 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncStartTriggerMaster(System.String,System.Boolean@)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the shared    Start Trigger between multiple devices. The master device distributes the    synchronized Start Trigger to all devices in the system through the    Start Trigger distribution line. 
                When synchronizing the Start Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Start Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_START_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_START_TRIGGER_STR. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: VI_FALSE 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncRefTriggerMaster(System.String,System.Boolean)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the shared    Reference Trigger between multiple devices. The master device distributes    the synchronized Reference Trigger to all devices in the system through    the Reference Trigger distribution line. 
                When synchronizing the Reference Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Reference Trigger distribution line. When the device is configured as a    slave, set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_REF_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_REF_TRIGGER_STR. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: VI_FALSE 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncRefTriggerMaster(System.String,System.Boolean@)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the shared    Reference Trigger between multiple devices. The master device distributes    the synchronized Reference Trigger to all devices in the system through    the Reference Trigger distribution line. 
                When synchronizing the Reference Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Reference Trigger distribution line. When the device is configured as a    slave, set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_REF_TRIGGER_SOURCE attribute to NIRFSA_VAL_SYNC_REF_TRIGGER_STR. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: VI_FALSE 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncStartTriggerDistLine(System.String,System.String)">
             <summary>
             
            Specifies which external trigger line distributes the synchronized Start    Trigger signal. When synchronizing the Start Trigger, configure all    devices to use the same Start Trigger distribution line. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncStartTriggerDistLine(System.String,System.String@)">
             <summary>
             
            Specifies which external trigger line distributes the synchronized Start    Trigger signal. When synchronizing the Start Trigger, configure all    devices to use the same Start Trigger distribution line. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncRefTriggerDistLine(System.String,System.String)">
             <summary>
             
            Specifies which external trigger line distributes the synchronized    Reference Trigger signal. When synchronizing the Reference Trigger,    configure all devices to use the same Reference Trigger distribution line. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncRefTriggerDistLine(System.String,System.String@)">
             <summary>
             
            Specifies which external trigger line distributes the synchronized    Reference Trigger signal. When synchronizing the Reference Trigger,    configure all devices to use the same Reference Trigger distribution line. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncRefTriggerDelayEnabled(System.String,System.Int32)">
             <summary>
             
            Specifies whether the Reference Trigger is delayed with the data. Set this    attribute to NIRFSA_VAL_DISABLED when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_POWER_EDGE or NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: NIRFSA_VAL_DISABLED 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncRefTriggerDelayEnabled(System.String,System.Int32@)">
             <summary>
             
            Specifies whether the Reference Trigger is delayed with the data. Set this    attribute to NIRFSA_VAL_DISABLED when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_POWER_EDGE or NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: NIRFSA_VAL_DISABLED 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncAdvanceTriggerMaster(System.String,System.Boolean)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the    shared Advance Trigger between multiple devices. The master device    distributes the synchronized Advance Trigger to all devices in the    system through the Advance Trigger distribution line. 
                When synchronizing the Advance Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Advance Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_ADVANCE_TRIGGER_SOURCE attribute to    NIRFSA_VAL_SYNC_ADVANCE_TRIGGER_STR. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: VI_FALSE 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncAdvanceTriggerMaster(System.String,System.Boolean@)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the    shared Advance Trigger between multiple devices. The master device    distributes the synchronized Advance Trigger to all devices in the    system through the Advance Trigger distribution line. 
                When synchronizing the Advance Trigger, one device must always be designated    as the master. When the device is configured as a master, it actively drives    the Advance Trigger distribution line. When the device is configured as a slave,    set the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute to NIRFSA_VAL_DIGITAL_EDGE,    and the NIRFSA_ATTR_DIGITAL_EDGE_ADVANCE_TRIGGER_SOURCE attribute to    NIRFSA_VAL_SYNC_ADVANCE_TRIGGER_STR. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Default Value: VI_FALSE 
                Supported Devices: NI 5644R/5645R      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncAdvanceTriggerDistLine(System.String,System.String)">
             <summary>
             
            Specifies which external trigger line distributes the synchronized Advance    Trigger signal. When synchronizing the Advance Trigger, configure all    devices to use the same Advance Trigger distribution line. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncAdvanceTriggerDistLine(System.String,System.String@)">
             <summary>
             
            Specifies which external trigger line distributes the synchronized Advance    Trigger signal. When synchronizing the Advance Trigger, configure all    devices to use the same Advance Trigger distribution line. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your    device in the NI RF Vector Signal Analyzers Help for more information about    device synchronization for vector signal transceivers.
                Valid Values: PXI_Trig0, PXI_Trig1, PXI_Trig2, PXI_Trig3, PXI_Trig4,    PXI_Trig5, PXI_Trig6, PXI_Trig7, PFI0 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncSampleClockMaster(System.String,System.Boolean)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the sample clock between multiple devices.
                The master device distributes the sync signal to all devices in the system through the Sync Sample Clock distribution line. 
                When synchronizing the Sample Clock, one device must always be designated as the master. When the device is configured as a master, it actively drives the Sync Sample Clock distribution line.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncSampleClockMaster(System.String,System.Boolean@)">
             <summary>
             
            Specifies whether the device is the master for synchronizing the sample clock between multiple devices.
                The master device distributes the sync signal to all devices in the system through the Sync Sample Clock distribution line. 
                When synchronizing the Sample Clock, one device must always be designated as the master. When the device is configured as a master, it actively drives the Sync Sample Clock distribution line.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSyncSampleClockDistLine(System.String,System.String)">
             <summary>
             
            Specifies which external trigger line distributes the Sample Clock Sync signal. When synchronizing the Sample Clock, configure all devices to use the same Sync Sample Clock distribution line.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSyncSampleClockDistLine(System.String,System.String@)">
             <summary>
             
            Specifies which external trigger line distributes the Sample Clock Sync signal. When synchronizing the Sample Clock, configure all devices to use the same Sync Sample Clock distribution line.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the NI RF Vector Signal Analyzers Help for more information about device synchronization for vector signal transceivers.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqAnalogEdgeRefTriggerSource(System.String,System.String)">
             <summary>
             
            Specifies the channel from which the device monitors the trigger.    Use a value of I to monitor the I channel. Use a value of Q to monitor    the Q channel. Use a value of IQ to monitor both I and Q channels.    This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Valid Values: I, Q, IQ, QI 
                Default Value: I 
                Supported Devices: NI 5644R/5645R    
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqAnalogEdgeRefTriggerSource(System.String,System.String@)">
             <summary>
             
            Specifies the channel from which the device monitors the trigger.    Use a value of I to monitor the I channel. Use a value of Q to monitor    the Q channel. Use a value of IQ to monitor both I and Q channels.    This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Valid Values: I, Q, IQ, QI 
                Default Value: I 
                Supported Devices: NI 5644R/5645R    
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqAnalogEdgeRefTriggerSlope(System.String,System.Int32)">
             <summary>
            Specifies whether the device asserts the trigger when the voltage level is    rising or falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute    to NIRFSA_VAL_IQ_ANALOG_EDGE, the device asserts the trigger when the signal    level exceeds the specified level with the slope you specify. This attribute    affects the device operation only when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Default Value: NIRFSA_VAL_RISING_SLOPE 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqAnalogEdgeRefTriggerSlope(System.String,System.Int32@)">
             <summary>
            Specifies whether the device asserts the trigger when the voltage level is    rising or falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute    to NIRFSA_VAL_IQ_ANALOG_EDGE, the device asserts the trigger when the signal    level exceeds the specified level with the slope you specify. This attribute    affects the device operation only when the NIRFSA_ATTR_REF_TRIGGER_TYPE    attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Default Value: NIRFSA_VAL_RISING_SLOPE 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqAnalogEdgeRefTriggerLevel(System.String,System.Double)">
             <summary>
             
            Specifies the analog level, in volts, at which the device triggers.    The device asserts the trigger when the signal exceeds the level    specified by the value of this property, taking into consideration    the specified slope. This attribute affects the device operation only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Default Value: 0 V 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqAnalogEdgeRefTriggerLevel(System.String,System.Double@)">
             <summary>
             
            Specifies the analog level, in volts, at which the device triggers.    The device asserts the trigger when the signal exceeds the level    specified by the value of this property, taking into consideration    the specified slope. This attribute affects the device operation only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Default Value: 0 V 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqAnalogEdgeRefTriggerHysteresis(System.String,System.Double)">
             <summary>
             
            Specifies the size of the hysteresis window on either side of the trigger    level. The device triggers when the signal passes through the threshold    you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_LEVEL attribute,    has the slope you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_SLOPE    attribute, and passes through the hysteresis window that you specify with this    attribute. This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Valid Values: 0 to (Voltage Range/2 + Trigger Level) for Rising Slope.    0 to (Voltage Range/2 – Trigger Level) for Falling Slope. These values limit    the hysteresis to the entire voltage range that is below the trigger level for    Rising Slope or that is above the trigger level for Falling Slope.
                Default Value: The default is calculated by the driver as (Range x 0.025). 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqAnalogEdgeRefTriggerHysteresis(System.String,System.Double@)">
             <summary>
             
            Specifies the size of the hysteresis window on either side of the trigger    level. The device triggers when the signal passes through the threshold    you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_LEVEL attribute,    has the slope you specify with the NIRFSA_ATTR_IQ_ANALOG_EDGE_REF_TRIGGER_SLOPE    attribute, and passes through the hysteresis window that you specify with this    attribute. This attribute affects the device operation only when the    NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to NIRFSA_VAL_IQ_ANALOG_EDGE. 
                Valid Values: 0 to (Voltage Range/2 + Trigger Level) for Rising Slope.    0 to (Voltage Range/2 – Trigger Level) for Falling Slope. These values limit    the hysteresis to the entire voltage range that is below the trigger level for    Rising Slope or that is above the trigger level for Falling Slope.
                Default Value: The default is calculated by the driver as (Range x 0.025). 
                Supported Devices: NI 5644R/5645R 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDecimationDelay(System.String,System.Double)">
             <summary>
             
            Specifies the sub-sample delay, in seconds, to apply to the    acquired signal. To set this property, the NI-RFSA device    must be in the Configuration state. 
                Valid Values: -4.16 ns to +4.16 ns 
                Default Value: 0 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDecimationDelay(System.String,System.Double@)">
             <summary>
             
            Specifies the sub-sample delay, in seconds, to apply to the    acquired signal. To set this property, the NI-RFSA device    must be in the Configuration state. 
                Valid Values: -4.16 ns to +4.16 ns 
                Default Value: 0 
                Supported Devices: NI 5644R/5645R    
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDownconvertorFrequencyOffset(System.String,System.Double)">
             <summary>
            Specifies an offset from the I/Q carrier frequency for the downconverter.    If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid. After you set this attribute, the RF downconverter is    locked to that frequency offset until the value is changed or the attribute is reset. 
                Valid Values: -42 MHz to +42 MHz 
                Default Values: For spectrum acquisition types the driver automatically calculates    the default to avoid residual LO power. For I/Q acquisition types the default is 0 Hz.    If the center frequency is set to a non-multiple of the    NIRFSA_ATTR_SIGNAL_PATH_LO_FREQUENCY_STEP_SIZE attribute, the    NIRFSA_ATTR_DOWNCONVERTER_FREQUENCY_OFFSET attribute is set to compensate for the difference.
                Supported Devices: NI 5644R/5645R      
             
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDownconvertorFrequencyOffset(System.String,System.Double@)">
             <summary>
            Specifies an offset from the I/Q carrier frequency for the downconverter.    If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid. After you set this attribute, the RF downconverter is    locked to that frequency offset until the value is changed or the attribute is reset. 
                Valid Values: -42 MHz to +42 MHz 
                Default Values: For spectrum acquisition types the driver automatically calculates    the default to avoid residual LO power. For I/Q acquisition types the default is 0 Hz.    If the center frequency is set to a non-multiple of the    NIRFSA_ATTR_SIGNAL_PATH_LO_FREQUENCY_STEP_SIZE attribute, the    NIRFSA_ATTR_DOWNCONVERTER_FREQUENCY_OFFSET attribute is set to compensate for the difference.
                Supported Devices: NI 5644R/5645R      
             
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFpgaBitFilePath(System.String,System.String@)">
             <summary>
             
            Returns a string containing the path to the location of the current FPGA Extensions bitfile, a .lvbitx file, that is programmed on the device. 
                An FPGA Extensions bitfile controls the behavior of the FPGA. You can use a custom bitfile with the NI-RFSA instrument driver to override the default FPGA bitfile and change the default behavior of the FPGA. Before reading this property, you must specify the bitfile location using the Driver Setup keyword in the options string parameter of the niRFSA_InitWithOptions function. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetPreselectorTuningDacValue5665(System.String,System.Int32)">
             <summary>
            Specifies the preselector tuning DAC value during the preselector external alignment step.    This value is valid only during a external alignment session.
                Valid Values: 0 to 16,383 
                Defined Values: 0 to 15.5 
                Default Value: N/A 
                Supported Devices: NI 5605 (external digitizer mode)         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetPreselectorTuningDacValue5665(System.String,System.Int32@)">
             <summary>
            Specifies the preselector tuning DAC value during the preselector external alignment step.    This value is valid only during a external alignment session.
                Valid Values: 0 to 16,383 
                Defined Values: 0 to 15.5 
                Default Value: N/A 
                Supported Devices: NI 5605 (external digitizer mode)         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAcquisitionType(System.String,System.Int32)">
             <summary>
            Configures the session to either acquire I/Q data or to compute a power    spectrum over the specified frequency range.
                Default Value: NIRFSA_VAL_IQ 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAcquisitionType(System.String,System.Int32@)">
             <summary>
            Configures the session to either acquire I/Q data or to compute a power    spectrum over the specified frequency range.
                Default Value: NIRFSA_VAL_IQ 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetActiveConfigurationList(System.String,System.String)">
             <summary>
            Specifies the configuration list for RF list mode to make active    for configuration or initiation. 
                Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. Set this attribute to an empty    string to disable RF list mode. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetActiveConfigurationList(System.String,System.String@)">
             <summary>
            Specifies the configuration list for RF list mode to make active    for configuration or initiation. 
                Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. Set this attribute to an empty    string to disable RF list mode. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetActiveConfigurationListStep(System.String,System.Int64)">
             <summary>
            Specifies the step in the configuration list for RF list mode to make active    for configuration or initiation. 
                Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. 
                Default Value: 0 for devices that support RF list mode. For all other devices, the default value is N/A.
                Supported Devices: NI 5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetActiveConfigurationListStep(System.String,System.Int64@)">
             <summary>
            Specifies the step in the configuration list for RF list mode to make active    for configuration or initiation. 
                Activating a list makes all attributes in the list reflect the value of the attributes    that correspond to the set specified by the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST and    the NIRFSA_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes. 
                Default Value: 0 for devices that support RF list mode. For all other devices, the default value is N/A.
                Supported Devices: NI 5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAdvanceTriggerTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/AdvanceTrigger, where DigitizerName is the name associated with your digitizer module in MAX.  
                Supported Devices: NI 5663/5663E/5665      	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAdvanceTriggerType(System.String,System.Int32)">
             <summary>
            Specifies whether you want the Advance trigger to be a digital edge or    software trigger. 
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAdvanceTriggerType(System.String,System.Int32@)">
             <summary>
            Specifies whether you want the Advance trigger to be a digital edge or    software trigger. 
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAllowMoreRecordsThanMemory(System.String,System.Boolean)">
             <summary>
            Specifies whether to allow the device to acquire more records than will fit in the device memory of the NI 5622. 
                  NOTE: If you set the attribute to FALSE and attempt to acquire more records than fit into the device memory of the NI 5622,    NI-RFSA returns an error. If this attribute is set to TRUE, NI-RFSA returns an error only in the event of an acquisition buffer overflow.
                Default Value: VI_FALSE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAllowMoreRecordsThanMemory(System.String,System.Boolean@)">
             <summary>
            Specifies whether to allow the device to acquire more records than will fit in the device memory of the NI 5622. 
                  NOTE: If you set the attribute to FALSE and attempt to acquire more records than fit into the device memory of the NI 5622,    NI-RFSA returns an error. If this attribute is set to TRUE, NI-RFSA returns an error only in the event of an acquisition buffer overflow.
                Default Value: VI_FALSE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetArmRefTriggerType(System.String,System.Int32)">
             <summary>
            Specifies whether you want the Arm Reference trigger to be a digital edge or software trigger. 
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetArmRefTriggerType(System.String,System.Int32@)">
             <summary>
            Specifies whether you want the Arm Reference trigger to be a digital edge or software trigger. 
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAttenuation(System.String,System.Double)">
             <summary>
            Specifies the downconverter module attenuation setting, in dB. NI-RFSA automatically chooses    an attenuation setting for the reference level you configure.
                NI 5600/5661-You can change the attenuation value to modify the amount of noise and distortion.    Higher attenuation levels increase the noise level while decreasing distortion; lower    attenuation levels    decrease the noise level while increasing distortion.
                NI 5601/5663/5663E-You can change the attenuation value     to modify the amount of noise and distortion. Higher attenuation    levels increase the noise level while decreasing distortion; lower attenuation levels    decrease the noise    level while increasing distortion.
                NI 5603/5605/5665-You can set multiple attributes to modify the attenuation values for the device.    Refer to NI 5665 RF Attenuation and Signal Levels for more information about    configuring attenuation. 
                 Units: dB 
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAttenuation(System.String,System.Double@)">
             <summary>
            Specifies the downconverter module attenuation setting, in dB. NI-RFSA automatically chooses    an attenuation setting for the reference level you configure.
                NI 5600/5661-You can change the attenuation value to modify the amount of noise and distortion.    Higher attenuation levels increase the noise level while decreasing distortion; lower    attenuation levels    decrease the noise level while increasing distortion.
                NI 5601/5663/5663E-You can change the attenuation value     to modify the amount of noise and distortion. Higher attenuation    levels increase the noise level while decreasing distortion; lower attenuation levels    decrease the noise    level while increasing distortion.
                NI 5603/5605/5665-You can set multiple attributes to modify the attenuation values for the device.    Refer to NI 5665 RF Attenuation and Signal Levels for more information about    configuring attenuation. 
                 Units: dB 
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCache(System.String,System.Boolean)">
             <summary>
            Specifies whether to cache the value of attributes. If you set this attribute to VI_TRUE,    NI-RFSA tracks the current NI-RFSA device settings and avoids sending redundant commands    to the device. 
                NI-RFSA can always cache or never cache    particular attributes, regardless of the setting of this attribute.
                Use the niRFSA_InitWithOptions function to override the default value.
                Default Value: VI_TRUE  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCache(System.String,System.Boolean@)">
             <summary>
            Specifies whether to cache the value of attributes. If you set this attribute to VI_TRUE,    NI-RFSA tracks the current NI-RFSA device settings and avoids sending redundant commands    to the device. 
                NI-RFSA can always cache or never cache    particular attributes, regardless of the setting of this attribute.
                Use the niRFSA_InitWithOptions function to override the default value.
                Default Value: VI_TRUE  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalibrationCorrection300KhzFilter(System.String,System.Double)">
             <summary>
            Overrides the internal gain self-calibration correction for the 300 kHz IF filter path. 
                Default Value: 0 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalibrationCorrection300KhzFilter(System.String,System.Double@)">
             <summary>
            Overrides the internal gain self-calibration correction for the 300 kHz IF filter path. 
                Default Value: 0 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalibrationCorrection5MhzFilter(System.String,System.Double)">
             <summary>
            Overrides the internal gain self-calibration correction for the 5 MHz IF filter path.
                Default Value: 0 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalibrationCorrection5MhzFilter(System.String,System.Double@)">
             <summary>
            Overrides the internal gain self-calibration correction for the 5 MHz IF filter path.
                Default Value: 0 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalibrationCorrectionThroughFilter(System.String,System.Double)">
             <summary>
            Overrides the internal gain self-calibration correction for the IF filter through path. 
                Default Value: 0 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalibrationCorrectionThroughFilter(System.String,System.Double@)">
             <summary>
            Overrides the internal gain self-calibration correction for the IF filter through path. 
                Default Value: 0 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalIfAttenuationIndex(System.String,System.Int32)">
             <summary>
            Specifies the IF attenuation index from a table of valid settings. To select a correct    attenuation table, use this attribute in conjunction with the    NIRFSA_ATTR_CAL_IF_FILTER_SELECTION and NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION    attributes. This attribute is valid only during a calibration session. 
                Default Value: N/A 
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalIfAttenuationIndex(System.String,System.Int32@)">
             <summary>
            Specifies the IF attenuation index from a table of valid settings. To select a correct    attenuation table, use this attribute in conjunction with the    NIRFSA_ATTR_CAL_IF_FILTER_SELECTION and NIRFSA_ATTR_CAL_IF_ATTENUATION_TABLE_SELECTION    attributes. This attribute is valid only during a calibration session. 
                Default Value: N/A 
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalIfAttenuationTableSelection(System.String,System.Int32)">
             <summary>
            Specifies the IF attenuation table to be used for external calibration. This attribute is    valid only in a calibration session. 
                Default Value: NIRFSA_VAL_EXT_CAL_IF_ATTENUATION_TABLE_STANDARD  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalIfAttenuationTableSelection(System.String,System.Int32@)">
             <summary>
            Specifies the IF attenuation table to be used for external calibration. This attribute is    valid only in a calibration session. 
                Default Value: NIRFSA_VAL_EXT_CAL_IF_ATTENUATION_TABLE_STANDARD  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalIfFilterSelection(System.String,System.Int32)">
             <summary>
            Specifies the IF filter path during calibration. The attribute is valid only during a    calibration session. 
                Default Value: NIRFSA_VAL_EXT_CAL_IF_FILTER_PATH_3  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalIfFilterSelection(System.String,System.Int32@)">
             <summary>
            Specifies the IF filter path during calibration. The attribute is valid only during a    calibration session. 
                Default Value: NIRFSA_VAL_EXT_CAL_IF_FILTER_PATH_3  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalLo1Attenuation(System.String,System.Double)">
             <summary>
            Specifies the LO1 attenuation, in dB, during a calibration session. The default value is    31.5 dB. This attribute is valid only during a calibration session. 
                Valid Values: 0 to 31.5 
                Default Value: 31.5  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalLo1Attenuation(System.String,System.Double@)">
             <summary>
            Specifies the LO1 attenuation, in dB, during a calibration session. The default value is    31.5 dB. This attribute is valid only during a calibration session. 
                Valid Values: 0 to 31.5 
                Default Value: 31.5  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalLo2Attenuation(System.String,System.Double)">
             <summary>
            Specifies the LO2 attenuation, in dB, during a calibration session. The default value is    15.5 dB. This attribute is valid only during a    calibration session. 
                Valid Values: 0 to 15.5 
                Default Value: 15.5 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalLo2Attenuation(System.String,System.Double@)">
             <summary>
            Specifies the LO2 attenuation, in dB, during a calibration session. The default value is    15.5 dB. This attribute is valid only during a    calibration session. 
                Valid Values: 0 to 15.5 
                Default Value: 15.5 
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalLo3Attenuation(System.String,System.Double)">
             <summary>
            Specifies the LO3 attenuation, in dB, during a calibration session. The default    value is 15.5 dB. This attribute is valid only during a calibration session. 
                Valid Values: 0 to 15.5 
                Default Value: 15.5  
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalLo3Attenuation(System.String,System.Double@)">
             <summary>
            Specifies the LO3 attenuation, in dB, during a calibration session. The default    value is 15.5 dB. This attribute is valid only during a calibration session. 
                Valid Values: 0 to 15.5 
                Default Value: 15.5  
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalLoPathSelection(System.String,System.Int32)">
             <summary>
            Selects the LO signal path used during calibration. During noncalibration sessions,    NI-RFSA implicitly derives the LO signal path from the center frequency. During    calibration sessions, you must explicitly specify the LO signal path. This attribute is    valid only during a calibration session. 
                Default Value: NIRFSA_VAL_EXT_CAL_LO_PATH_1  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalLoPathSelection(System.String,System.Int32@)">
             <summary>
            Selects the LO signal path used during calibration. During noncalibration sessions,    NI-RFSA implicitly derives the LO signal path from the center frequency. During    calibration sessions, you must explicitly specify the LO signal path. This attribute is    valid only during a calibration session. 
                Default Value: NIRFSA_VAL_EXT_CAL_LO_PATH_1  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalRfElectronicAttenuationIndex(System.String,System.Int32)">
             <summary>
            Selects the value of RF electronic attenuation from a table of valid configurations.    This attribute is valid only during a calibration session and when you set    the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute to NIRFSA_ATTR_VAL_EXT_CAL_RF_BAND_1. 
                Default Value: N/A  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalRfElectronicAttenuationIndex(System.String,System.Int32@)">
             <summary>
            Selects the value of RF electronic attenuation from a table of valid configurations.    This attribute is valid only during a calibration session and when you set    the NIRFSA_ATTR_CAL_RF_PATH_SELECTION attribute to NIRFSA_ATTR_VAL_EXT_CAL_RF_BAND_1. 
                Default Value: N/A  
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalRfMechanicalAttenuationIndex(System.String,System.Int32)">
             <summary>
            Selects the value of the RF mechanical attenuation configuration from a table of    valid configurations. This attribute is valid only during a calibration session. 
                Default Value: N/A 
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalRfMechanicalAttenuationIndex(System.String,System.Int32@)">
             <summary>
            Selects the value of the RF mechanical attenuation configuration from a table of    valid configurations. This attribute is valid only during a calibration session. 
                Default Value: N/A 
                Supported Devices: NI 5603/5605        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalRfPathSelection(System.String,System.Int32)">
             <summary>
            Specifies the RF path to use during calibration. This attribute is valid only during a    calibration session. When you set this attribute, NI-RFSA does not select the RF path based    on the downconverter center frequency.
                The following RF bands and associated frequency ranges apply to the NI 5601:
                RF band 1: 3 GHz to 6.6 GHz 
                RF band 2: 330 MHz to 3 GHz 
                RF band 3: 120 MHz to 330 MHz  
                RF band 4: 10 MHz to 120 MHz 
                NI 5601-NIRFSA_VAL_EXT_CAL_RF_BAND_1 
                Supported Devices: NI 5601        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalRfPathSelection(System.String,System.Int32@)">
             <summary>
            Specifies the RF path to use during calibration. This attribute is valid only during a    calibration session. When you set this attribute, NI-RFSA does not select the RF path based    on the downconverter center frequency.
                The following RF bands and associated frequency ranges apply to the NI 5601:
                RF band 1: 3 GHz to 6.6 GHz 
                RF band 2: 330 MHz to 3 GHz 
                RF band 3: 120 MHz to 330 MHz  
                RF band 4: 10 MHz to 120 MHz 
                NI 5601-NIRFSA_VAL_EXT_CAL_RF_BAND_1 
                Supported Devices: NI 5601        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalToneFrequency(System.String,System.Double)">
             <summary>
            Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
                Supported Devices: NI 5603/5605          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalToneFrequency(System.String,System.Double@)">
             <summary>
            Specifies the frequency of the calibration tone, in hertz (Hz).    Default Value: 612.5 MHz 
                Supported Devices: NI 5603/5605          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetCalToneMode(System.String,System.Int32)">
             <summary>
            Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
                Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetCalToneMode(System.String,System.Int32@)">
             <summary>
            Specifies the location in a path where a calibration tone is injected or whether    the tone is disabled. 
                Default Value: NIRFSA_VAL_CAL_TONE_DISABLED  
                Supported Devices: NI 5603/5605         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetChannelCoupling(System.String,System.Int32)">
             <summary>
            Specifies whether the RF input channel is AC- or DC-coupled on a downconverter. 
                NOTE: For the NI 5605/5665, this attribute must be set to NIRFSA_VAL_AC when the DC block    is present and set to NIRFSA_VAL_DC when the DC block is not present to ensure device    specifications are met and to ensure the use of proper calibration data. For more    information about removing or attaching the DC block on the NI 5605, refer to the    NI 5665 Theory of Operation topic and the NI 5605 RF Downconverter Front Panel topic in this help file. 
                Default Value: NIRFSA_VAL_AC 
                Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetChannelCoupling(System.String,System.Int32@)">
             <summary>
            Specifies whether the RF input channel is AC- or DC-coupled on a downconverter. 
                NOTE: For the NI 5605/5665, this attribute must be set to NIRFSA_VAL_AC when the DC block    is present and set to NIRFSA_VAL_DC when the DC block is not present to ensure device    specifications are met and to ensure the use of proper calibration data. For more    information about removing or attaching the DC block on the NI 5605, refer to the    NI 5665 Theory of Operation topic and the NI 5605 RF Downconverter Front Panel topic in this help file. 
                Default Value: NIRFSA_VAL_AC 
                Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetConfigurationListStepInProgress(System.String,System.Int64@)">
             <summary>
            Returns the index of the current RF configuration list step that is executing in RF list    mode. The list is zero-indexed. You can query this attribute only when a list is executed. 
                Default Value: N/A 
                Supported Devices: NI 5663E/5665   	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDataTransferBlockSize(System.String,System.Int32)">
             <summary>
            Specifies the maximum number of samples to transfer at one time from    the device to host memory. Increasing this number should result in better    fetching performance because the driver does not need to restart the transfers    as often. However, increasing this number may increase the amount of page-locked    memory required from the system. 
                Default Value: 0x400000 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDataTransferBlockSize(System.String,System.Int32@)">
             <summary>
            Specifies the maximum number of samples to transfer at one time from    the device to host memory. Increasing this number should result in better    fetching performance because the driver does not need to restart the transfers    as often. However, increasing this number may increase the amount of page-locked    memory required from the system. 
                Default Value: 0x400000 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDataTransferMaximumBandwidth(System.String,System.Double)">
             <summary>
            Specifies the maximum bandwidth that the device can consume. 
                 NOTE: The NI device limits itself to transfer fewer bytes per second on the PCI Express bus    than the value you specify for this attribute. 
                Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDataTransferMaximumBandwidth(System.String,System.Double@)">
             <summary>
            Specifies the maximum bandwidth that the device can consume. 
                 NOTE: The NI device limits itself to transfer fewer bytes per second on the PCI Express bus    than the value you specify for this attribute. 
                Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDeviceConfigurationTemperature(System.String,System.Double)">
             <summary>
            Specifies the temperature, in degrees Celsius, that NI-RFSA uses to calculate the device configuration settings. 
                NOTE: For most applications, you can choose not to set this property, so NI-RFSA uses the device    temperature to calculate best attenuation settings. Set this property only if you want NI-RFSA    to maintain the same device configuration settings from acquisition to acquisition, independent  of device temperature changes.
                Units:  degrees C 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDeviceConfigurationTemperature(System.String,System.Double@)">
             <summary>
            Specifies the temperature, in degrees Celsius, that NI-RFSA uses to calculate the device configuration settings. 
                NOTE: For most applications, you can choose not to set this property, so NI-RFSA uses the device    temperature to calculate best attenuation settings. Set this property only if you want NI-RFSA    to maintain the same device configuration settings from acquisition to acquisition, independent  of device temperature changes.
                Units:  degrees C 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDeviceInstantaneousBandwidth(System.String,System.Double)">
             <summary>
            Specifies the instantaneous bandwidth of the device. The instantaneous bandwidth is    the effective real-time bandwidth of the signal path for your configuration. The value    is expressed in hertz (Hz). 
                NI 5661-The NI 5600 RF downconverter bandwidth is 20 MHz.
                NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the downconverter center    frequency you use. Refer to the NI 5601 RF downconverter overview for more information about    instantaneous bandwidth.
                NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency ranges that    correspond with different instantaneous bandwidths. For example, you cannot configure a multispan acquisition that acquires one     span from 110 MHz to 120 MHz and a second from 120 MHz to 130 MHz because the bandwidths that correspond with each span are    different (10 MHz and 20 MHz, respectively). 
                NI 5665-Your maximum allowed instantaneous bandwidth is independent of the downconverter center frequency.    Refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth.
                NOTE: If you set the device instantaneous bandwidth for the NI 5603/5605/5665 to a value less than 300 kHz, NI-RFSA uses the 300 kHz IF filter.    For the NI 5605, if you set the device instantaneous bandwidth to a value greater than 300 kHz, NI-RFSA uses the 5 MHz IF filter.    When used with an external digitizer, the NI 5603 and the low band signal path of the NI 5605 provide a nominal 80 MHz bandwidth at -6 dB.    At frequencies greater than 3.6 GHz, the NI 5605 provides a nominal bandwidth of 40 MHz at -6 dB with the preselector (YIG-tuned filter) enabled.
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDeviceInstantaneousBandwidth(System.String,System.Double@)">
             <summary>
            Specifies the instantaneous bandwidth of the device. The instantaneous bandwidth is    the effective real-time bandwidth of the signal path for your configuration. The value    is expressed in hertz (Hz). 
                NI 5661-The NI 5600 RF downconverter bandwidth is 20 MHz.
                NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the downconverter center    frequency you use. Refer to the NI 5601 RF downconverter overview for more information about    instantaneous bandwidth.
                NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency ranges that    correspond with different instantaneous bandwidths. For example, you cannot configure a multispan acquisition that acquires one     span from 110 MHz to 120 MHz and a second from 120 MHz to 130 MHz because the bandwidths that correspond with each span are    different (10 MHz and 20 MHz, respectively). 
                NI 5665-Your maximum allowed instantaneous bandwidth is independent of the downconverter center frequency.    Refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth.
                NOTE: If you set the device instantaneous bandwidth for the NI 5603/5605/5665 to a value less than 300 kHz, NI-RFSA uses the 300 kHz IF filter.    For the NI 5605, if you set the device instantaneous bandwidth to a value greater than 300 kHz, NI-RFSA uses the 5 MHz IF filter.    When used with an external digitizer, the NI 5603 and the low band signal path of the NI 5605 provide a nominal 80 MHz bandwidth at -6 dB.    At frequencies greater than 3.6 GHz, the NI 5605 provides a nominal bandwidth of 40 MHz at -6 dB with the preselector (YIG-tuned filter) enabled.
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDeviceTemperature(System.String,System.Double@)">
             <summary>
            Returns the current temperature, in degrees Celsius, of the RF downconverter module. 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalEdgeAdvanceTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the Advance trigger. This attribute is used    only when the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalEdgeAdvanceTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the Advance trigger. This attribute is used    only when the NIRFSA_ATTR_ADVANCE_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalEdgeArmRefTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the digital edge Arm Reference trigger. This attribute    is used only when the NIRFSA_ATTR_ARM_REF_TRIGGER_TYPE attribute    is set to NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalEdgeArmRefTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the digital edge Arm Reference trigger. This attribute    is used only when the NIRFSA_ATTR_ARM_REF_TRIGGER_TYPE attribute    is set to NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalEdgeRefTriggerEdge(System.String,System.Int32)">
             <summary>
            Specifies the active edge for the Reference trigger. This attribute is used only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.   Default Value: NIRFSA_VAL_RISING_EDGE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalEdgeRefTriggerEdge(System.String,System.Int32@)">
             <summary>
            Specifies the active edge for the Reference trigger. This attribute is used only    when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.   Default Value: NIRFSA_VAL_RISING_EDGE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalEdgeRefTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the digital edge Reference trigger. This    attribute is used only when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set    to NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalEdgeRefTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the digital edge Reference trigger. This    attribute is used only when the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute is set    to NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalEdgeStartTriggerEdge(System.String,System.Int32)">
             <summary>
            Specifies the active edge for the Start trigger. This attribute is used only    when NIRFSA_ATTR_START_TRIGGER_TYPE is set to NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: NIRFSA_VAL_RISING_EDGE 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalEdgeStartTriggerEdge(System.String,System.Int32@)">
             <summary>
            Specifies the active edge for the Start trigger. This attribute is used only    when NIRFSA_ATTR_START_TRIGGER_TYPE is set to NIRFSA_VAL_DIGITAL_EDGE. 
                Default Value: NIRFSA_VAL_RISING_EDGE 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalEdgeStartTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the Start trigger. This attribute is used    only when the NIRFSA_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalEdgeStartTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the Start trigger. This attribute is used    only when the NIRFSA_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSA_VAL_DIGITAL_EDGE.
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalIfEqualizationEnabled(System.String,System.Boolean)">
             <summary>
            Enables use of the digital equalization filter for the RF downconverter.
                NOTE: Digital IF Equalization is supported only with a 150 MHz clock. You    cannot set this attribute    to VI_TRUE if the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    is set to NIRFSA_VAL_LO_REF_CLK_STR.
                NOTE: The NI 5665 enables digital IF equalization by default if you set the    acquisition mode to NIRFSA_VAL_SPECTRUM    using the niRFSA_ConfigureAcquisitionType function. If you set the    acquisition mode to NIRFSA_VAL_IQ,    digital IF equalization is enabled for instantaneous bandwidths larger    than 300 kHz. You cannot perform digital    IF equalization for instantaneous bandwidths less than or equal to 300 kHz.
                Default Value: VI_TRUE, if the device configuration is supported. 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalIfEqualizationEnabled(System.String,System.Boolean@)">
             <summary>
            Enables use of the digital equalization filter for the RF downconverter.
                NOTE: Digital IF Equalization is supported only with a 150 MHz clock. You    cannot set this attribute    to VI_TRUE if the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    is set to NIRFSA_VAL_LO_REF_CLK_STR.
                NOTE: The NI 5665 enables digital IF equalization by default if you set the    acquisition mode to NIRFSA_VAL_SPECTRUM    using the niRFSA_ConfigureAcquisitionType function. If you set the    acquisition mode to NIRFSA_VAL_IQ,    digital IF equalization is enabled for instantaneous bandwidths larger    than 300 kHz. You cannot perform digital    IF equalization for instantaneous bandwidths less than or equal to 300 kHz.
                Default Value: VI_TRUE, if the device configuration is supported. 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitizerDitherEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether dithering is enabled on the digitizer. 
                Dithering adds band-limited noise in the analog signal path to help reduce    the quantization effects    of the A/D converter and improve spectral performance. On the NI PXIe-5622,    this out-of-band noise is    added at low frequencies up to approximately 12 MHz.
                When you enable dithering, the maximum signal level is reduced by up to 3 dB.    This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore,    you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal    levels up to +7    dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz,  dithering     should be disabled to eliminate residual leakage of the dither signal into the    lower frequencies of the IF passband, which starts at 12.5 MHz and ends at 62.5 MHz.    This leakage can slightly raise the noise floor in the lower frequencies, thus    degrading the performance in high-sensitivity applications. When taking spectral    measurements, this leakage can appear also as a wide, low-amplitude signal    near 12.5 MHz and 62.5 MHz. The width and amplitude of the signal depends on your    resolution bandwidth and the type of time-domain window you apply to your FFT. 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitizerDitherEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether dithering is enabled on the digitizer. 
                Dithering adds band-limited noise in the analog signal path to help reduce    the quantization effects    of the A/D converter and improve spectral performance. On the NI PXIe-5622,    this out-of-band noise is    added at low frequencies up to approximately 12 MHz.
                When you enable dithering, the maximum signal level is reduced by up to 3 dB.    This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore,    you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal    levels up to +7    dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz,  dithering     should be disabled to eliminate residual leakage of the dither signal into the    lower frequencies of the IF passband, which starts at 12.5 MHz and ends at 62.5 MHz.    This leakage can slightly raise the noise floor in the lower frequencies, thus    degrading the performance in high-sensitivity applications. When taking spectral    measurements, this leakage can appear also as a wide, low-amplitude signal    near 12.5 MHz and 62.5 MHz. The width and amplitude of the signal depends on your    resolution bandwidth and the type of time-domain window you apply to your FFT. 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitizerSampleClockTimebaseRate(System.String,System.Double)">
             <summary>
            Specifies the frequency, in hertz (Hz), of the external clock used as the timebase    source if you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to an external source, such as NIRFSA_VAL_CLK_IN_STR or NIRFSA_VAL_LO_REF_CLK_STR. 
                NI 5661-If this attribute is set to a value less than 60 MHz, signals at frequencies    just above the 20 MHz passband of the downconverter may be aliased back into the    passband. This aliasing occurs because the IF frequency of the downconverter is 15 MHz,    and the upper end of the passband is 25 MHz. At sampling rates below 60 MHz, the    Nyquist frequency is close to the end of the passband and creates aliases that are    not filtered effectively by the downconverter.
                NI 5663/5663E/5665-The NI 5663/5663E/5665 supports only a 150 MHz external clock. 
                Units: hertz (Hz) 
                Default Value: 150 MHz 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitizerSampleClockTimebaseRate(System.String,System.Double@)">
             <summary>
            Specifies the frequency, in hertz (Hz), of the external clock used as the timebase    source if you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to an external source, such as NIRFSA_VAL_CLK_IN_STR or NIRFSA_VAL_LO_REF_CLK_STR. 
                NI 5661-If this attribute is set to a value less than 60 MHz, signals at frequencies    just above the 20 MHz passband of the downconverter may be aliased back into the    passband. This aliasing occurs because the IF frequency of the downconverter is 15 MHz,    and the upper end of the passband is 25 MHz. At sampling rates below 60 MHz, the    Nyquist frequency is close to the end of the passband and creates aliases that are    not filtered effectively by the downconverter.
                NI 5663/5663E/5665-The NI 5663/5663E/5665 supports only a 150 MHz external clock. 
                Units: hertz (Hz) 
                Default Value: 150 MHz 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitizerSampleClockTimebaseSource(System.String,System.String)">
             <summary>
            Specifies the source of the Sample clock timebase, which is the timebase used    to control waveform sampling.
                Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
                Supported Devices: NI 5661/5663/5663E/5665 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitizerSampleClockTimebaseSource(System.String,System.String@)">
             <summary>
            Specifies the source of the Sample clock timebase, which is the timebase used    to control waveform sampling.
                Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
                Supported Devices: NI 5661/5663/5663E/5665 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqAnalogEdgeRefTrigger(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqAnalogEdgeRefTrigger(System.String,System.String@)">
            <summary>
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitizerTemperature(System.String,System.Double@)">
             <summary>
            Returns the current temperature, in degrees Celsius, of the digitizer module. 
                Default Value: N/A 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitizerVerticalRange(System.String,System.Double)">
             <summary>
            Specifies the vertical range of the digitizer. The vertical range is defined    as the absolute value of the input range for a channel. The default vertical range works    for all device configurations. This attribute can be used to optimize performance if you    know the signal level at the digitizer input terminal is low.
                NOTE: For most applications, NI-RFSA selects an appropriate value for this attribute. 
                This value is expressed in volts. For example, to acquire a sine wave that    spans between -0.05 V and +0.05 V, set this attribute to 1.0. 
                Default Value: 1.0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitizerVerticalRange(System.String,System.Double@)">
             <summary>
            Specifies the vertical range of the digitizer. The vertical range is defined    as the absolute value of the input range for a channel. The default vertical range works    for all device configurations. This attribute can be used to optimize performance if you    know the signal level at the digitizer input terminal is low.
                NOTE: For most applications, NI-RFSA selects an appropriate value for this attribute. 
                This value is expressed in volts. For example, to acquire a sine wave that    spans between -0.05 V and +0.05 V, set this attribute to 1.0. 
                Default Value: 1.0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDoneEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/EndOfRecordEvent, where DigitizerName is the name associated with your digitizer module in MAX.  
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDownconverterCenterFrequency(System.String,System.Double)">
             <summary>
            Enables in-band retuning and specifies the current frequency, in hertz (Hz),    of the downconverter.     If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid.    To disable in-band retuning, reset the attribute or call the call the niRFSA_ResetDevice function. 
                After you set this attribute, the downconverter is locked to that frequency    until the value is changed    or the attribute is reset. Locking the downconverter to a fixed value allows    frequencies within the    instantaneous bandwidth of the converter to be measured with minimal    overhead, decreasing tuning time. 
                Valid Values: Any supported tuning frequency of the device
                Default Value: The carrier frequency or spectrum center frequency.    NI-RFSA sets this attribute to the default value based on whichever frequency setting is applicable. 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDownconverterCenterFrequency(System.String,System.Double@)">
             <summary>
            Enables in-band retuning and specifies the current frequency, in hertz (Hz),    of the downconverter.     If you set this attribute, any measurements outside the instantaneous bandwidth    of the device are invalid.    To disable in-band retuning, reset the attribute or call the call the niRFSA_ResetDevice function. 
                After you set this attribute, the downconverter is locked to that frequency    until the value is changed    or the attribute is reset. Locking the downconverter to a fixed value allows    frequencies within the    instantaneous bandwidth of the converter to be measured with minimal    overhead, decreasing tuning time. 
                Valid Values: Any supported tuning frequency of the device
                Default Value: The carrier frequency or spectrum center frequency.    NI-RFSA sets this attribute to the default value based on whichever frequency setting is applicable. 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDownconverterGain(System.String,System.Double)">
             <summary>
            Returns the RF downconverter net signal gain at current NI-RFSA settings and    temperature. NI-RFSA takes the    value of this attribute into account when it reads I/Q data and spectrum data. 
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDownconverterGain(System.String,System.Double@)">
             <summary>
            Returns the RF downconverter net signal gain at current NI-RFSA settings and    temperature. NI-RFSA takes the    value of this attribute into account when it reads I/Q data and spectrum data. 
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665      
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDownconverterLoopBandwidth(System.String,System.Int32)">
             <summary>
            Configures the loop bandwidth of the RF downconverter tuning PLLs. To    set this attribute, the NI-RFSA device must be in the Configuration state.
                NI 5600/5661-For signal bandwidths greater than 10 MHz, NIRFSA_VAL_wide is the only    value supported for this attribute.
                NI 5601/5663/5663E- The NI 5601 does not support the NIRFSA_VAL_MEDIUM value.This attribute is not supported if you are using an external LO. 
                Default Values: 
                NI 5600-NIRFSA_VAL_WIDE 
                NI 5601-NIRFSA_VAL_NARROW 
                Supported Devices: NI 5600/5601 (external digitizer mode), NI 5661/5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDownconverterLoopBandwidth(System.String,System.Int32@)">
             <summary>
            Configures the loop bandwidth of the RF downconverter tuning PLLs. To    set this attribute, the NI-RFSA device must be in the Configuration state.
                NI 5600/5661-For signal bandwidths greater than 10 MHz, NIRFSA_VAL_wide is the only    value supported for this attribute.
                NI 5601/5663/5663E- The NI 5601 does not support the NIRFSA_VAL_MEDIUM value.This attribute is not supported if you are using an external LO. 
                Default Values: 
                NI 5600-NIRFSA_VAL_WIDE 
                NI 5601-NIRFSA_VAL_NARROW 
                Supported Devices: NI 5600/5601 (external digitizer mode), NI 5661/5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDriverSetup(System.String,System.String@)">
             <summary>
            The DriverSetup string is used to set the initial values for attributes that    are specific to NI-RFSA. The format of the DriverSetup string is:
                Tag: Value
                Tag is the name of the DriverSetup string attribute. Value is the value set to    the attribute. To set multiple attributes, separate their assignments with a    semicolon.
                The DriverSetup string can include the following tags:
                NI 5661/5663/5663E/5665-Digitizer-Specifies the resource name of the digitizer to use for    this session. If this Driver Setup tag is not specified, the resource name for the    downconverter associated in MAX is used. An example of a Driver Setup string    is DriverSetup=Digitizer:pxi1slot4. If you want to use the NI 5600/5601/5603 with an    external digitizer, use the following Driver Setup tag:    DriverSetup=Digitizer:<external></external>.
                NI 5663/5663E/5665-LO source-Specifies the resource name of the LO source to use for this    session. If you want to use the NI 5601 with an LO other than the NI 5652 or use the    NI 5603 with an LO other than the NI 5653, use the following Driver Setup    tag: DriverSetup=LO:<external></external>.
                Refer to the niRFSA_InitWithOptions function for additional information about the    optionString parameter. Refer to the getting started guide for your device for information    about configuring your device in MAX. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetEnableFractionalResampling(System.String,System.Boolean)">
             <summary>
            Specifies whether fractional resampling is enabled on the digitizer. 
                Dithering adds band-limited noise in the analog signal path to help reduce the    quantization effects of the A/D converter and improve spectral performance.    On the NI PXIe-5622, this out-of-band noise is added at low frequencies up to approximately 12 MHz.
                When you enable dithering, the maximum signal level is reduced by up to 3 dB. This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore, you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal levels up to    +7 dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz, dithering should be disabled    to eliminate residual leakage of the dither signal into the lower frequencies of the IF passband, which    starts at 12.5 MHz and ends at 62.5 MHz. This leakage can slightly raise the noise floor in the lower    frequencies, thus degrading the performance in high-sensitivity applications. When taking spectral measurements,    this leakage can appear also as a wide, low-amplitude signal near 12.5 MHz and 62.5 MHz. The width and    amplitude of the signal depends on your resolution bandwidth and the type of time-domain window you apply to your FFT.
                Default Value: VI_TRUE 
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetEnableFractionalResampling(System.String,System.Boolean@)">
             <summary>
            Specifies whether fractional resampling is enabled on the digitizer. 
                Dithering adds band-limited noise in the analog signal path to help reduce the    quantization effects of the A/D converter and improve spectral performance.    On the NI PXIe-5622, this out-of-band noise is added at low frequencies up to approximately 12 MHz.
                When you enable dithering, the maximum signal level is reduced by up to 3 dB. This signal level reduction    is accounted for in the nominal input ranges of the NI PXIe-5622. Therefore, you can overrange the input    by up to 3 dB with dither disabled. For example, the +4 dBm input range can handle signal levels up to    +7 dBm with dither disabled. For wider bandwidth acquisitions, such as 40 MHz, dithering should be disabled    to eliminate residual leakage of the dither signal into the lower frequencies of the IF passband, which    starts at 12.5 MHz and ends at 62.5 MHz. This leakage can slightly raise the noise floor in the lower    frequencies, thus degrading the performance in high-sensitivity applications. When taking spectral measurements,    this leakage can appear also as a wide, low-amplitude signal near 12.5 MHz and 62.5 MHz. The width and    amplitude of the signal depends on your resolution bandwidth and the type of time-domain window you apply to your FFT.
                Default Value: VI_TRUE 
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetEndOfRecordEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/EndOfRecordEvent, where DigitizerName is the name associated with your digitizer module in MAX.  
                Supported Devices: NI 5663/5663E/5665   	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetReconfigurationTriggerSource(System.String,System.String)">
             <summary>
            This attribute is not for customer use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetReconfigurationTriggerSource(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedAdvanceTriggerOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the exported Advance trigger. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedAdvanceTriggerOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the exported Advance trigger. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedDoneEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the Done event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedDoneEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the Done event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedEndOfRecordEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the End of Record event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedEndOfRecordEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the End of Record event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedReadyForAdvanceEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the Ready for Advance event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedReadyForAdvanceEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the Ready for Advance event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedReadyForRefEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the Ready for Reference event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedReadyForRefEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the Ready for Reference event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedReadyForStartEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the Ready for Start event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedReadyForStartEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the Ready for Start event. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedRefClockOutputTerminal(System.String,System.String)">
             <summary>
            Specifies a comma-separated list of the terminals at which to export the Reference clock. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedRefClockOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies a comma-separated list of the terminals at which to export the Reference clock. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedRefTriggerOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the exported Reference trigger. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedRefTriggerOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the exported Reference trigger. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExportedStartTriggerOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for the exported Start trigger.
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExportedStartTriggerOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for the exported Start trigger.
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetExternalGain(System.String,System.Double)">
             <summary>
            Specifies the gain, in dB, of a switch (or cable) connected before the RF IN    connector of an NI-RFSA device. When you set this attribute, and the     NIRFSA_ATTR_ATTENUATION and NIRFSA_ATTR_IF_ATTENUATION values,    NI-RFSA calculates appropriate attenuator settings based on the value of this attribute    and the value of the NIRFSA_ATTR_REFERENCE_LEVEL attribute. In this case, NI-RFSA interprets    the reference level as the maximum expected power level of the signal at the input    of the external gain device. For more information about attenuation, refer to the    Attenuation and Signal Levels topic for your device in    the NI RF Vector Signal Analyzers Help. 
                With this attribute set, NI-RFSA reads the NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_LEVEL    attribute value as the power level at the input of the external gain device at    which the NI-RFSA device should trigger.
                 Negative values indicate attenuation. The default value is 0. 
                Valid Values: -INF to +INF 
                Units: dB 
                Default Value: 0 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetExternalGain(System.String,System.Double@)">
             <summary>
            Specifies the gain, in dB, of a switch (or cable) connected before the RF IN    connector of an NI-RFSA device. When you set this attribute, and the     NIRFSA_ATTR_ATTENUATION and NIRFSA_ATTR_IF_ATTENUATION values,    NI-RFSA calculates appropriate attenuator settings based on the value of this attribute    and the value of the NIRFSA_ATTR_REFERENCE_LEVEL attribute. In this case, NI-RFSA interprets    the reference level as the maximum expected power level of the signal at the input    of the external gain device. For more information about attenuation, refer to the    Attenuation and Signal Levels topic for your device in    the NI RF Vector Signal Analyzers Help. 
                With this attribute set, NI-RFSA reads the NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_LEVEL    attribute value as the power level at the input of the external gain device at    which the NI-RFSA device should trigger.
                 Negative values indicate attenuation. The default value is 0. 
                Valid Values: -INF to +INF 
                Units: dB 
                Default Value: 0 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetFetchOffset(System.String,System.Int64)">
             <summary>
            Specifies the offset relative to the position specified by the    NIRFSA_ATTR_FETCH_RELATIVE_TO attribute from which to start fetching data.    Offset can be a positive or negative value. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFetchOffset(System.String,System.Int64@)">
             <summary>
            Specifies the offset relative to the position specified by the    NIRFSA_ATTR_FETCH_RELATIVE_TO attribute from which to start fetching data.    Offset can be a positive or negative value. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetFetchRelativeTo(System.String,System.Int32)">
             <summary>
            Specifies the reference location within the acquired record from which to    begin fetching. 
                 Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFetchRelativeTo(System.String,System.Int32@)">
             <summary>
            Specifies the reference location within the acquired record from which to    begin fetching. 
                 Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFftSize(System.String,System.Int32@)">
             <summary>
            Returns the size of the fast Fourier transform (FFT). 
                Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFftWindowSize(System.String,System.Int32@)">
             <summary>
            Returns the size of the window used in the fast Fourier transform (FFT). 
                Default Value: N/A 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetFftWindowType(System.String,System.Int32)">
             <summary>
            Specifies the time-domain window type. 
                Default Value: NIRFSA_VAL_7_TERM_BLACKMAN_HARRIS 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFftWindowType(System.String,System.Int32@)">
             <summary>
            Specifies the time-domain window type. 
                Default Value: NIRFSA_VAL_7_TERM_BLACKMAN_HARRIS 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetFrequencySettling(System.String,System.Double)">
             <summary>
            Specifies the value used for LO frequency settling. The units and interpretation    for this scalar value are specified using the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS    attribute. This attribute is not supported if you are using an external LO. 
                The valid values for this attribute depend on the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
                Valid Values:
                NIRFSA_VAL_FSU_TIME_AFTER_LOCK:
                2 microseconds* to 80 milliseconds, resolution of approximately 2 microseconds (NI 5663/5663E)
                4 microseconds to 80 milliseconds, resolution of approximately 4 microseconds (NI 5665) 
                NIRFSA_VAL_FSU_TIME_AFTER_IO:
                0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5663/5663E) 
                0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5665) 
                NIRFSA_VAL_FSU_PPM:
                1.0, 0.1, 0.01(NI 5663/5663E) 
                1.0, 0.1, 0.01 (NI 5665) 
                *If the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute is set to NIRFSA_VAL_FSU_TIME_AFTER_LOCK and the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH     attribute is set to NIRFSA_VAL_NARROW, NI recommends a minimum settling time of 128 microseconds to ensure that the PLL lock stabilizes.    If the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH is set to NIRFSA_VAL_WIDE, NI recommends a minimum settling time of 16 microseconds. 
                **When in RF list mode, the valid values for NIRFSA_VAL_FSU_TIME_AFTER_IO are 0 microseconds to 50 milliseconds. 
                Default Value: 0.1 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFrequencySettling(System.String,System.Double@)">
             <summary>
            Specifies the value used for LO frequency settling. The units and interpretation    for this scalar value are specified using the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS    attribute. This attribute is not supported if you are using an external LO. 
                The valid values for this attribute depend on the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
                Valid Values:
                NIRFSA_VAL_FSU_TIME_AFTER_LOCK:
                2 microseconds* to 80 milliseconds, resolution of approximately 2 microseconds (NI 5663/5663E)
                4 microseconds to 80 milliseconds, resolution of approximately 4 microseconds (NI 5665) 
                NIRFSA_VAL_FSU_TIME_AFTER_IO:
                0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5663/5663E) 
                0 microseconds to 80 milliseconds**, resolution of 1 microsecond (NI 5665) 
                NIRFSA_VAL_FSU_PPM:
                1.0, 0.1, 0.01(NI 5663/5663E) 
                1.0, 0.1, 0.01 (NI 5665) 
                *If the NIRFSA_ATTR_FREQUENCY_SETTLING_UNITS attribute is set to NIRFSA_VAL_FSU_TIME_AFTER_LOCK and the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH     attribute is set to NIRFSA_VAL_NARROW, NI recommends a minimum settling time of 128 microseconds to ensure that the PLL lock stabilizes.    If the NIRFSA_ATTR_DOWNCONVERTER_LOOP_BANDWIDTH is set to NIRFSA_VAL_WIDE, NI recommends a minimum settling time of 16 microseconds. 
                **When in RF list mode, the valid values for NIRFSA_VAL_FSU_TIME_AFTER_IO are 0 microseconds to 50 milliseconds. 
                Default Value: 0.1 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetFrequencySettlingUnits(System.String,System.Int32)">
             <summary>
            Specifies the delay duration units and interpretation for LO settling. Specify    the actual settling value using the NIRFSA_ATTR_FREQUENCY_SETTLING attribute.    This attribute is not supported if you are using an external LO. 
                Default Value: NIRFSA_VAL_FSU_PPM 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFrequencySettlingUnits(System.String,System.Int32@)">
             <summary>
            Specifies the delay duration units and interpretation for LO settling. Specify    the actual settling value using the NIRFSA_ATTR_FREQUENCY_SETTLING attribute.    This attribute is not supported if you are using an external LO. 
                Default Value: NIRFSA_VAL_FSU_PPM 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIf1AttenValue(System.String,System.Double)">
             <summary>
            Specifies the IF1 attenuation, in dB. The device IF1 attenuator is set to this nominal value.    Use this attribute, along with the NIRFSA_ATTR_IF2_ATTEN_VALUE attribute, when you    set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
                Valid Values: 0 to 15 
                Units: dB 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIf1AttenValue(System.String,System.Double@)">
             <summary>
            Specifies the IF1 attenuation, in dB. The device IF1 attenuator is set to this nominal value.    Use this attribute, along with the NIRFSA_ATTR_IF2_ATTEN_VALUE attribute, when you    set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
                Valid Values: 0 to 15 
                Units: dB 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIf2AttenValue(System.String,System.Double)">
             <summary>
            Specifies the IF2 attenuation, in dB. The device IF2 attenuator is set to this nominal value.   Use this attribute, along with the NIRFSA_ATTR_IF1_ATTEN_VALUE attribute, when you   set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
                Valid Values: 0 to 15 
                Units: dB 
                Default Value: N/A  
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIf2AttenValue(System.String,System.Double@)">
             <summary>
            Specifies the IF2 attenuation, in dB. The device IF2 attenuator is set to this nominal value.   Use this attribute, along with the NIRFSA_ATTR_IF1_ATTEN_VALUE attribute, when you   set the NIRFSA_ATTR_IF_FILTER attribute to NIRFSA_VAL_BYPASS. 
                Valid Values: 0 to 15 
                Units: dB 
                Default Value: N/A  
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIfAttenuation(System.String,System.Double)">
             <summary>
            Configures the device attenuation to a value that has the actual calibrated IF attenuation    closest to the desired value. 
                Valid Values: 0 to 30 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfAttenuation(System.String,System.Double@)">
             <summary>
            Configures the device attenuation to a value that has the actual calibrated IF attenuation    closest to the desired value. 
                Valid Values: 0 to 30 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIfFilter(System.String,System.Int32)">
             <summary>
            Specifies the desired IF filter path, regardless of the RF band chosen by NI-RFSA.
                Default Value: N/A 
                Supported Devices: NI 5601        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfFilter(System.String,System.Int32@)">
             <summary>
            Specifies the desired IF filter path, regardless of the RF band chosen by NI-RFSA.
                Default Value: N/A 
                Supported Devices: NI 5601        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfOutputFrequency(System.String,System.Double@)">
             <summary>
            Returns the center frequency of the IF output that corresponds to    the configured RF center frequency.
                The downconverter translates RF input frequency to the IF output    frequency by mixing it with the LO signal.    The following values are the nominal values for the IF frequency:
                NI 5600 15 MHz
                NI 5601 53 MHz or 187.5 MHz
                NI 5603 187.5 MHz or 199 MHz
                However, the coarse nature of the LO settings can cause the    downconverter to be unable to tune to the exact    LO frequency that would produce the nominal IF output. Any coercion    in the actual LO frequency results in the    IF output frequency being slightly off from the nominal value.
                Additionally, if you use the NIRFSA_ATTR_DOWNCONVERTER_CENTER_FREQUENCY    and NIRFSA_ATTR_LO_FREQUENCY attributes    to program the downconverter, then the IF output frequency could be very    different from the nominal value.    NI-RFSA adjusts the acquired spectrum or I/Q data for the difference between    nominal and actual IF output    frequency. If you use an external digitizer with the NI RF downconverter,    use this attribute to specify the    actual IF output frequency. 
                 Default Value: N/A 
                Supported Devices:NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIfOutputPowerLevel(System.String,System.Double)">
             <summary>
            Specifies the level of the IF signal leaving the downconverter module, in dBm. Use this attribute to    increase or decrease the nominal IF signal output level to achieve better measurement results.    The default is -6dBm. 
                You cannot set the NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at the same time. 
                Units: dBm 
                Default Value: -6 dBm 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfOutputPowerLevel(System.String,System.Double@)">
             <summary>
            Specifies the level of the IF signal leaving the downconverter module, in dBm. Use this attribute to    increase or decrease the nominal IF signal output level to achieve better measurement results.    The default is -6dBm. 
                You cannot set the NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at the same time. 
                Units: dBm 
                Default Value: -6 dBm 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIfOutputPowerLevelOffset(System.String,System.Double)">
             <summary>
            Specifies the number of dB by which to adjust the default IF output power level. This    attribute does    not depend on absolute IF output power levels, so you can use it to adjust    the IF output power level    on all NI-RFSA devices without knowing the exact default value. Use this attribute to increase or    decrease the nominal output level to achieve better measurement results. The    default value for the offset    is 0 dB, which results in an IF OUT output power level of -6 dBm. 
                You cannot set the    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at    the same time. 
                Units: dB 
                Default Value: 0 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIfOutputPowerLevelOffset(System.String,System.Double@)">
             <summary>
            Specifies the number of dB by which to adjust the default IF output power level. This    attribute does    not depend on absolute IF output power levels, so you can use it to adjust    the IF output power level    on all NI-RFSA devices without knowing the exact default value. Use this attribute to increase or    decrease the nominal output level to achieve better measurement results. The    default value for the offset    is 0 dB, which results in an IF OUT output power level of -6 dBm. 
                You cannot set the    NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL and NIRFSA_ATTR_IF_OUTPUT_POWER_LEVEL_OFFSET attributes at    the same time. 
                Units: dB 
                Default Value: 0 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665       
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInstrumentFirmwareRevision(System.String,System.String@)">
             <summary>
            Returns a string that contains the firmware revision information for the    NI-RFSA device you are currently using.
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInstrumentManufacturer(System.String,System.String@)">
             <summary>
            Returns a string that contains the name of the manufacturer for the NI-RFSA device you are    currently using.
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInstrumentModel(System.String,System.String@)">
             <summary>
            Returns a string that contains the model number or name of the NI-RFSA    device that you are currently using.
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetInterchangeCheck(System.String,System.Boolean)">
             <summary>
            Specifies whether to perform interchangeability checking and retrieve    interchangeability warnings.
                NOTE: Interchangeability check is unsupported.
                Default Value: VI_FALSE  
                Supported Devices: None         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInterchangeCheck(System.String,System.Boolean@)">
             <summary>
            Specifies whether to perform interchangeability checking and retrieve    interchangeability warnings.
                NOTE: Interchangeability check is unsupported.
                Default Value: VI_FALSE  
                Supported Devices: None         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIoResourceDescriptor(System.String,System.String@)">
             <summary>
            Indicates the resource name NI-RFSA uses to identify the physical device.    If you initialize NI-RFSA with a logical name, this attribute contains the resource    name that corresponds to the entry in the IVI Configuration Utility. 
                If you initialize NI-RFSA with the resource name, this attribute    contains that value.
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqCarrierFrequency(System.String,System.Double)">
             <summary>
            Specifies the expected carrier frequency of the incoming signal for demodulation. The    RF vector signal analyzer tunes to this frequency. NI-RFSA may coerce this value    based on hardware settings and the RF downconverter specifications. 
                Units: hertz (Hz) 
                Default Value: 100 MHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqCarrierFrequency(System.String,System.Double@)">
             <summary>
            Specifies the expected carrier frequency of the incoming signal for demodulation. The    RF vector signal analyzer tunes to this frequency. NI-RFSA may coerce this value    based on hardware settings and the RF downconverter specifications. 
                Units: hertz (Hz) 
                Default Value: 100 MHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqPowerEdgeRefTriggerLevel(System.String,System.Double)">
             <summary>
            Specifies the power level, in dBm, at which the device triggers. The device    asserts the trigger when the signal crosses the level specified by the value    of this attribute, taking into consideration the specified slope. If you are    using external gain, refer to the NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information    about how this attribute affects the I/Q power edge trigger level. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqPowerEdgeRefTriggerLevel(System.String,System.Double@)">
             <summary>
            Specifies the power level, in dBm, at which the device triggers. The device    asserts the trigger when the signal crosses the level specified by the value    of this attribute, taking into consideration the specified slope. If you are    using external gain, refer to the NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information    about how this attribute affects the I/Q power edge trigger level. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqPowerEdgeRefTriggerSlope(System.String,System.Int32)">
             <summary>
            Specifies whether the device asserts the trigger when the signal power is rising or    falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to    NIRFSA_VAL_IQ_POWER_EDGE, the device asserts the trigger when the signal power exceeds    the specified level with the slope you specify. 
                Default Value: NIRFSA_VAL_RISING_SLOPE 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqPowerEdgeRefTriggerSlope(System.String,System.Int32@)">
             <summary>
            Specifies whether the device asserts the trigger when the signal power is rising or    falling. When you set the NIRFSA_ATTR_REF_TRIGGER_TYPE attribute to    NIRFSA_VAL_IQ_POWER_EDGE, the device asserts the trigger when the signal power exceeds    the specified level with the slope you specify. 
                Default Value: NIRFSA_VAL_RISING_SLOPE 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqPowerEdgeRefTriggerSource(System.String,System.String)">
             <summary>
            Specifies the channel from which the device monitors the trigger. NI-RFSA    currently supports only 0    as the value of this attribute. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqPowerEdgeRefTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the channel from which the device monitors the trigger. NI-RFSA    currently supports only 0    as the value of this attribute. 
                Default Value: 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqRate(System.String,System.Double)">
             <summary>
            Specifies the I/Q rate for the acquisition The value is expressed in samples per second (S/s). 
                Refer to the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute for more information about device specific instantaneous    bandwidth limits. You can also refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth device specifications.
                NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default. At I/Q rates above 50 MS/s, the dither noise can affect    phase coherency performance and leak into the lower frequencies and the upper frequencies of the IF passband.    Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more information about dithering. 
                For the NI 5663/5663E/5665, when you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to NIRFSA_VAL_ONBOARD_CLOCK_STR, the downconverter instantaneous bandwidth is greater than or equal to the    coerced I/Q rate times 0.8. For the NI 5665, the actual signal bandwidth is further limited by the combination of the    chosen IF filter and anti-aliasing filter.
                NI 5661-You should not need to configure an I/Q rate higher than 25 megasamples per second (MS/s) because    the NI 5600 RF downconverter bandwidth is 20 MHz. If you configure a higher I/Q rate, you may see aliasing    effects at negative frequencies because the IF frequency of the NI 5600 is 15 MHz.
                NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the I/Q carrier frequency you use.    Refer to the NI 5601 RF downconverter overview for more information about instantaneous bandwidth. 
                NI 5665-Your maximum allowed instantaneous bandwidth depends on the downconverter center frequency if you have enabled the preselector (YIG-tuned filter). 
                Units: S/s 
                Default Value: 1 MHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqRate(System.String,System.Double@)">
             <summary>
            Specifies the I/Q rate for the acquisition The value is expressed in samples per second (S/s). 
                Refer to the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute for more information about device specific instantaneous    bandwidth limits. You can also refer to the NI PXIe-5665 Specifications for more information about instantaneous bandwidth device specifications.
                NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default. At I/Q rates above 50 MS/s, the dither noise can affect    phase coherency performance and leak into the lower frequencies and the upper frequencies of the IF passband.    Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more information about dithering. 
                For the NI 5663/5663E/5665, when you set the NIRFSA_ATTR_DIGITIZER_SAMPLE_CLOCK_TIMEBASE_SOURCE attribute    to NIRFSA_VAL_ONBOARD_CLOCK_STR, the downconverter instantaneous bandwidth is greater than or equal to the    coerced I/Q rate times 0.8. For the NI 5665, the actual signal bandwidth is further limited by the combination of the    chosen IF filter and anti-aliasing filter.
                NI 5661-You should not need to configure an I/Q rate higher than 25 megasamples per second (MS/s) because    the NI 5600 RF downconverter bandwidth is 20 MHz. If you configure a higher I/Q rate, you may see aliasing    effects at negative frequencies because the IF frequency of the NI 5600 is 15 MHz.
                NI 5663/5663E-Your maximum allowed instantaneous bandwidth depends on the I/Q carrier frequency you use.    Refer to the NI 5601 RF downconverter overview for more information about instantaneous bandwidth. 
                NI 5665-Your maximum allowed instantaneous bandwidth depends on the downconverter center frequency if you have enabled the preselector (YIG-tuned filter). 
                Units: S/s 
                Default Value: 1 MHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoExportEnabled(System.String,System.Boolean)">
             <summary>
            Specifies whether to enable the LO OUT terminals on the NI 5603/5605 RF downconverter.
                By default, the LO OUT terminals are not enabled. If you want to daisy-chain multiple    devices together    using the same LO source, set this attribute to VI_TRUE to export the LO input    signals on the LO1, LO2,    and LO3 terminals to LO1 OUT, LO2 OUT, and LO3 OUT, respectively. 
                 NOTE: For the NI 5601, the only valid value for this property is VI_TRUE.
                Default Values: 
                NI 5601-VI_TRUE 
                NI 5603/5605-VI_FALSE  
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoExportEnabled(System.String,System.Boolean@)">
             <summary>
            Specifies whether to enable the LO OUT terminals on the NI 5603/5605 RF downconverter.
                By default, the LO OUT terminals are not enabled. If you want to daisy-chain multiple    devices together    using the same LO source, set this attribute to VI_TRUE to export the LO input    signals on the LO1, LO2,    and LO3 terminals to LO1 OUT, LO2 OUT, and LO3 OUT, respectively. 
                 NOTE: For the NI 5601, the only valid value for this property is VI_TRUE.
                Default Values: 
                NI 5601-VI_TRUE 
                NI 5603/5605-VI_FALSE  
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoFrequency(System.String,System.Double)">
             <summary>
            Returns the LO signal frequency for the configured center frequency.
                If you are using the NI RF vector signal analyzer with an external LO, use this    attribute to specify    the LO frequency that the external LO source passes into the LO IN or LO IN1 connector, located    on the RF downconverter front panel. If you are using an external LO, reading the value of this    attribute after configuring the rest of the parameters returns the LO frequency needed    by the device. 
                Set this attribute to the actual LO frequency because NI-RFSA corrects    for any difference between expected and actual LO frequencies. 
                Default Value: 0 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoFrequency(System.String,System.Double@)">
             <summary>
            Returns the LO signal frequency for the configured center frequency.
                If you are using the NI RF vector signal analyzer with an external LO, use this    attribute to specify    the LO frequency that the external LO source passes into the LO IN or LO IN1 connector, located    on the RF downconverter front panel. If you are using an external LO, reading the value of this    attribute after configuring the rest of the parameters returns the LO frequency needed    by the device. 
                Set this attribute to the actual LO frequency because NI-RFSA corrects    for any difference between expected and actual LO frequencies. 
                Default Value: 0 
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLogicalName(System.String,System.String@)">
             <summary>
            Contains the logical name you specified when opening the current IVI session. You may pass    a logical name to the niRFSA_init function or the niRFSA_InitWithOptions function.    The IVI Configuration Utility must contain an entry for the logical name. The logical name    entry refers to a driver session section in the IVI Configuration file. The driver    session section specifies a physical device and initial user options. 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoInjectionSide(System.String,System.Int32)">
             <summary>
            Specifies the LO injection side.
                NI 5601/5663/5663E-For frequencies below 517.5 MHz or above 6.4125 GHz, the LO    injection side is fixed and NI-RFSA returns an error if you specify the incorrect value.    If you do not configure this attribute, NI-RFSA selects the default LO injection side    based on the downconverter center frequency. Reset this attribute to    return to automatic behavior. 
                NI 5603/5605/5665 (3.6 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is not    supported for this device.   NI 5605/5665 (14 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is supported for this device for frequencies    greater than 4 GHz, but this configuration is not calibrated, and device specifications are not guaranteed. 
                Default Values:
                NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &lt; 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE
                NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &gt;= 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_LOW_SIDE 
                NI 5603/5605 (external digitizer mode), NI 5665-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE  
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoInjectionSide(System.String,System.Int32@)">
             <summary>
            Specifies the LO injection side.
                NI 5601/5663/5663E-For frequencies below 517.5 MHz or above 6.4125 GHz, the LO    injection side is fixed and NI-RFSA returns an error if you specify the incorrect value.    If you do not configure this attribute, NI-RFSA selects the default LO injection side    based on the downconverter center frequency. Reset this attribute to    return to automatic behavior. 
                NI 5603/5605/5665 (3.6 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is not    supported for this device.   NI 5605/5665 (14 GHz)-Setting this attribute to NIRFSA_VAL_LO_INJECTION_LOW_SIDE is supported for this device for frequencies    greater than 4 GHz, but this configuration is not calibrated, and device specifications are not guaranteed. 
                Default Values:
                NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &lt; 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE
                NI 5601 (external digitizer mode), NI 5663/5663E (frequencies &gt;= 3.0 GHz)-NIRFSA_VAL_LO_INJECTION_LOW_SIDE 
                NI 5603/5605 (external digitizer mode), NI 5665-NIRFSA_VAL_LO_INJECTION_HIGH_SIDE  
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoTemperature(System.String,System.Double@)">
             <summary>
            Returns the current temperature, in degrees Celsius, of the LO module.    This attribute is not supported if    you are using an external LO. 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoYigMainCoilDrive(System.String,System.Int32)">
             <summary>
            Adjusts the dynamics of the current driving the YIG main coil.
                NOTE: Setting this attribute to NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_FAST allows the    frequency to settle significantly faster for some frequency transitions at the    expense of increased phase noise. This attribute is not supported if you are    using an external LO. 
                Default Value: NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_NORMAL  
                Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoYigMainCoilDrive(System.String,System.Int32@)">
             <summary>
            Adjusts the dynamics of the current driving the YIG main coil.
                NOTE: Setting this attribute to NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_FAST allows the    frequency to settle significantly faster for some frequency transitions at the    expense of increased phase noise. This attribute is not supported if you are    using an external LO. 
                Default Value: NIRFSA_VAL_LO_YIG_MAIN_COIL_DRIVE_NORMAL  
                Supported Devices: NI 5603/5605 (external digitizer mode), NI 5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMechanicalAttenuation(System.String,System.Double)">
             <summary>
            Specifies the level of mechanical attenuation for the RF path, in dB.
                Units: dB 
                Valid Values:
                NI 5600-0, 10, 20, 30, 40, 50 
                NI 5601-0, 16 
                NI 5603-0, 10, 20, 30 
                NI 5605-0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMechanicalAttenuation(System.String,System.Double@)">
             <summary>
            Specifies the level of mechanical attenuation for the RF path, in dB.
                Units: dB 
                Valid Values:
                NI 5600-0, 10, 20, 30, 40, 50 
                NI 5601-0, 16 
                NI 5603-0, 10, 20, 30 
                NI 5605-0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMechanicalAttenuatorEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether the mechanical attenuator is enabled. Set this attribute to NIRFSA_VAL_ENABLED to use the mechanical atteuator.
                Disabling this attenuator can improve device performance. Refer to the NI 5663/5663E    RF Attenuation and Signal Levels for more information about the attenuators. 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMechanicalAttenuatorEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether the mechanical attenuator is enabled. Set this attribute to NIRFSA_VAL_ENABLED to use the mechanical atteuator.
                Disabling this attenuator can improve device performance. Refer to the NI 5663/5663E    RF Attenuation and Signal Levels for more information about the attenuators. 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMemorySize(System.String,System.Int64@)">
             <summary>
            Returns the digitizer onboard memory in bytes. 
                Default Value: N/A 
                Supported Devices: NI 5661/5663/5663E/5665       
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMinimumAcpr(System.String,System.Double)">
             <summary>
            Specifies the minimum adjacent channel power ratio (ACPR), in dB, relative to the main channel reference level.    This attribute configures NI-RFSA to optimize downconverter gain to measure a lower power adjacent channel, adding    gain only after filtering the main channel. The gain NI-RFSA applies is always less than or equal to the ACPR value you specify.     NOTE: For the NI 5665 (3.6 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH or NIRFSA_ATTR_SPECTRUM_SPAN    attribute to a value less than 300 kHz. For the NI 5665 (14 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH    or NIRFSA_ATTR_SPECTRUM_SPAN attribute to a value less than 300 kHz by using the 300 kHz IF filter, or to a value    between 300 kHz and 5 MHz by using the 5 MHz IF filter. 
                NI-RFSA coerces this attribute to zero for the NI 5600/5601. For all other devices, read the coerced value    of this attribute to determine the actual amount of gain applied. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMinimumAcpr(System.String,System.Double@)">
             <summary>
            Specifies the minimum adjacent channel power ratio (ACPR), in dB, relative to the main channel reference level.    This attribute configures NI-RFSA to optimize downconverter gain to measure a lower power adjacent channel, adding    gain only after filtering the main channel. The gain NI-RFSA applies is always less than or equal to the ACPR value you specify.     NOTE: For the NI 5665 (3.6 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH or NIRFSA_ATTR_SPECTRUM_SPAN    attribute to a value less than 300 kHz. For the NI 5665 (14 GHz), this attribute is supported only if you set the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH    or NIRFSA_ATTR_SPECTRUM_SPAN attribute to a value less than 300 kHz by using the 300 kHz IF filter, or to a value    between 300 kHz and 5 MHz by using the 5 MHz IF filter. 
                NI-RFSA coerces this attribute to zero for the NI 5600/5601. For all other devices, read the coerced value    of this attribute to determine the actual amount of gain applied. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMixerLevel(System.String,System.Double)">
             <summary>
            Specifies the mixer level, in dBm. The mixer level represents the attenuation value to apply to    the input RF signal as it reaches the first mixer in the signal chain.    NI-RFSA automatically selects    an optimal mixer level value given the reference level if you do not configure this attribute.    You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes    at the same time. 
                 NOTE: This attribute is read-only for the NI 5601/5663/5663E. It is read/write for all other supported devices.   Default Values: 
                NI 5600: -30 
                NI 5601: N/A 
                NI 5603/5605: -10 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMixerLevel(System.String,System.Double@)">
             <summary>
            Specifies the mixer level, in dBm. The mixer level represents the attenuation value to apply to    the input RF signal as it reaches the first mixer in the signal chain.    NI-RFSA automatically selects    an optimal mixer level value given the reference level if you do not configure this attribute.    You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes    at the same time. 
                 NOTE: This attribute is read-only for the NI 5601/5663/5663E. It is read/write for all other supported devices.   Default Values: 
                NI 5600: -30 
                NI 5601: N/A 
                NI 5603/5605: -10 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetMixerLevelOffset(System.String,System.Double)">
             <summary>
            Specifies the number of dB by which to adjust the device mixer level. The default value    is 0 which specifies device settings that are the best compromise between    distortion and noise.    Specifying a positive value for this attribute configures the device for moderate distortion and    low noise, and specifying a negative value results in low distortion and higher noise. 
                 You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes at    the same time. 
                Units: dB    Default Value: 0 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode); NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetMixerLevelOffset(System.String,System.Double@)">
             <summary>
            Specifies the number of dB by which to adjust the device mixer level. The default value    is 0 which specifies device settings that are the best compromise between    distortion and noise.    Specifying a positive value for this attribute configures the device for moderate distortion and    low noise, and specifying a negative value results in low distortion and higher noise. 
                 You cannot set the NIRFSA_ATTR_MIXER_LEVEL and NIRFSA_ATTR_MIXER_LEVEL_OFFSET attributes at    the same time. 
                Units: dB    Default Value: 0 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode); NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetModuleRevision(System.String,System.String@)">
             <summary>
            Returns the revision of the RF downconverter module.
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetNumberOfRecords(System.String,System.Int64)">
             <summary>
            Specifies the number of records to acquire if the    NIRFSA_ATTR_NUM_RECORDS_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNumberOfRecords(System.String,System.Int64@)">
             <summary>
            Specifies the number of records to acquire if the    NIRFSA_ATTR_NUM_RECORDS_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetNumberOfRecordsIsFinite(System.String,System.Boolean)">
             <summary>
            Configures the device to stop after acquiring the specified number of records    or to acquire records continuously.   Default Value: VI_TRUE 
                Supported Devices: NI 5661/5663/5663E/5665          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNumberOfRecordsIsFinite(System.String,System.Boolean@)">
             <summary>
            Configures the device to stop after acquiring the specified number of records    or to acquire records continuously.   Default Value: VI_TRUE 
                Supported Devices: NI 5661/5663/5663E/5665          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetNumberOfSamples(System.String,System.Int64)">
             <summary>
            Specifies the number of samples to acquire. This attribute is only valid if the    NIRFSA_ATTR_NUM_SAMPLES_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1,000  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNumberOfSamples(System.String,System.Int64@)">
             <summary>
            Specifies the number of samples to acquire. This attribute is only valid if the    NIRFSA_ATTR_NUM_SAMPLES_IS_FINITE attribute is set to VI_TRUE.   Default Value: 1,000  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetNumberOfSamplesIsFinite(System.String,System.Boolean)">
             <summary>
            Specifies whether the device acquires a finite number of samples or acquires continuously.   Default Value: VI_TRUE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNumberOfSamplesIsFinite(System.String,System.Boolean@)">
             <summary>
            Specifies whether the device acquires a finite number of samples or acquires continuously.   Default Value: VI_TRUE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetNumberOfSpectralLines(System.String,System.Int32)">
             <summary>
            Specifies the number of spectral lines expected with the current power spectrum configuration.    If you do not configure this attribute, NI-RFSA selects an appropriate value based on    the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute. If you configure this attribute,    NI-RFSA coerces the NIRFSA_ATTR_RESOLUTION_BANDWIDTH value based on the number of    spectral lines requested and the value of the NIRFSA_ATTR_SPECTRUM_SPAN attribute. 
                Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetNumberOfSpectralLinesAttribute(System.String,System.Int32@)">
             <summary>
            Specifies the number of spectral lines expected with the current power spectrum configuration.    If you do not configure this attribute, NI-RFSA selects an appropriate value based on    the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute. If you configure this attribute,    NI-RFSA coerces the NIRFSA_ATTR_RESOLUTION_BANDWIDTH value based on the number of    spectral lines requested and the value of the NIRFSA_ATTR_SPECTRUM_SPAN attribute. 
                Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetOspDataScalingFactor(System.String,System.Double)">
             <summary>
            Specifies the scaling factor applied to the time-domain voltage data in the IF digitizer. Use this attribute to maximize     the dynamic range of the digitizer by increasing the maximum IF power the ADC can measure without creating OSP overflows.     Because of the device amplitude response, some wide band signals normally attenuated by the signal analyzer go through the    IF digitizer without causing an ADC overflow warning. During IF equalization, these wide band digitizer input signals may become    mathematically amplified. These amplified input signal values overflow the available numeric range used in the signal processing algorithm.     You can use this attribute when OSP calculations would generate an overflow while applying digital filters to the data.    The OSP module in the digitizer multiplies the time-domain signal amplitude, in volts, by the specified attribute value before    further onboard processing. Set this attribute to a value less than 1 to avoid OSP overflow for near full-scale IF signals and to    use the maximum dynamic range of the digitizer. NI-RFSA compensates for the specified OSP data scaling factor to ensure that the    correct scaled data, in absolute levels, is always returned regardless of the value of this attribute. 
                Valid Values: 0.25 to 1.0 
                Default Values:
                NI 5661/5663/5663E/5665 (3.6 GHz): 1.0 
                NI 5665 (14 GHz): 0.8 
                Supported Devices: NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetOspDataScalingFactor(System.String,System.Double@)">
             <summary>
            Specifies the scaling factor applied to the time-domain voltage data in the IF digitizer. Use this attribute to maximize     the dynamic range of the digitizer by increasing the maximum IF power the ADC can measure without creating OSP overflows.     Because of the device amplitude response, some wide band signals normally attenuated by the signal analyzer go through the    IF digitizer without causing an ADC overflow warning. During IF equalization, these wide band digitizer input signals may become    mathematically amplified. These amplified input signal values overflow the available numeric range used in the signal processing algorithm.     You can use this attribute when OSP calculations would generate an overflow while applying digital filters to the data.    The OSP module in the digitizer multiplies the time-domain signal amplitude, in volts, by the specified attribute value before    further onboard processing. Set this attribute to a value less than 1 to avoid OSP overflow for near full-scale IF signals and to    use the maximum dynamic range of the digitizer. NI-RFSA compensates for the specified OSP data scaling factor to ensure that the    correct scaled data, in absolute levels, is always returned regardless of the value of this attribute. 
                Valid Values: 0.25 to 1.0 
                Default Values:
                NI 5661/5663/5663E/5665 (3.6 GHz): 1.0 
                NI 5665 (14 GHz): 0.8 
                Supported Devices: NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetP2pEnabled(System.String,System.Boolean)">
             <summary>
            Specifies whether peer-to-peer streaming is enabled for the active stream endpoint.
                This attribute is endpoint based. 
                Default Value: VI_FALSE 
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pEnabled(System.String,System.Boolean@)">
             <summary>
            Specifies whether peer-to-peer streaming is enabled for the active stream endpoint.
                This attribute is endpoint based. 
                Default Value: VI_FALSE 
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pEndpointOverflow(System.String,System.Boolean@)">
             <summary>
            Indicates whether the endpoint has overflowed. An overflow condition occurs when data    is written to the endpoint faster than it can be streamed from it. During an overflow,    data in the endpoint begins to be overwritten. Reset the device or close the session to    reset the overflow condition. 
                Default Value: VI_FALSE  
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pEndpointSize(System.String,System.Int64@)">
             <summary>
            Returns the size, in samples, of the peer-to-peer endpoint.
                 Default Value: 0 
                Supported Devices: NI 5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pFifoEndpointCount(System.String,System.Int64@)">
             <summary>
            Returns the number of peer-to-peer streams supported by the device. 
                Default Value: 0  
                Supported Devices: NI 5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pMostSamplesAvailableInEndpoint(System.String,System.Int64@)">
             <summary>
            Returns the largest number of complex samples available in the peer-to-peer endpoint since this    attribute was last read. 
                Default Value: 0  
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetP2pOnboardMemoryEnabled(System.String,System.Boolean)">
             <summary>
            Specifies whether a limit is placed on the number of records and the size of the records by    the size of the device onboard memory. When a peer-to-peer stream is enabled and onboard memory    is disabled, any fetch calls result in an error. 
                Default Value: VI_FALSE  
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pOnboardMemoryEnabled(System.String,System.Boolean@)">
             <summary>
            Specifies whether a limit is placed on the number of records and the size of the records by    the size of the device onboard memory. When a peer-to-peer stream is enabled and onboard memory    is disabled, any fetch calls result in an error. 
                Default Value: VI_FALSE  
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pSamplesAvailableInEndpoint(System.String,System.Int64@)">
             <summary>
            Returns the current number of complex samples available in the peer-to-peer endpoint.
                NOTE: The complex samples are composed of two 16-bit words, with the I data as the LSB. 
                Default Value: 0  
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetP2pSamplesTransferred(System.String,System.Int64@)">
             <summary>
            Returns the number of complex samples transferred through the peer-to-peer stream endpoint    since the endpoint was last reset. 
                Default Value: 0 
                Supported Devices: NI 5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetPhaseOffset(System.String,System.Double)">
             <summary>
            Specifies the offset to apply to the initial I and Q phases.
                Valid Values: -180 to 180 
                Default Value: 0  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetPhaseOffset(System.String,System.Double@)">
             <summary>
            Specifies the offset to apply to the initial I and Q phases.
                Valid Values: -180 to 180 
                Default Value: 0  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetPowerSpectrumUnits(System.String,System.Int32)">
             <summary>
            Specifies the units of the power spectrum. 
                Default Value: NIRFSA_VAL_DBM  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetPowerSpectrumUnits(System.String,System.Int32@)">
             <summary>
            Specifies the units of the power spectrum. 
                Default Value: NIRFSA_VAL_DBM  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetPreselectorEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether the preselector is enabled on the downconverter. 
                NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
                Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
                NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetPreselectorEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether the preselector is enabled on the downconverter. 
                NOTE: All devices support setting this attribute to NIRFSA_VAL_PRESELECTOR_DISABLED. Only devices with a preselector support setting this attribute to NIRFSA_VAL_PRESLECTOR_ENABLED or NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH. 
                Default Value: NIRFSA_VAL_PRESELECTOR_DISABLED if the device has no preselector. 
                NIRFSA_VAL_PRESELECTOR_ENABLED_WHEN_IN_SIGNAL_PATH if the device has a preselector.  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetPreselectorPresent(System.String,System.Boolean@)">
             <summary>
            Returns whether a preselector is available on the RF downconverter module. 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetPxiChassisClk10Source(System.String,System.String)">
             <summary>
            Specifies the signal to drive the 10 MHz Reference clock on the PXI    backplane. This option can be configured only when the NI 5600 is installed in    Slot 2 of the PXI chassis. 
                Default Value: N/A 
                Supported Devices: NI 5600 (external digitizer mode), NI 5661        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetPxiChassisClk10Source(System.String,System.String@)">
             <summary>
            Specifies the signal to drive the 10 MHz Reference clock on the PXI    backplane. This option can be configured only when the NI 5600 is installed in    Slot 2 of the PXI chassis. 
                Default Value: N/A 
                Supported Devices: NI 5600 (external digitizer mode), NI 5661        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetQueryInstrumentStatus(System.String,System.Boolean)">
             <summary>
            Specifies whether NI-RFSA queries the NI-RFSA device status after each operation. Querying    the device status is useful for debugging. After you validate your program, you can set    this attribute to VI_FALSE to disable status checking and maximize performance. 
                NI-RFSA can choose to ignore status checking for    particular attributes, regardless of the setting of this attribute.
                NOTE: Use niRFSA_InitWithOptions function to override this value.
                Default Value: VI_FALSE  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetQueryInstrumentStatus(System.String,System.Boolean@)">
             <summary>
            Specifies whether NI-RFSA queries the NI-RFSA device status after each operation. Querying    the device status is useful for debugging. After you validate your program, you can set    this attribute to VI_FALSE to disable status checking and maximize performance. 
                NI-RFSA can choose to ignore status checking for    particular attributes, regardless of the setting of this attribute.
                NOTE: Use niRFSA_InitWithOptions function to override this value.
                Default Value: VI_FALSE  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRangeCheck(System.String,System.Boolean)">
             <summary>
            Specifies whether to validate attribute values and function parameters.    If enabled, NI-RFSA validates the parameter values that you    pass to NI-RFSA functions. Range checking parameters is very useful for    debugging. After you validate your program, you can set this attribute to    VI_FALSE to disable range checking and maximize performance.
                NOTE: Use niRFSA_InitWithOptions function to override this value.
                Default Value: VI_TRUE 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRangeCheck(System.String,System.Boolean@)">
             <summary>
            Specifies whether to validate attribute values and function parameters.    If enabled, NI-RFSA validates the parameter values that you    pass to NI-RFSA functions. Range checking parameters is very useful for    debugging. After you validate your program, you can set this attribute to    VI_FALSE to disable range checking and maximize performance.
                NOTE: Use niRFSA_InitWithOptions function to override this value.
                Default Value: VI_TRUE 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetReadyForAdvanceEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/ReadyForAdvanceEvent, where DigitizerName is the name associated with your digitizer module in MAX. 
                Supported Devices: NI 5663/5663E/5665    	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetReadyForRefEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/ReadyForReferenceEvent, where DigitizerName is the name associated with your digitizer module in MAX. 
                Supported Devices: NI 5663/5663E/5665   	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetReadyForStartEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/ReadyForStartEvent, where DigitizerName is the name associated with your digitizer module in MAX. 
                Supported Devices: NI 5663/5663E/5665    	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRecordCoercions(System.String,System.Boolean)">
             <summary>
            Specifies whether the IVI engine keeps a list of the value coercions it    makes for integer and real type attributes.
                NOTE: This attribute is currently not supported.
                Default Value: VI_FALSE  
                Supported Devices: None        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRecordCoercions(System.String,System.Boolean@)">
             <summary>
            Specifies whether the IVI engine keeps a list of the value coercions it    makes for integer and real type attributes.
                NOTE: This attribute is currently not supported.
                Default Value: VI_FALSE  
                Supported Devices: None        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRecordsDone(System.String,System.Int32@)">
             <summary>
            Returns the number of records the RF vector signal analyzer has acquired. 
                Default Value: N/A  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefClockRate(System.String,System.Double)">
             <summary>
            Specifies the Reference clock rate, in hertz (Hz). 
                Valid Values: 
                NI 5601/5663/5663E- 10 MHz 
                NI 5603/5605/5665- 5 MHz to 100 MHz, in increments of 1 MHz 
                Default Value: 10 MHz  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefClockRate(System.String,System.Double@)">
             <summary>
            Specifies the Reference clock rate, in hertz (Hz). 
                Valid Values: 
                NI 5601/5663/5663E- 10 MHz 
                NI 5603/5605/5665- 5 MHz to 100 MHz, in increments of 1 MHz 
                Default Value: 10 MHz  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefClockSource(System.String,System.String)">
             <summary>
            Specifies the Reference clock source. 
                Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefClockSource(System.String,System.String@)">
             <summary>
            Specifies the Reference clock source. 
                Default Value: NIRFSA_VAL_ONBOARD_CLOCK_STR  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetReferenceLevel(System.String,System.Double)">
             <summary>
            Specifies the reference level, in dBm. The reference level represents    the maximum expected power of an input RF signal. Refer to the    NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information about how configuring    an external gain and a reference level affect attenuation. 
                Default Value: 0 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetReferenceLevel(System.String,System.Double@)">
             <summary>
            Specifies the reference level, in dBm. The reference level represents    the maximum expected power of an input RF signal. Refer to the    NIRFSA_ATTR_EXTERNAL_GAIN attribute for more information about how configuring    an external gain and a reference level affect attenuation. 
                Default Value: 0 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefToRefTriggerHoldoff(System.String,System.Double)">
             <summary>
            Specifies the minimum time, in seconds, that must elapse between Reference triggers of    two records. The device does not recognize the Reference trigger of the next record    before this minimum time elapses. 
                Units: seconds 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefToRefTriggerHoldoff(System.String,System.Double@)">
             <summary>
            Specifies the minimum time, in seconds, that must elapse between Reference triggers of    two records. The device does not recognize the Reference trigger of the next record    before this minimum time elapses. 
                Units: seconds 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefTriggerDelay(System.String,System.Double)">
             <summary>
            Specifies the trigger delay time, in seconds. The trigger delay time is the    length of time the IF digitizer waits after it receives the trigger    before it asserts the Reference event. 
                Units: seconds 
                Default Value: 0  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefTriggerDelay(System.String,System.Double@)">
             <summary>
            Specifies the trigger delay time, in seconds. The trigger delay time is the    length of time the IF digitizer waits after it receives the trigger    before it asserts the Reference event. 
                Units: seconds 
                Default Value: 0  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefTriggerMinimumQuietTime(System.String,System.Double)">
             <summary>
            Specifies a time duration, in seconds, for which the signal must be quiet    before the device arms the trigger. The signal is quiet when it is below the    trigger level if the trigger slope, specified by the    NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_SLOPE attribute, is set to    NIRFSA_VAL_RISING_SLOPE or above the trigger level if the trigger slope is    set to NIRFSA_VAL_FALLING_SLOPE.
                By default this value is set to 0, which means the device does not wait for a    quiet time before arming the trigger. This attribute is useful to trigger the    acquisition on signals containing repeated bursts, but for which each burst    may have large changes in signal power within itself. By configuring the    minimum quiet time to the time between bursts, you can ensure that the trigger    occurs at the beginning of a burst rather than at the  signal power change within    a burst.
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefTriggerMinimumQuietTime(System.String,System.Double@)">
             <summary>
            Specifies a time duration, in seconds, for which the signal must be quiet    before the device arms the trigger. The signal is quiet when it is below the    trigger level if the trigger slope, specified by the    NIRFSA_ATTR_IQ_POWER_EDGE_REF_TRIGGER_SLOPE attribute, is set to    NIRFSA_VAL_RISING_SLOPE or above the trigger level if the trigger slope is    set to NIRFSA_VAL_FALLING_SLOPE.
                By default this value is set to 0, which means the device does not wait for a    quiet time before arming the trigger. This attribute is useful to trigger the    acquisition on signals containing repeated bursts, but for which each burst    may have large changes in signal power within itself. By configuring the    minimum quiet time to the time between bursts, you can ensure that the trigger    occurs at the beginning of a burst rather than at the  signal power change within    a burst.
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefTriggerPretriggerSamples(System.String,System.Int64)">
             <summary>
            Specifies the number of pretrigger samples--the samples acquired before the    Reference trigger is received--to be acquired per record. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefTriggerPretriggerSamples(System.String,System.Int64@)">
             <summary>
            Specifies the number of pretrigger samples--the samples acquired before the    Reference trigger is received--to be acquired per record. 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefTriggerTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/RefTrigger, where DigitizerName is the name associated with your digitizer module in MAX. 
                Supported Devices: NI 5663/5663E/5665   	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefTriggerType(System.String,System.Int32)">
             <summary>
            Specifies whether you want the Reference trigger to be a digital edge, IQ    power edge, or software trigger. 
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefTriggerType(System.String,System.Int32@)">
             <summary>
            Specifies whether you want the Reference trigger to be a digital edge, IQ    power edge, or software trigger. 
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetResolutionBandwidth(System.String,System.Double)">
             <summary>
            Specifies the resolution along the x-axis of the spectrum.    NI-RFSA uses the resolution bandwidth value to determine the acquisition size. If the    NIRFSA_ATTR_NUMBER_OF_SPECTRAL_LINES attribute is specified, that value overrides    this value. 
                Units: hertz (Hz) 
                Default Value: 100 kHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetResolutionBandwidth(System.String,System.Double@)">
             <summary>
            Specifies the resolution along the x-axis of the spectrum.    NI-RFSA uses the resolution bandwidth value to determine the acquisition size. If the    NIRFSA_ATTR_NUMBER_OF_SPECTRAL_LINES attribute is specified, that value overrides    this value. 
                Units: hertz (Hz) 
                Default Value: 100 kHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetResolutionBandwidthType(System.String,System.Int32)">
             <summary>
            Specifies how the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute is expressed. 
                Default Value: NIRFSA_VAL_RBW_3DB 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetResolutionBandwidthType(System.String,System.Int32@)">
             <summary>
            Specifies how the NIRFSA_ATTR_RESOLUTION_BANDWIDTH attribute is expressed. 
                Default Value: NIRFSA_VAL_RBW_3DB 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfAttenuationIndex(System.String,System.Int32)">
             <summary>
            Specifies the attenuator setting to use from the RF attenuator table, which is    specified by the NIRFSA_ATTR_RF_ATTENUATION_TABLE attribute.
                Valid Values: 0 to 65 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5603/5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfAttenuationIndex(System.String,System.Int32@)">
             <summary>
            Specifies the attenuator setting to use from the RF attenuator table, which is    specified by the NIRFSA_ATTR_RF_ATTENUATION_TABLE attribute.
                Valid Values: 0 to 65 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5603/5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfAttenuationStepSize(System.String,System.Double)">
             <summary>
            Specifies the step size for the RF attenuation level. The actual RF attenuation is coerced up to the    next highest multiple of this step size.    You can also set this value to change the step size for the device within the supported device precision and configuration. 
                NI 5600-The device configuration supports only the following attenuation step size values: 10, 20, 30, 40, and 50. 
                NI 5601-The attenuation is calculated based on the actual calibrated value closest to the    desired value, so the step size varies as the actual gain values vary between consecutive attenuation settings.
                NI 5603-The device configuration supports attenuation changes in 1 dB steps.
                NI 5605-The available attenuation step size depends on the specified center frequency. In    the high band signal path (input frequencies greater than 3.6 GHz), the only available attenuation is the step attenuator    that you can change in 5 dB steps. In the low band signal path (input frequencies less than or     equal to 3.6 GHz), an additional 31 dB of solid-state attenuation is available in 1 dB steps.    The 5 dB default value indicates that, even when in the low band signal path, NI-RFSA changes the    attenuation in 5 dB steps using only the mechanical attenuator. You can use this property to affect     when the device changes the attenuation settings. To use the solid-state attenuation in the low band    signal path, change the step size to a value other than a multiple of 5 (for example, a step size of 1 dB).    If you use a value other than a multiple of 5 while in the high band of the NI 5605, NI-RFSA returns an error.
                Valid Values: 
                NI 5600:10, 20, 30, 40, and 50 
                NI 5601:0.0 to 93.0, continuous 
                NI 5603:1.0 to 74.0, in 1 dB steps 
                NI 5605 (low band): 1.0 to 106.0, in 1 dB steps 
                NI 5605 (high band): 5.0 to 75.0, in 5 dB steps 
                Default Value: 
                NI 5600: 10.0 
                NI 5601: 0.0 
                NI 5603: 1.0 
                NI 5605: 5.0 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfAttenuationStepSize(System.String,System.Double@)">
             <summary>
            Specifies the step size for the RF attenuation level. The actual RF attenuation is coerced up to the    next highest multiple of this step size.    You can also set this value to change the step size for the device within the supported device precision and configuration. 
                NI 5600-The device configuration supports only the following attenuation step size values: 10, 20, 30, 40, and 50. 
                NI 5601-The attenuation is calculated based on the actual calibrated value closest to the    desired value, so the step size varies as the actual gain values vary between consecutive attenuation settings.
                NI 5603-The device configuration supports attenuation changes in 1 dB steps.
                NI 5605-The available attenuation step size depends on the specified center frequency. In    the high band signal path (input frequencies greater than 3.6 GHz), the only available attenuation is the step attenuator    that you can change in 5 dB steps. In the low band signal path (input frequencies less than or     equal to 3.6 GHz), an additional 31 dB of solid-state attenuation is available in 1 dB steps.    The 5 dB default value indicates that, even when in the low band signal path, NI-RFSA changes the    attenuation in 5 dB steps using only the mechanical attenuator. You can use this property to affect     when the device changes the attenuation settings. To use the solid-state attenuation in the low band    signal path, change the step size to a value other than a multiple of 5 (for example, a step size of 1 dB).    If you use a value other than a multiple of 5 while in the high band of the NI 5605, NI-RFSA returns an error.
                Valid Values: 
                NI 5600:10, 20, 30, 40, and 50 
                NI 5601:0.0 to 93.0, continuous 
                NI 5603:1.0 to 74.0, in 1 dB steps 
                NI 5605 (low band): 1.0 to 106.0, in 1 dB steps 
                NI 5605 (high band): 5.0 to 75.0, in 5 dB steps 
                Default Value: 
                NI 5600: 10.0 
                NI 5601: 0.0 
                NI 5603: 1.0 
                NI 5605: 5.0 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfAttenuationTable(System.String,System.Int32)">
             <summary>
            Specifies which RF attenuator table to use.
                Valid Values: 0 to 1 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfAttenuationTable(System.String,System.Int32@)">
             <summary>
            Specifies which RF attenuator table to use.
                Valid Values: 0 to 1 
                Default Value: N/A 
                Supported Devices: NI 5601 (external digitizer mode), NI 5663/5663E        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfPreampEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether the RF Preamplifier is enabled on the downconverter. 
                NOTE: All devices support setting this attribute to NIRFSA_VAL_RF_PREAMP_DISABLED.    Only devices with an RF preamplifier support setting this attribute    to NIRFSA_VAL_RF_PREAMP_ENABLED_WHEN_IN_SIGNAL_PATH or NIRFSA_VAL_RF_PREAMP_ENABLED. 
                Default Value: NIRFSA_VAL_RF_PREAMP_DISABLED  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfPreampEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether the RF Preamplifier is enabled on the downconverter. 
                NOTE: All devices support setting this attribute to NIRFSA_VAL_RF_PREAMP_DISABLED.    Only devices with an RF preamplifier support setting this attribute    to NIRFSA_VAL_RF_PREAMP_ENABLED_WHEN_IN_SIGNAL_PATH or NIRFSA_VAL_RF_PREAMP_ENABLED. 
                Default Value: NIRFSA_VAL_RF_PREAMP_DISABLED  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfPreampPresent(System.String,System.Boolean@)">
             <summary>
            Returns whether an RF preamplifier is available on the downconverter module.
                 Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSerialNumber(System.String,System.String@)">
             <summary>
            Returns the serial number of the RF downconverter module. 
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSimulate(System.String,System.Boolean@)">
             <summary>
            Specifies whether or not to simulate NI-RFSA I/O operations. This attribute is    useful for debugging applications without using hardware. After a session    is opened, you cannot change the simulation state. Use the niRFSA_InitWithOptions    function to enable simulation.
                NOTE: NI 5600/5661 support setting this attribute to VI_FALSE only. 
                Default Value: VI_FALSE  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode); NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpecificDriverDescription(System.String,System.String@)">
             <summary>
            Returns a string that contains a brief description of NI-RFSA. This attribute returns    RF Signal Analyzer Instrument Driver. 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpecificDriverPrefix(System.String,System.String@)">
             <summary>
            Returns a string that contains the prefix for NI-RFSA. The name of each user-callable    function in NI-RFSA starts with this prefix. This attribute returns niRFSA. 
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665         
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpecificDriverRevision(System.String,System.String@)">
             <summary>
            Returns a string that contains additional version information about NI-RFSA.    For example, NI-RFSA can return Driver: NI-RFSA 2.5, Compiler: MSVC 7.10,    Components: IVI Engine 4.00, VISA-Spec 4.00 as the value of this attribute. 
                Default Value: N/A  
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpecificDriverVendor(System.String,System.String@)">
             <summary>
            Returns a string that contains the name of the vendor that supplies NI-RFSA.    This attribute returns National Instruments. 
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSpectrumAveragingMode(System.String,System.Int32)">
             <summary>
            Specifies the averaging mode for the spectrum acquisition. 
                Default Value: NIRFSA_VAL_NO_AVERAGING  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpectrumAveragingMode(System.String,System.Int32@)">
             <summary>
            Specifies the averaging mode for the spectrum acquisition. 
                Default Value: NIRFSA_VAL_NO_AVERAGING  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSpectrumCenterFrequency(System.String,System.Double)">
             <summary>
            Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
                 NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
                Units: hertz (Hz) 
                Default Value: 1 GHz 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpectrumCenterFrequency(System.String,System.Double@)">
             <summary>
            Specifies the center frequency in a spectrum acquisition.    An acquisition consists of a span of data surrounding    the center frequency.  The value is expressed in hertz (Hz).
                 NOTE: Use this attribute to tune the downconverter when using external digitizer mode. 
                Units: hertz (Hz) 
                Default Value: 1 GHz 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSpectrumNumberOfAverages(System.String,System.Int32)">
             <summary>
            Specifies the number of acquisitions to average.    The averaging process returns the final result after the number    of averages is complete.
                Default Value: 10  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpectrumNumberOfAverages(System.String,System.Int32@)">
             <summary>
            Specifies the number of acquisitions to average.    The averaging process returns the final result after the number    of averages is complete.
                Default Value: 10  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSpectrumOspSamplingRatio(System.String,System.Double)">
             <summary>
            Specifies the oversampling ratio used by the the digitizer onboard signal processing (OSP)    when you are in spectrum acquisition mode. This attribute allows you to acquire a larger    bandwidth in hardware and reduce that bandwidth in software, decreasing the possibility of hardware data path overflows. 
                Default Value: 1.0 
                Supported Devices: NI 5661/5663/5663E/5665          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpectrumOspSamplingRatio(System.String,System.Double@)">
             <summary>
            Specifies the oversampling ratio used by the the digitizer onboard signal processing (OSP)    when you are in spectrum acquisition mode. This attribute allows you to acquire a larger    bandwidth in hardware and reduce that bandwidth in software, decreasing the possibility of hardware data path overflows. 
                Default Value: 1.0 
                Supported Devices: NI 5661/5663/5663E/5665          
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetSpectrumSpan(System.String,System.Double)">
             <summary>
            Specifies the frequency range of the computed spectrum, in hertz (Hz).    For example, if you specify a center frequency of 1 GHz and a span of 100 MHz,    the spectrum ranges from 950 MHz to 1,050 MHz after zoom processing. This value    may be coerced based on hardware settings and RF downconverter specifications. 
                NOTE: If you configure the spectrum span to a value larger than the hardware    instantaneous bandwidth, NI-RFSA performs multiple acquisitions and combines    them into a spectrum of the size you requested. 
                NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency    ranges that correspond with different instantaneous bandwidths. For example, you cannot configure    a multispan acquisition that acquires one span from 110 MHz to 120 MHz and a    second from 120 MHz to    130 MHz because the bandwidths that correspond with each span is    different (10 MHz and 20 MHz, respectively).
                NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default.    At spans wider than 40 MHz,    the dither noise can leak into the lower frequencies and the upper frequencies    of the IF pass band.    The amount of leakage depends on the resolution bandwidth, resolution bandwidth type,    and FFT window    you select. Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more    information about dithering. 
                Default Value: 10 MHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpectrumSpan(System.String,System.Double@)">
             <summary>
            Specifies the frequency range of the computed spectrum, in hertz (Hz).    For example, if you specify a center frequency of 1 GHz and a span of 100 MHz,    the spectrum ranges from 950 MHz to 1,050 MHz after zoom processing. This value    may be coerced based on hardware settings and RF downconverter specifications. 
                NOTE: If you configure the spectrum span to a value larger than the hardware    instantaneous bandwidth, NI-RFSA performs multiple acquisitions and combines    them into a spectrum of the size you requested. 
                NOTE: For the NI 5663/5663E, NI-RFSA does not support multispan acquisitions from frequency    ranges that correspond with different instantaneous bandwidths. For example, you cannot configure    a multispan acquisition that acquires one span from 110 MHz to 120 MHz and a    second from 120 MHz to    130 MHz because the bandwidths that correspond with each span is    different (10 MHz and 20 MHz, respectively).
                NOTE: For the NI 5663/5663E/5665, NI-RFSA enables dithering by default.    At spans wider than 40 MHz,    the dither noise can leak into the lower frequencies and the upper frequencies    of the IF pass band.    The amount of leakage depends on the resolution bandwidth, resolution bandwidth type,    and FFT window    you select. Refer to the NIRFSA_ATTR_DIGITIZER_DITHER_ENABLED attribute for more    information about dithering. 
                Default Value: 10 MHz  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetStartToRefTriggerHoldoff(System.String,System.Double)">
             <summary>
            Specifies the minimum time, in seconds, that must elapse after the Start trigger is    received before the device recognizes a Reference trigger. 
                Units: seconds 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetStartToRefTriggerHoldoff(System.String,System.Double@)">
             <summary>
            Specifies the minimum time, in seconds, that must elapse after the Start trigger is    received before the device recognizes a Reference trigger. 
                Units: seconds 
                Default Value: 0 
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetStartTriggerTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully qualified signal name as a string. 
                Default Value: /DigitizerName/StartTrigger, where DigitizerName is the name associated with your digitizer module in MAX.  
                Supported Devices: NI 5663/5663E/5665   	 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetStartTriggerType(System.String,System.Int32)">
             <summary>
            Specifies whether you want the Start trigger to be a digital edge or    software trigger.
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetStartTriggerType(System.String,System.Int32@)">
             <summary>
            Specifies whether you want the Start trigger to be a digital edge or    software trigger.
                Default Value: NIRFSA_VAL_NONE  
                Supported Devices: NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSupportedInstrumentModels(System.String,System.String@)">
             <summary>
            Returns a comma-separated list of supported devices.
                Default Value: N/A 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetTemperatureReadInterval(System.String,System.Double)">
             <summary>
            Indicates the minimum time between temperature sensor readings. When you    call the niRFSA_ReadPowerSpectrum function, the niRFSA_ReadIQSingleRecordComplexF64 function,    or the niRFSA_Initiate function, NI-RFSA checks whether at least the amount of    time specified by this attribute has elapsed before reading the hardware temperature. 
                NOTE: NI-RFSA ignores this attribute if you called the niRFSA_PerformThermalCorrection    function or the NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute. 
                Default Value: 30 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetTemperatureReadInterval(System.String,System.Double@)">
             <summary>
            Indicates the minimum time between temperature sensor readings. When you    call the niRFSA_ReadPowerSpectrum function, the niRFSA_ReadIQSingleRecordComplexF64 function,    or the niRFSA_Initiate function, NI-RFSA checks whether at least the amount of    time specified by this attribute has elapsed before reading the hardware temperature. 
                NOTE: NI-RFSA ignores this attribute if you called the niRFSA_PerformThermalCorrection    function or the NIRFSA_ATTR_DOWNCONVERTER_GAIN attribute. 
                Default Value: 30 
                Supported Devices: NI 5600/5601/5603/5605 (external digitizer mode), NI 5661/5663/5663E/5665        
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetTimerEventInterval(System.String,System.Double)">
             <summary>
            Specifies the time, in seconds, that the timer waits before sending a Timer event. 
                After the timer reaches zero, it automatically restarts. 
                Default Value: 0.01  
                Supported Devices: NI 5663E/5665       
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetTimerEventInterval(System.String,System.Double@)">
             <summary>
            Specifies the time, in seconds, that the timer waits before sending a Timer event. 
                After the timer reaches zero, it automatically restarts. 
                Default Value: 0.01  
                Supported Devices: NI 5663E/5665       
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetFftWidth(System.String,System.Double)">
             <summary>
            Specifies the FFT width of the device. The FFT width is the effective bandwidth of the signal
                path during each signal acquisition.
                Default Value: N/A
                Supported Devices: NI 5663/5663E/5665
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFftWidth(System.String,System.Double@)">
             <summary>
            Specifies the FFT width of the device. The FFT width is the effective bandwidth of the signal
                path during each signal acquisition.
                Default Value: N/A
                Supported Devices: NI 5663/5663E/5665
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetInputIsolationEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether input isolation is enabled.
                Enabling this attribute isolates the input signal at the RF IN connector on the RF downconverter
                from the rest of the RF downconverter signal path. Disabling this attribute reintegrates the
                input signal into the RF downconverter signal path.
                NOTE: If you enable input isolation for your device, the device impedance is changed from the
                characteristic 50 Ohm impedance. A change in the device impedance may also cause a VSWR value
                higher than the device specifications.
                Default Values: NIRFSA_VAL_ENABLED
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetInputIsolationEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether input isolation is enabled.
                Enabling this attribute isolates the input signal at the RF IN connector on the RF downconverter
                from the rest of the RF downconverter signal path. Disabling this attribute reintegrates the
                input signal into the RF downconverter signal path.
                NOTE: If you enable input isolation for your device, the device impedance is changed from the
                characteristic 50 Ohm impedance. A change in the device impedance may also cause a VSWR value
                higher than the device specifications.
                Default Values: NIRFSA_VAL_ENABLED
                Supported Devices: NI 5601/5603/5605 (external digitizer mode), NI 5663/5663E/5665
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRefTriggerOspDelayEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether the digitizer OSP block delays Reference triggers, along with the data
                samples, moving through the OSP block or if the Reference triggers bypass the OSP block 
                and are processed immediately.
                Enabling this attribute requires the following equipment configurations:
                All digitizers being used must be the same model and hardware revision.
                All digitizers must use the same firmware.
                All digitizers must be configured with the same I/Q rate. 
                All devices must use the same signal path. 
                NI 5661—The IF filters for the NI 5661 are determined by the incoming frequency.
                NI 5663/5663E—Read the value of the NIRFSA_ATTR_IF_FILTER attribute to determine the 
                IF filters used by the NI 5663/5663E.
                NI 5665—Refer to the device-specific information in the
                NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute to determine the IF filters used by 
                the NI 5665. If you set the NIRFSA_ATTR_FFT_WIDTH attribute, refer to the device-specific
                information for this attribute and the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute
                to determine the IF filters used. For frequencies less than 3.6 GHz, set the
                NIRFSA_ATTR_RF_PREAMP_ENABLED to the same value for all devices.
                NI 5665 14 GHz—Set the NIRFSA_ATTR_PRESELECTOR_ENABLED to the same value for all devices.
                If the I/Q rate is set programmatically for I/Q acquisitions, the following attributes 
                should be identical for the best device synchronization:
                NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED 
                NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
                For spectrum acquisitions, the following attributes should be identical for the 
                best device synchronization:
                NIRFSA_ATTR_SPECTRUM_SPAN 
                NIRFSA_ATTR_RESOLUTION_BANDWIDTH_TYPE 
                NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED
                NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5661/5663/5663E/5665
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRefTriggerOspDelayEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether the digitizer OSP block delays Reference triggers, along with the data
                samples, moving through the OSP block or if the Reference triggers bypass the OSP block 
                and are processed immediately.
                Enabling this attribute requires the following equipment configurations:
                All digitizers being used must be the same model and hardware revision.
                All digitizers must use the same firmware.
                All digitizers must be configured with the same I/Q rate. 
                All devices must use the same signal path. 
                NI 5661—The IF filters for the NI 5661 are determined by the incoming frequency.
                NI 5663/5663E—Read the value of the NIRFSA_ATTR_IF_FILTER attribute to determine the 
                IF filters used by the NI 5663/5663E.
                NI 5665—Refer to the device-specific information in the
                NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute to determine the IF filters used by 
                the NI 5665. If you set the NIRFSA_ATTR_FFT_WIDTH attribute, refer to the device-specific
                information for this attribute and the NIRFSA_ATTR_DEVICE_INSTANTANEOUS_BANDWIDTH attribute
                to determine the IF filters used. For frequencies less than 3.6 GHz, set the
                NIRFSA_ATTR_RF_PREAMP_ENABLED to the same value for all devices.
                NI 5665 14 GHz—Set the NIRFSA_ATTR_PRESELECTOR_ENABLED to the same value for all devices.
                If the I/Q rate is set programmatically for I/Q acquisitions, the following attributes 
                should be identical for the best device synchronization:
                NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED 
                NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
                For spectrum acquisitions, the following attributes should be identical for the 
                best device synchronization:
                NIRFSA_ATTR_SPECTRUM_SPAN 
                NIRFSA_ATTR_RESOLUTION_BANDWIDTH_TYPE 
                NIRFSA_ATTR_DIGITAL_IF_EQUALIZATION_ENABLED
                NIRFSA_ATTR_SPECTRUM_OSP_SAMPLING_RATIO 
                Default Value: NIRFSA_VAL_ENABLED 
                Supported Devices: NI 5661/5663/5663E/5665
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetChannelCount(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetGroupCapabilities(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpecificDriverClassSpecMajorVersion(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetSpecificDriverClassSpecMinorVersion(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalEdgeConfigurationListStepTriggerSource(System.String,System.String)">
            <summary>
            This attribute is not for customer use.
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalEdgeConfigurationListStepTriggerSource(System.String,System.String@)">
            <summary>
            This attribute is not for customer use.
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.ReadPowerSpectrumF32(System.String,System.Double,System.Single[],System.Int32,NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo@)">
            <summary>
            Initiates a spectrum acquisition and returns power spectrum data.
            </summary>
            <param name="Channel_List"></param>
            <param name="Timeout"></param>
            <param name="Power_Spectrum_Data"></param>
            <param name="Data_Array_Size"></param>
            <param name="Spectrum_Info">Returns power spectrum data.</param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetModulePowerConsumption(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetModulePowerConsumption(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetFpgaTemperature(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAllowOutOfSpecificationUserSettings(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAllowOutOfSpecificationUserSettings(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfConditioningCalToneMode(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfConditioningCalToneMode(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRfConditioningCalToneFrequency(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRfConditioningCalToneFrequency(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAbsoluteDelay(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAbsoluteDelay(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetAmplitudeSettling(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetAmplitudeSettling(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetOverflowErrorReporting(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetOverflowErrorReporting(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLoOutPower(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLoOutPower(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetIqInPortCommonMode(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetIqInPortCommonMode(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetThermalCorrectionTemperatureResolution(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetThermalCorrectionTemperatureResolution(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetRFOutLOExportEnabled(System.String,System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetRFOutLOExportEnabled(System.String,System.Int32@)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetLOOutExportConfigureFromRfsg(System.String,System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetLOOutExportConfigureFromRfsg(System.String,System.Int32@)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.SetDigitalGain(System.String,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSA.GetDigitalGain(System.String,System.Double@)">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSAConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.IqIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.IOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Differential">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SingleEnded">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.IqAnalogEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Iq">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Spectrum">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Pfi0Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Pfi1Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi0Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi1Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi3Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi4Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi5Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi6Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rtsi7Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiStarStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RisingEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FallingEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RisingSlope">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FallingSlope">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.StartTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RefTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.AdvanceTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ArmRefTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ReadyForStartEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ReadyForAdvanceEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ReadyForRefEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.EndOfRecordEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DoneEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RefClock">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DoNotExportStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ClkOutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RefOutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LoInStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.OnBoardStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.IfCondOutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LoRefClkStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.EndOfRecordEventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.EndOrRecordEventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig0Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig1Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig3Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig4Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig5Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig6Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Dbm">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.VoltsSquared">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Dbmv">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Dbuv">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Volts">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Watts">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rbw3db">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Rbw6db">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RbwBinWidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RbwEnbw">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.NoAveraging">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RmsAveraging">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.VectorAveraging">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PeakHoldAveraging">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Uniform">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Hanning">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Hamming">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.BlackmanHarris">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExactBlackman">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Blackman">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FlatTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants._4TermBlackmanHarris">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants._7TermBlackmanHarris">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LowSideLobe">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.MostRecentSample">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FirstSample">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FirstPretriggerSample">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CurrentReadPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.OnboardClockStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RefInStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiClkStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiClk10Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ClkInStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RefOut2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.NoneStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DigitalEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SoftwareEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiTrig7Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.TimerEventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.IqPowerEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Low">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.High">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LoInjectionHighSide">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LoInjectionLowSide">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Narrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Wide">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants._1875MhzWide">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants._1875MhzNarrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants._53Mhz">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Bypass">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FsuPpm">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FsuSecondsAfterLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.FsuSecondsAfterIo">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfBand1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfBand2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfBand3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfBand4">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath4">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath5">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath6">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath7">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath8">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLoPath1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLoPath2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RFPreampDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RFPreampEnabledWhenInSignalPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RFPreampEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RFPreampAutomatic">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PreselectorDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PreselectorEnabledWhenInSignalPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PreselectorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LOYigMainCoilDriveNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LOYigMainCoilDriveFast">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalToneDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalToneLowbandRf">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalToneHighbandRf">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalToneHighbandIf">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfAttenuationTableStandard">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfAttenuationTableAcpr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.AC">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DC">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DownconverterCombinedResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DownconverterIfResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DownconverterRfResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtAlignmentAbort">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtAlignmentCommit">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalAbort">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalCommit">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalDefault">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfAttenuationCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfResponseCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLo1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLo2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLo3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLoExportCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalMechanicalAttenuatorDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRefLevelCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalGainReferenceCalibration">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ReferenceTriggerStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalDigitizerSelfCal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalOmitNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalPreselectorAllignment">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalGainReference">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalIfFlatness">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalLoSelfCal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalPreselectorAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalAmplitudeAccuracy">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalResidualLoPower">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SelfCalImageSuppresion">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.StartTriggerStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SyncStartTriggerStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SyncRefTriggerStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SyncAdvanceTriggerStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.VsaCombinedResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.VsaIfResponse">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.NiextCalIfAttenuationTableStandard">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.NiextCalIfAttenuationTableAcpr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalClkOutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtAllignmentPreselector">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPathNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath4">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath5">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath6">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath7">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath8">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath9">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath10">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath11">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath12">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath13">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath14">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath15">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPath16">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfPreselectorPathExternalFilter">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.StepGainDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.StepGainEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.NotchFilterDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.NotchFilterEnabledWhenInSignal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.NotchFilterEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SignalCondioningEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SignalCondioningBypassed">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.MinHoldAveraging">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ScalarAveraging">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LogAveraging">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.Gaussian">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.KaiserBessel">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.User">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DownconverterLo2OutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath9">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath10">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalIfFilterPath11">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLoPath3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLoPath4">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalLoPath5">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalToneLowbandRfWithoutAlc">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.CalToneCombGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfLowbandSignalConditioningPath1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfLowbandSignalConditioningPath2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfLowbandSignalConditioningPath3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfLowbandSignalConditioningPath4">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ExtCalRfLowbandSignalConditioningPath5">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DigitalLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ResetStepsToOmitNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ResetStepsToOmitRoutes">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SynthesizerAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ErrorReportingWarning">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.ErrorReportingDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PXIeDStarBStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PXIeDStarCStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.DCOffset">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.SecondaryStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RefIn2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.PxiClkMasterStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfsaRFOutLOExportEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfsaRFOutLOExportDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.RfsaRFOutLOExportUnspecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LOOutExportConfigureFromRfsgEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAConstants.LOOutExportConfigureFromRfsgDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.absoluteInitialX">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.relativeInitialX">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.xIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.actualSamples">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.gain">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.reserved1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_wfmInfo.reserved2">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.initialFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.frequencyIncrement">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.numberOfSpectralLines">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.reserved1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.reserved2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.reserved3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.reserved4">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_spectrumInfo.reserved5">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.SmtSpectrumInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.SmtSpectrumInfo.spectrumType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.SmtSpectrumInfo.linearDB">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.SmtSpectrumInfo.window">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.SmtSpectrumInfo.windowSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.SmtSpectrumInfo.FFTSize">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSA_coefficientInfo">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_coefficientInfo.offset">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_coefficientInfo.gain">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_coefficientInfo.reserved1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSA_coefficientInfo.reserved2">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSAProperties">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.AcquisitionType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ReferenceLevel">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.Attenuation">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MixerLevel">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqCarrierFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqRate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.NumberOfSamplesIsFinite">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.NumberOfSamples">
            <summary>
            System.Int64
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.NumberOfRecordsIsFinite">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.NumberOfRecords">
            <summary>
            System.Int64
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpectrumCenterFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CenterFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpectrumSpan">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.PowerSpectrumUnits">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ResolutionBandwidth">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ResolutionBandwidthType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.NumberOfSpectralLines">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpectrumAveragingMode">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpectrumNumberOfAverages">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FftWindowType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FftWindowSize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FftSize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FetchRelativeTo">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FetchOffset">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RecordsDone">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefClockSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefClockRate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedRefClockOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitizerSampleClockTimebaseSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitizerSampleClockTimebaseRate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.PxiChassisClk10Source">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.StartTriggerType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalEdgeStartTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalEdgeStartTriggerEdge">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedStartTriggerOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefTriggerType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefTriggerPretriggerSamples">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalEdgeRefTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalEdgeRefTriggerEdge">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqPowerEdgeRefTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqPowerEdgeRefTriggerLevel">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqPowerEdgeRefTriggerSlope">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefTriggerMinimumQuietTime">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedRefTriggerOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefTriggerDelay">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.StartToRefTriggerHoldoff">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefToRefTriggerHoldoff">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.AdvanceTriggerType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalEdgeAdvanceTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedAdvanceTriggerOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ArmRefTriggerType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalEdgeArmRefTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedReadyForStartEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedReadyForAdvanceEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedReadyForRefEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedEndOfRecordEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedDoneEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DownconverterLoopBandwidth">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalIfEqualizationEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DownconverterGain">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoInjectionSide">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitizerVerticalRange">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.EnableFractionalResampling">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SerialNumber">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DeviceTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.TemperatureReadInterval">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.Cache">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.InterchangeCheck">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DriverSetup">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.QueryInstrumentStatus">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RangeCheck">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RecordCoercions">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.Simulate">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpecificDriverDescription">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpecificDriverPrefix">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpecificDriverVendor">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpecificDriverRevision">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SupportedInstrumentModels">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.InstrumentManufacturer">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.InstrumentModel">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.InstrumentFirmwareRevision">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LogicalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IoResourceDescriptor">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ActiveConfigurationList">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ActiveConfigurationListStep">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalRfPathSelection">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DataTransferBlockSize">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DataTransferMaximumBandwidth">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitizerDitherEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitizerTemperature">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DownconverterCenterFrequency">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExternalGain">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FrequencySettling">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FrequencySettlingUnits">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.If1AttenValue">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.If2AttenValue">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfAttenuation">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfFilter">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfOutputFrequency">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoTemperature">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MechanicalAttenuatorEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MemorySize">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ModuleRevision">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pEnabled">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pEndpointOverflow">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pEndpointSize">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pFifoEndpointCount">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pMostSamplesAvailableInEndpoint">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pOnboardMemoryEnabled">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pSamplesAvailableInEndpoint">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.P2pSamplesTransferred">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.PhaseOffset">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfAttenuationIndex">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfAttenuationTable">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.TimerEventInterval">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalIfAttenuationIndex">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalRfElectronicAttenuationIndex">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalRfMechanicalAttenuationIndex">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalIfFilterSelection">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalLoPathSelection">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalLo1Attenuation">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalLo2Attenuation">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalLo3Attenuation">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ReadyForStartEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ReadyForAdvanceEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ReadyForRefEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.EndOfRecordEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DoneEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.StartTriggerTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefTriggerTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.AdvanceTriggerTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DeviceInstantaneousBandwidth">
            <summary>
            double  
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ConfigurationListStepInProgress">
            <summary>
            long
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MixerLevelOffset">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MechanicalAttenuation">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfPreampEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfOutputPowerLevel">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfOutputPowerLevelOffset">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DownconvertorPreselectorEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.PreselectorEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoExportEnabled">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoYigMainCoilDrive">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.PreselectorPresent">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfPreampPresent">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DownconvertorCalToneMode">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalToneMode">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DownconvertorCalToneFrequency">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalToneFrequency">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalIfAttenuationTableSelection">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MinimumAcpr">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpectrumOspSamplingRatio">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalibrationCorrectionThroughFilter">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalibrationCorrection300KhzFilter">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalibrationCorrection5MhzFilter">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ChannelCoupling">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.OspDataScalingFactor">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.AllowMoreRecordsThanMemory">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfAttenuationStepSize">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.StepGainEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SignalConditioningEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfConditioningDownConversionEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfPreselectorFilter">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.NotchFilterEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfFilterBandwidth">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LowFrequencyByPassEnabled">
            <summary>
            Int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FpgaBitFilePath">
            <summary>
            String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SmoothSpectrumEnabled">
            <summary>
            Int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfConditioningTemperature">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IfConditioningTemperature">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FftWindowShapeFactor">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoSource">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DdcRefTriggerOverride">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MinimumReconfigTime">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ConfigurationListStepTriggerSource">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ReconfigurationTriggerSource">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ContiguousMultiRecord">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.TimerStartSource">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfPreselectorCalToneMode">
            <summary>
            Int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfPreselectorCalToneFrequency">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalToneStepAttenuation">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalTonePowerReferredToRfIn">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqInPortCarrierrFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqInportTerminalConfiguration">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqInPortVerticalRange">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncAdvanceTriggerMaster">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncAdvanceTriggerDistLine">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqInPortTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.InputPort">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoInPower">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoPllFractionalModeEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoFrequencyStepSize">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncStartTriggerMaster">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncStartTriggerDistLine">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncRefTriggerMaster">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncRefTriggerDistLine">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncRefTriggerDelayEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncSampleClockMaster">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SyncSampleClockDistLine">
            <summary>
            String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DecimationDelay">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqAnalogEdgeRefTriggerSource">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqAnalogEdgeRefTriggerSlope">
            <summary>
            RfsaIqAnalogEdgeRefTriggerSlope
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqAnalogEdgeRefTriggerLevel">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqAnalogEdgeRefTriggerHysteresis">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DownconvertorFrequencyOffset">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitizerSampleClockRate">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ExportedDigitizerSampleClockOutputTerminal">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.Lo2ExportEnabled">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalibrationCorrection100mhzFilter">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalibrationCorrection320mhzFilter">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalibrationCorrection765mhzFilter">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalDigitizerId">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalRfLowbandSignalConditioningPathSelection">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfHighPassFiltering">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.CalIfAttenuationTableSize">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MaxDeviceInstantaneousBandwidth">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.MaxIQRate">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.NoiseSourcePowerEnabled">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FpgaTargetName">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SubspanOverlap">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.PreselectorTuningDacValue5665">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DeviceConfigurationTemperature">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FftWidth">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.InputIsolationEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.StartTriggerDelay">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqAnalogEdgeRefTrigger">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RefTriggerOspDelayEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ChannelCount">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.GroupCapabilities">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpecificDriverClassSpecMajorVersion">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.SpecificDriverClassSpecMinorVersion">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ModulePowerConsumption">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.FpgaTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.AllowOutOfSpecificationUserSettings">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfConditioningCalToneMode">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RfConditioningCalToneFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.AbsoluteDelay">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.AmplitudeSettling">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.OverflowErrorReporting">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LoOutPower">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalEdgeConfigurationListStepTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.IqInPortCommonMode">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.ThermalCorrectionTemperatureResolution">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.RFOutLOExportEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.LOOutExportConfigureFromRfsg">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSAProperties.DigitalGain">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSG">
            <summary>
            
            </summary>
        </member>
        <member name="P:NationalInstruments.ModularInstruments.Interop.niRFSG.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            niRFSG_init
            C Function Prototype
            ViStatus&#160;niRFSG_init&#160;(ViRsrc&#160;resourceName, ViBoolean&#160;idQuery, ViBoolean&#160;resetDevice, ViSession*&#160;vi);
            Purpose
            Opens a session to the device you specify for the resourceName parameter and returns a ViSession handle that you use to identify the NI-RFSG device in all subsequent NI-RFSG function calls.
            
            
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Resource_Name">
            
            resourceName
            ViRsrc
            Specifies the resource name of the device to initialize.
            
            
            
            For NI-DAQmx devices, the syntax is the device name specified in MAX. Typical default names for NI-DAQmx devices in MAX are Dev2 or PXISlot2. You can rename an NI-DAQmx device by right-clicking on the name in MAX.
            
            You can also specify the name of an IVI logical name configured with the IVI Configuration utility. For additional information, refer to the IVI topic of the Measurement &amp; Automation Explorer Help. 
            
            
            Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use an IVI logical name, make sure the name is identical to the name shown in the IVI Configuration Utility.
            
            
            </param>
            <param name="ID_Query">
            
            idQuery
            ViBoolean
            Specifies whether you want NI-RFSG to perform an ID query.
            
            
            
            Defined Values:
            
            
            VI_TRUE (1) Perform ID query.VI_FALSE (0)Do not perform ID query.
            
            
            
            
            </param>
            <param name="Reset">
            
            reset
            ViBoolean
            Specifies whether you want to reset the NI-RFSG device during the initialization procedure.
            
            
            Defined Values:
            VI_TRUE (1)Reset device.VI_FALSE (0)Do not reset device.
            
            
            </param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            niRFSG_InitWithOptions
            C Function Prototype
            ViStatus&#160;niRFSG_InitWithOptions&#160;(ViRsrc&#160;resourceName, ViBoolean&#160;idQuery, ViBoolean&#160;resetDevice, ViConstString&#160;optionString, ViSession*&#160;vi);
            
            Purpose
            
            Opens a session to the device you specify using the resourceName parameter and 
            returns a ViSession handle that you use to identify the NI-RFSG device in all subsequent NI-RFSG function calls.  This function also configures the device through the optionString parameter.
            
            
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Resource_Name">
            
            resourceName
            ViRsrc
            Specifies the resource name of the device to initialize.
            
            
            
            For NI-DAQmx devices, the syntax is the device name specified in MAX. Typical default names for NI-DAQmx devices in MAX are Dev2 or PXISlot2. You can rename an NI-DAQmx device by right-clicking on the name in MAX.
            
            You can also specify the name of an IVI logical name configured with the IVI Configuration utility. For additional information, refer to the IVI topic of the Measurement &amp; Automation Explorer Help. 
            
            
            Caution&#160;&#160;NI-DAQmx device names are not case-sensitive. However, all IVI names, such as logical names, are case-sensitive. If you use an IVI logical name, make sure the name is identical to the name shown in the IVI Configuration Utility.
            
            
            </param>
            <param name="ID_Query">
            
            idQuery
            ViBoolean
            Specifies whether you want NI-RFSG to perform an ID query.
            
            
            
            Defined Values:
            
            
            VI_TRUE (1) Perform ID query.VI_FALSE (0)Do not perform ID query.
            
            
            
            
            </param>
            <param name="Reset">
            
            reset
            ViBoolean
            Specifies whether you want to reset the NI-RFSG device during the initialization procedure.
            
            
            Defined Values:
            VI_TRUE (1)Reset device.VI_FALSE (0)Do not reset device.
            
            
            </param>
            <param name="Option_String">
            
            
            optionString
            ViConstString
            Specifies the initial value of certain attributes for the session.  The following table lists the attributes and the name you pass in this parameter to identify the attribute.
            
            
            
            Name              Attribute Name  
            RangeCheckNIRFSG_ATTR_RANGE_CHECK
            
            QueryInstrStatus  NIRFSG_ATTR_QUERY_INSTRUMENT_STATUS   
            
            CacheNIRFSG_ATTR_CACHE
               
            
            
            RecordCoercionsNIRFSG_ATTR_RECORD_COERCIONS
            
            
            
            DriverSetupNIRFSG_ATTR_DRIVER_SETUP
            
            SimulateNIRFSG_ATTR_SIMULATE
            
            
            
            
            The format of this string consists of the following relations:
             &quot;AttributeName=Value&quot; 
            
            where
             AttributeName is the name of the attribute and Value is the value to which the attribute is set.  To set multiple attributes, separate their assignments with a comma, as shown in the following option string:  
            
            &quot;RangeCheck=1,QueryInstrStatus=0,Cache=1,DriverSetup=AWG:pxi1slot4&quot;
            
            
            
            
            The DriverSetup string is required in order to simulate a specific device.
            
            </param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.#ctor(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureRF(System.Double,System.Double)">
            <summary>
            
            
            niRFSG_ConfigureRF
            
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureRF&#160;(ViSession&#160;vi, ViReal64&#160;frequency, ViReal64&#160;powerLevel);
            
            Purpose
            
            Configures the frequency and power level of the RF output signal. The NI 5670/5671/5672 device must be in the Configuration state before calling this function.  The NI 5650/5651/5652/5673/5673E device can be in the Configuration or Generation state when you call this function.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            
            </summary>
            <param name="Frequency">
            
            frequency
            ViReal64
            Specifies the frequency of the generated RF signal. For arbitrary waveform generation, this parameter specifies the center frequency of the signal.
            
            
            Units: Hz
            
            </param>
            <param name="Power_Level">
            
            
            powerLevel
            ViReal64
            Specifies either the average power level or peak power level of the generated RF signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute .
            
            
            
            Units: dBm
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureGenerationMode(System.Int32)">
            <summary>
            
            niRFSG_ConfigureGenerationMode
            
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureGenerationMode&#160;(ViSession&#160;vi, ViInt32&#160;generationMode);
            Purpose
            Configures the NI-RFSG device to generate a continuous tone (CW) sine tone, apply I/Q (vector) modulation to the RF output signal, or generate arbitrary waveforms according to scripts. The NI-RFSG device must be in the Configuration state before you call this function.
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5653/5672/5673/5673E 
            
            </summary>
            <param name="Generation_Mode">
            
            generationMode
            ViInt32
            Specifies the mode used by NI-RFSG to generate an RF output signal.
            
            
            Defined Values:
            NIRFSG_VAL_CWNI-RFSG generates a signal in CW mode.
            NIRFSG_VAL_ARB_WAVEFORMNI-RFSG generates a signal in arb waveform mode.
            NIRFSG_VAL_SCRIPTNI-RFSG generates a signal in script mode.
            
            Default Value: NIRFSG_VAL_CW
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.AllocateArbWaveform(System.String,System.Int32)">
            <summary>
            
            niRFSG_AllocateArbWaveform
            C Function Prototype
            ViStatus&#160;niRFSG_AllocateArbWaveform&#160;(ViSession&#160;vi,&#160;ViConstString&#160;name,&#160;ViInt32&#160;size_in_samples);
            Purpose
            Allocates onboard memory space for the arbitrary waveform. Use this function to specify the total size of a waveform before writing the data.  You only need to use this function if you are calling the niRFSG_WriteArbWaveform function multiple times to write a large waveform in smaller blocks. The NI-RFSG device must be in the Configuration state before you call this function.
            
            
            Supported Devices: NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            
            </summary>
            <param name="Name">
            
            name
            ViConstString
            Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
            
            </param>
            <param name="Size_In_Samples">
            
            size_in_samples
            ViInt32
            Specifies the number of samples to reserve in the onboard memory for the specified waveform.  Each I/Q pair is considered one sample.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteArbWaveform(System.String,System.Int32,System.Double[],System.Double[],System.Boolean)">
            <summary>
            
            niRFSG_WriteArbWaveform
            C Function Prototype
            ViStatus&#160;niRFSG_WriteArbWaveform&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples, ViReal64[]&#160;iData, ViReal64[]&#160;qData, ViBoolean&#160;moreDataPending);
            Purpose
            Writes an arbitrary waveform to the NI-RFSG device. This function configures the I and Q vectors of a complex baseband signal. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the moreDataPending parameter is ignored. The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
            
            
            Note&#160;&#160;On the NI PXIe-5672/5673/5673E, the moreDataPending parameter is always
            ignored. To write data in blocks on these devices, you must allocate the waveform before writing it.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Name">
            
            name
            ViConstString
            Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
            
            </param>
            <param name="Number_Of_Samples">
            
            numberOfSamples
            ViInt32
            Specifies the number of samples in both the iData and qData arrays. The iData and qData arrays must have the same length. If the NIRFSG_ATTR_ARB_WAVEFORM_QUANTUM attribute value is q, then the number of samples should be a multiple of q. The specified number of samples cannot be 0.
            
            </param>
            <param name="IData">
            
            iData
            ViReal64[]
            Specifies the in-phase (I) component of the complex baseband signal.
            
            </param>
            <param name="QData">
            
            qData
            ViReal64[]
            Specifies the quadrature (Q) component of the complex baseband signal.
            
            </param>
            <param name="More_Data_Pending">
            
            moreDataPending
            ViBoolean
            Specifies whether or not the data block contains the end of the waveform.  Set this parameter to VI_TRUE to allow data to be appended later to the waveform. Splitting the waveform into multiple data blocks can reduce the memory requirements of the write operation. Append data to a previously written waveform by using the same waveform in the name parameter. Set moreDataPending to VI_FALSE to indicate that this data block contains the end of the waveform. If the waveform is already allocated, this parameter is ignored.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteArbWaveformComplexF64(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.niComplexNumber[],System.Boolean)">
            <summary>
            
            niRFSG_WriteArbWaveformComplexF64
            C Function Prototype
            ViStatus&#160;niRFSG_WriteArbWaveformComplexF64&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples, NIComplexNumber&#160;wfmData[], ViBoolean&#160;moreDataPending);
            Purpose
            Writes an arbitrary waveform to the NI-RFSG device starting at the position of the last data written in onboard memory. This function accepts the complex baseband data in the form of complex doubles. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the moreDataPending parameter is ignored.  
            The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
            
            
            
            Note&#160;&#160;On the NI PXIe-5672/5673/5673E, the moreDataPending parameter is always
            ignored. To write data in blocks on these devices, you must allocate the waveform before writing it.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Name">
            
            name
            ViConstString
            Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
            
            </param>
            <param name="Number_Of_Samples">
            
            numberOfSamples
            ViInt32
            Specifies the number of samples in both of the data arrays.
            
            </param>
            <param name="Data">
            
            
            data
            NIComplexNumber[]
            Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in the size_in_samples parameter in the niRFSG_AllocateArbWaveform function.
             
            </param>
            <param name="More_Data_Pending">
            
            moreDataPending
            ViBoolean
            Specifies whether or not the data block contains the end of the waveform.  Set this parameter to VI_TRUE to allow data to be appended later to the waveform. Splitting the waveform into multiple data blocks can reduce the memory requirements of the write operation. Append data to a previously written waveform by using the same waveform in the name parameter. Set moreDataPending to VI_FALSE to indicate that this data block contains the end of the waveform. If the waveform is already allocated, this parameter is ignored.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteArbWaveformComplexF32(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.niComplexNumberF32[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="Name"></param>
            <param name="Number_Of_Samples"></param>
            <param name="Data"></param>
            <param name="More_Data_Pending"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteArbWaveformF32(System.String,System.Int32,System.Single[],System.Single[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="Name"></param>
            <param name="Number_Of_Samples"></param>
            <param name="iData"></param>
            <param name="qData"></param>
            <param name="More_Data_Pending"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteArbWaveformComplexI16(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.niComplexI16[])">
            <summary>
            
            niRFSG_WriteArbWaveformComplexI16
            C Function Prototype
            ViStatus&#160;niRFSG_WriteArbWaveformComplexI16&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples,  NIComplexI16&#160;wfmData[]);
            Purpose
            Writes an arbitrary waveform to the NI-RFSG device starting at the position of the last data written in onboard memory. This function accepts the interleaved I/Q data of a complex baseband signal. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the More_Data_Pending parameter is ignored. The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
            
            Note&#160;&#160;This function only supports NIRFSG_VAL_PEAK_POWER mode as specified in the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute.  If a waveform is downloaded using this function, NIRFSG_ATTR_POWER_LEVEL_TYPE cannot be changed to NIRFSG_VAL_AVERAGE_POWER mode without causing error in the output.
            
            Supported Devices&#58; NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Name">
            
            name
            ViConstString
            Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
            
            </param>
            <param name="Number_Of_Samples">
            
            numberOfSamples
            ViInt32
            Specifies the number of samples in the data array.
            
            </param>
            <param name="Data">
            
            
            data
            niComplexI16[]
            Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in the size_in_samples parameter in the niRFSG_AllocateArbWaveform function.
             
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteArbWaveformComplexI16(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.RfsgNIComplexI16[])">
            <summary>
            
            niRFSG_WriteArbWaveformComplexI16
            C Function Prototype
            ViStatus&#160;niRFSG_WriteArbWaveformComplexI16&#160;(ViSession&#160;vi, ViConstString&#160;waveformName, ViInt32&#160;numberOfSamples,  NIComplexI16&#160;wfmData[]);
            Purpose
            Writes an arbitrary waveform to the NI-RFSG device starting at the position of the last data written in onboard memory. This function accepts the interleaved I/Q data of a complex baseband signal. If the waveform to be written is already allocated using the niRFSG_AllocateArbWaveform function, the More_Data_Pending parameter is ignored. The NI 5670/5671 must be in the Configuration state before you call this function. When streaming is enabled, this function can be called when the NI PXIe-5672/5673/5673E is in the Generation state.
            
            Note&#160;&#160;This function only supports NIRFSG_VAL_PEAK_POWER mode as specified in the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute.  If a waveform is downloaded using this function, NIRFSG_ATTR_POWER_LEVEL_TYPE cannot be changed to NIRFSG_VAL_AVERAGE_POWER mode without causing error in the output.
            
            Supported Devices&#58; NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Name">
            
            name
            ViConstString
            Specifies the name used to identify the waveform. This string is case-insensitive and alphanumeric, and it does not use reserved words.
            
            </param>
            <param name="Number_Of_Samples">
            
            numberOfSamples
            ViInt32
            Specifies the number of samples in the data array.
            
            </param>
            <param name="Data">
            
            
            data
            RfsgNIComplexI16[]
            Specifies the array of data to load into the waveform. The array must have at least as many elements as the value in the size_in_samples parameter in the niRFSG_AllocateArbWaveform function.
             
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SelectArbWaveform(System.String)">
            <summary>
            
            niRFSG_SelectArbWaveform
            C Function Prototype
            ViStatus&#160;niRFSG_SelectArbWaveform&#160;(ViSession&#160;vi, ViConstString&#160;name);
            Purpose
            Specifies the waveform that is generated upon a call to the niRFSG_Initiate function when the generationMode parameter of the niRFSG_ConfigureGenerationMode function is set to NIRFSG_VAL_ARB_WAVEFORM. You must specify a waveform using the name parameter if you have written multiple waveforms. The NI-RFSG device must be in the Configuration  state before you call this function. 
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Name">
            
            name
            ViConstString
            Specifies the name of the stored waveform to generate. This is a case-insensitive alphanumeric string that does not use reserved words. NI-RFSG sets the NIRFSG_ATTR_ARB_SELECTED_WAVEFORM attribute to this value.
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ClearArbWaveform(System.String)">
            <summary>
            
            niRFSG_ClearArbWaveform
            
            C Function Prototype
            ViStatus&#160;niRFSG_ClearArbWaveform&#160;(ViSession&#160;vi, ViConstString&#160;name);
            Purpose
            Deletes a specified waveform from the pool of  currently defined waveforms. The NI-RFSG device must be in the Configuration state before you call this function.
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            </summary>
            <param name="Name">
            
            name
            ViConstString
            Name of the stored waveform to delete.
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ClearAllArbWaveforms">
            <summary>
            
            niRFSG_ClearAllArbWaveforms
            C Function Prototype
            ViStatus&#160;niRFSG_ClearAllArbWaveforms&#160;(ViSession&#160;vi);
            Purpose
            Deletes all currently defined waveforms and scripts. The NI-RFSG device must be in the Configuration  state before you call this function.
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureSignalBandwidth(System.Double)">
            <summary>
            
            niRFSG_ConfigureSignalBandwidth
            
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureSignalBandwidth&#160;(ViSession&#160;vi, ViReal64&#160;signalBandwidth);
            Purpose
            Configures the signal bandwidth of the arbitrary waveform. The NI-RFSG device must be in the Configuration state before you call this function. 
            
            NI-RFSG defines signal bandwidth as twice the maximum baseband signal deviation from 0 Hz. Usually, the baseband signal center frequency is 0 Hz. In such cases, the signal bandwidth is simply the baseband signal minimum frequency subtracted from its maximum frequency, or fmax minus fmin. NI-RFSG uses this value to optimally configure the center frequency of the upconverter to help minimize phase noise. The generated signal is not filtered to achieve the set bandwidth. However, specifying a bandwidth smaller than the actual bandwidth of the signal could potentially result in spectral distortion.
            
            
            Note&#160;&#160;Based on your signal bandwidth, NI-RFSG decides whether to configure the upconverter center frequency on the NI 5670/5671/5672 in increments of 1 MHz or 5 MHz. Failure to configure signal bandwidth may result in
            the signal being placed outside the upconverter passband.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Signal_Bandwidth">
            
            signalBandwidth
            ViReal64
            Specifies the signal bandwidth used by NI-RFSG to generate an RF output signal. NI-RFSG sets the NIRFSG_ATTR_SIGNAL_BANDWIDTH  attribute to this value. 
            
            Valid Values:
            0 Hz to 20 MHz
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureDigitalModulationUserDefinedWaveform(System.Int32,System.SByte[])">
            <summary>
            
            niRFSG_ConfigureDigitalModulationUserDefinedWaveform
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureDigitalModulationUserDefinedWaveform&#160;(ViSession&#160;vi,&#160;ViInt32&#160;numberOfSamples,&#160;ViInt8[]&#160;userDefinedWaveform);
            Purpose
            Specifies the message signal used for digital modulation when NIRFSG_ATTR_DIGITAL_MODULATION_WAVEFORM_TYPE is set to NIRFSG_VAL_USER_DEFINED.Supported Devices: NI PXI/PXIe-5650/5651/5652
            
            
            </summary>
            <param name="Number_Of_Samples">
            
            numberOfSamples
            ViInt32
            Specifies the number of samples in the message signal.
            
            </param>
            <param name="User_Defined_Waveform">
            
            userDefinedWaveform
            ViInt8[]
            Specifies the user-defined message signal used for digital modulation.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigurePowerLevelType(System.Int32)">
            <summary>
            
            niRFSG_ConfigurePowerLevelType
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigurePowerLevelType&#160;(ViSession&#160;vi, ViInt32&#160;power_level_type);
            Purpose
            Specifies the way the driver interprets the NIRFSG_ATTR_POWER_LEVEL attribute. In average power mode, NI-RFSG automatically scales waveform data to use the maximum dynamic range.  In peak power mode, waveforms are scaled according to the NIRFSG_ATTR_SOFTWARE_SCALING_FACTOR attribute.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            
            </summary>
            <param name="Power_Level_Type">
            
            power_level_type
            ViInt32
            Specifies the way the driver interprets the value of the NIRFSG_ATTR_POWER_LEVEL attribute. NI-RFSG sets the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute to this value.
            
             
                                                                        Average Power (default)
                                Indicates the desired power averaged in time. The driver maximizes the dynamic range by scaling the I/Q waveform so that its peak magnitude is equal to one. If your write more than one waveform, NI-RFSG scales each waveform without preserving the power level ratio between the waveforms.
                            
                                                                        Peak Power
                                
                                Indicates the maximum power level of the RF signal averaged over one period of the RF carrier frequency (the peak envelope power). This setting requires that the magnitude of the I/Q waveform must always be less than or equal to one. When using peak power, the power level of the RF signal matches the specified power level at moments when the magnitude of the I/Q waveform equals one. If you write more than one waveform, the relative scaling between waveforms is preserved. In peak power mode, waveforms are scaled according to the NIRFSG_ATTR_ARB_WAVEFORM_SOFTWARE_SCALING_FACTOR attribute.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.CreateConfigurationList(System.String,System.Int32,NationalInstruments.ModularInstruments.Interop.niRFSGProperties[],System.Boolean)">
            <summary>
            
            niRFSG_CreateConfigurationList
            C Function Prototype
            ViStatus&#160;niRFSG_CreateConfigurationList&#160;(ViSession&#160;vi, ViConstString&#160;listName, ViInt32&#160;numberOfAttributes, const ViAttr&#160;configurationListAttributes[], ViBoolean&#160;setAsActiveList);
            Purpose
            Creates an empty configuration list.  After a configuration list is created, the list is enabled using the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute.  Call the niRFSG_CreateConfigurationListStep function to add steps to the configuration list.
            
            Supported Devices&#58; NI PXIe-5650/5651/5652/5673E
            
            </summary>
            <param name="List_Name">
            
            listName
            ViConstString
            Specifies the name of the configuration list.  This string may not contain spaces.
            
            </param>
            <param name="Number_Of_Attributes">
            
            numberOfAttributes
            const ViInt32
            Specifies size of the <strong class="Monospace">configurationListAttributes</strong> parameter. 
            
            </param>
            <param name="Configuration_List_Attributes">
            
            configurationListAttributes[]
            const ViAttr
            Specifies the attributes that the user intends to change between configuration list steps.  Calling the niRFSG_CreateConfigurationList function allocates space for each of the configuration list attributes.  When you use an NI-RFSG Set attribute function to set one of the attributes in the configuration list, that attribute is set for one of the configuration list steps.  Use the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute to specify which configuration list step to configure.
            
            
            
            
            The following attributes are valid values for this parameter's array elements:
            
            NIRFSG_ATTR_FREQUENCY
            
            NIRFSG_ATTR_POWER_LEVEL
            
            NIRFSG_ATTR_PHASE_OFFSET
            
            NIRFSG_ATTR_TIMER_EVENT_INTERVAL
            
            NIRFSG_ATTR_FREQUENCY_SETTLING
            
            
            
            
            </param>
            <param name="Set_As_Active_List">
            
            setAsActiveList
            ViBoolean
            Sets this list as the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute when this parameter is enabled.   NI recommends that you set this parameter to VI_TRUE when creating the list.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.CreateConfigurationListStep(System.Boolean)">
            <summary>
            
            niRFSG_CreateConfigurationListStep
            C Function Prototype
            ViStatus&#160;niRFSG_CreateConfigurationListStep&#160;(ViSession&#160;vi, ViBoolean&#160;setAsActiveStep);
            Purpose
            Creates a new configuration list step in the configuration list specified by the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute.  When you create a configuration list step, a new instance of each attribute specified by the configuration list attributes is created.  Configuration list attributes are specified when a configuration list is created.  The new instance of an attribute can be accessed with any Set attribute function using the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST and NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attributes.
            
            Supported Devices&#58; NI PXIe-5650/5651/5652/5673E
            
            </summary>
            <param name="Set_As_Active_Step">
            
            setAsActiveStep
            ViBoolean
            Sets this step as the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST_STEP attribute list specified by the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute.  NI recommends that you set this parameter to VI_TRUE when creating the list steps.
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.DeleteConfigurationList(System.String)">
            <summary>
            
            niRFSG_DeleteConfigurationList
            C Function Prototype
            ViStatus&#160;niRFSG_DeleteConfigurationList&#160;(ViSession&#160;vi, ViConstString&#160;listName);
            Purpose
            Deletes a previously created configuration list and all the configuration list steps in the configuration list.  When a configuration list step is deleted, all the instances of the attributes associated with the configuration list step are also removed.
            
            Supported Devices&#58; NI PXIe-5650/5651/5652/5673E
            
            </summary>
            <param name="List_Name">
            
            listName
            ViConstString
            Specifies the name of the configuration list.  This string may not contain spaces.
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureSoftwareStartTrigger">
            <summary>
            
            niRFSG_ConfigureSoftwareStartTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureSoftwareStartTrigger&#160;(ViSession&#160;vi);
            Purpose
            Configures the Start trigger for software triggering. Refer to the niRFSG_SendSoftwareEdgeTrigger function for more information about using a software trigger.  The NI-RFSG device must be in the Configuration state before calling this function.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureDigitalEdgeStartTrigger(System.String,System.Int32)">
            <summary>
            
            niRFSG_ConfigureDigitalEdgeStartTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureDigitalEdgeStartTrigger&#160;(ViSession&#160;vi, ViConstString&#160;source, ViInt32&#160;edge);
            Purpose
            Configures the Start trigger for digital edge triggering.  The NI-RFSG device must be in the Configuration state before calling this function.
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Source">
            
            source
            ViConstString
            Specifies the source terminal for the digital edge trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE to this value. 
            Defined Values:
            
            ""Empty string.
            NIRFSG_VAL_PFI0_STRPFI 0 on the front panel SMB connector.
            NIRFSG_VAL_PFI1_STRPFI 1 on the front panel SMB connector.
            NIRFSG_VAL_PFI2_STRPFI 2 on the front panel DDC connector.
            NIRFSG_VAL_PFI3_STRPFI 3 on the front panel DDC connector.
            NIRFSG_VAL_PXI_TRIG0_STRPXI trigger line 0.
            NIRFSG_VAL_PXI_TRIG1_STRPXI trigger line 1.
            NIRFSG_VAL_PXI_TRIG2_STRPXI trigger line 2.
            NIRFSG_VAL_PXI_TRIG3_STRPXI tigger line 3.
            NIRFSG_VAL_PXI_TRIG4_STRPXI trigger line 4.
            NIRFSG_VAL_PXI_TRIG5_STRPXI trigger line 5.
            NIRFSG_VAL_PXI_TRIG6_STRPXI trigger line 6.
            NIRFSG_VAL_PXI_TRIG7_STRPXI trigger line 7.
            NIRFSG_VAL_PXI_STAR_STRPXI Star trigger line.
            
            Default Value: &quot;&quot; (empty string)
            
            
            </param>
            <param name="Edge">
            
            edge
            ViInt32
            Specifies the active edge for the Start trigger.  NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_EDGE to this value.
            Defined Values:NIRFSG_VAL_RISING_EDGERising edge trigger transition from low to high.NIRFSG_VAL_FALLING_EDGEFalling edge trigger.
            
            
            Default Value: NIRFSG_VAL_RISING_EDGE
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureP2PEndpointFullnessStartTrigger(System.Int64)">
            <summary>
            
            niRFSG_ConfigureP2PEndpointFullnessStartTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureP2PEndpointFullnessStartTrigger&#160;(ViSession&#160;vi, ViInt64&#160;p2pEndpointFullnessLevel);
            Purpose
            Configures the Start trigger to detect peer-to-peer endpoint fullness. Generation begins when the number of samples in the peer-to-peer endpoint reaches the threshold specified by the level parameter.  The NI-RFSG device must be in the Configuration state before calling this function.
            
            Note&#160;&#160;Due to an additional internal FIFO in the RF signal generator, the writer peer actually writes 2,304 bytes more than the quantity of data specified by this function to satisfy the trigger level.
            
            
            Supported Devices&#58; NI PXIe-5673E 
            
            
            </summary>
            <param name="P2P_Endpoint_Fullness_Level">
            
            p2pEndpointFullnessLevel
            ViInt64
            Specifies the quantity of data in the FIFO endpoint that asserts the trigger.  Units are samples per channel. 
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.DisableStartTrigger">
            <summary>
            
            niRFSG_DisableStartTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_DisableStartTrigger&#160;(ViSession&#160;vi);
            Purpose
            Configures the device to not wait for a Start trigger after the niRFSG_Initiate function is called. Calling the niRFSG_DisableStartTrigger function is only necessary if the Start trigger has been previously configured and now needs to be disabled.  The NI-RFSG device must be in the Configuration state before calling this function.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureSoftwareScriptTrigger(System.String)">
            <summary>
            
            niRFSG_ConfigureSoftwareScriptTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureSoftwareScriptTrigger&#160;(ViSession&#160;vi, ViConstString&#160;triggerIdentifier);
            Purpose
            Configures the Script trigger for software triggering. Refer to the niRFSG_SendSoftwareEdgeTrigger function for more information about using the software Script trigger. The NI-RFSG device must be in the Configuration state before calling this function.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Trigger_Identifier">
            
            triggerIdentifier
            ViConstString
            Specifies the Script trigger to configure.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureDigitalEdgeScriptTrigger(System.String,System.String,System.Int32)">
            <summary>
            
            niRFSG_ConfigureDigitalEdgeScriptTrigger
            Specific Function
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureDigitalEdgeScriptTrigger&#160;(ViSession&#160;vi, ViConstString&#160;triggerIdentifier, ViConstString&#160;source, ViInt32&#160;edge);
            Purpose
            Configures the specified Script trigger for digital edge triggering. The NI-RFSG device must be in the Configuration state before calling this function.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Trigger_Identifier">
            
            triggerIdentifier
            ViConstString
            Specifies the Script trigger to configure.
            
            </param>
            <param name="Source">
            
            source
            ViConstString
            Specifies the source terminal for the digital edge Script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_SOURCE to this value.
            Defined Values:
            
            ""Empty string.
            NIRFSG_VAL_PFI0_STRPFI 0 on the front panel SMB connector.
            NIRFSG_VAL_PFI1_STRPFI 1 on the front panel SMB connector.
            NIRFSG_VAL_PFI2_STRPFI 2 on the front panel DDC connector.
            NIRFSG_VAL_PFI3_STRPFI 3 on the front panel DDC connector.
            NIRFSG_VAL_PXI_TRIG0_STRPXI trigger line 0.
            NIRFSG_VAL_PXI_TRIG1_STRPXI trigger line 1.
            NIRFSG_VAL_PXI_TRIG2_STRPXI trigger line 2.
            NIRFSG_VAL_PXI_TRIG3_STRPXI tigger line 3.
            NIRFSG_VAL_PXI_TRIG4_STRPXI trigger line 4.
            NIRFSG_VAL_PXI_TRIG5_STRPXI trigger line 5.
            NIRFSG_VAL_PXI_TRIG6_STRPXI trigger line 6.
            NIRFSG_VAL_PXI_TRIG7_STRPXI trigger line 7.
            NIRFSG_VAL_PXI_STAR_STRPXI Star trigger line.
            
            Default Value: &quot;&quot; (empty string)
            
            </param>
            <param name="Edge">
            
            edge
            ViInt32
            Specifies the active edge for the digital edge Script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_EDGE to this value.
            Defined Values:NIRFSG_VAL_RISING_EDGERising edge trigger transition from low to high.NIRFSG_VAL_FALLING_EDGEFalling edge trigger.
            
            Default Value: NIRFSG_VAL_RISING_EDGE
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureDigitalLevelScriptTrigger(System.String,System.String,System.Int32)">
            <summary>
            
            niRFSG_ConfigureDigitalLevelScriptTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureDigitalLevelScriptTrigger&#160;(ViSession vi, ViConstString Trigger_Identifier, ViConstString Source, ViInt32 Level);
            
            Purpose
            Configures a specified Script trigger for digital level triggering.  The NI-RFSG device must be in the Configuration state before calling this function.
            
            Supported Devices: NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            
            </summary>
            <param name="Trigger_Identifier">
            
            triggerIdentifier
            ViConstString
            Specifies the Script trigger to configure.
            
            </param>
            <param name="Source">
            
            source
            ViConstString
            Specifies the trigger source terminal for the digital level script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_SOURCE to this value. 
            Defined Values:
            
            ""Empty string.
            
            NIRFSG_VAL_PFI0_STRPFI 0 on the front panel SMB connector.
            NIRFSG_VAL_PFI1_STRPFI 1 on the front panel SMB connector.
            NIRFSG_VAL_PFI2_STRPFI 2 on the front panel DDC connector.
            NIRFSG_VAL_PFI3_STRPFI 3 on the front panel DDC connector.
            NIRFSG_VAL_PXI_TRIG0_STRPXI trigger line 0.
            NIRFSG_VAL_PXI_TRIG1_STRPXI trigger line 1.
            NIRFSG_VAL_PXI_TRIG2_STRPXI trigger line 2.
            NIRFSG_VAL_PXI_TRIG3_STRPXI tigger line 3.
            NIRFSG_VAL_PXI_TRIG4_STRPXI trigger line 4.
            NIRFSG_VAL_PXI_TRIG5_STRPXI trigger line 5.
            NIRFSG_VAL_PXI_TRIG6_STRPXI trigger line 6.
            NIRFSG_VAL_PXI_TRIG7_STRPXI trigger line 7.
            NIRFSG_VAL_RTSI0_STRRTSI trigger line 0.
            NIRFSG_VAL_RTSI1_STRRTSI trigger line 1.
            NIRFSG_VAL_RTSI2_STRRTSI trigger line 2.
            NIRFSG_VAL_RTSI3_STRRTSI trigger line 3.
            NIRFSG_VAL_RTSI4_STRRTSI trigger line 4.
            NIRFSG_VAL_RTSI5_STRRTSI trigger line 5.
            NIRFSG_VAL_RTSI6_STRRTSI trigger line 6.
             NIRFSG_VAL_PXI_STAR_STRPXI STAR Line.
            Default Value: "" (empty string)
            
            </param>
            <param name="Level">
            
            Level
            ViInt32
            Specifies the active level for the digital level script trigger. NI-RFSG sets NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_ACTIVE_LEVEL to this value.
            Defined Values:NIRFSG_VAL_ACTIVE_HIGHNIRFSG_VAL_ACTIVE_LOW
            Default Value: NIRFSG_VAL_ACTIVE_HIGH
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.DisableScriptTrigger(System.String)">
            <summary>
            
            niRFSG_DisableScriptTrigger
            Specific Function
            C Function Prototype
            ViStatus&#160;niRFSG_DisableScriptTrigger&#160;(ViSession&#160;vi, ViConstString&#160;triggerIdentifier);
            Purpose
            Configures the device to not wait for the specified Script trigger after the niRFSG_Initiate function is called. Calling the niRFSG_DisableScriptTrigger function is only necessary if the Script trigger has been previously configured and now must be disabled. The NI-RFSG device must be in the Configuration state before you call this function.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Trigger_Identifier">
            
            triggerIdentifier
            ViConstString
            Specifies the Script trigger to configure.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SendSoftwareEdgeTrigger(System.Int32,System.String)">
            <summary>
            
            niRFSG_SendSoftwareEdgeTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_SendSoftwareEdgeTrigger&#160;(ViSession&#160;vi, ViInt32&#160;trigger, ViConstString&#160;triggerIdentifier);
            Purpose
            Forces a particular trigger to occur. The specified trigger is generated regardless of whether the trigger has been configured as a software trigger.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Trigger">
            
            trigger
            ViInt32
            Specifies the trigger to assert.
            Defined Values:NIRFSG_VAL_START_TRIGGERTransitions the device from an Idle state to a Generation state where the device can respond to sample clocks.NIRFSG_VAL_SCRIPT_TRIGGERAllows you to create sophisticated generation operations that are determined by the generation script.
            
            Default Value: NIRFSG_VAL_START_TRIGGER
            
            
            </param>
            <param name="Trigger_Identifier">
            
            triggerIdentifier
            ViConstString
            Specifies the Script trigger to configure.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureDigitalEdgeConfigurationListStepTrigger(System.String,System.Int32)">
            <summary>
            
            niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureDigitalEdgeConfigurationListStepTrigger&#160;(ViSession&#160;vi, ViConstString&#160;source, ViInt32&#160;edge);
            Purpose
            Configures the Configuration List Step trigger for digital edge triggering. The NI-RFSG device must be in the Configuration state before you call this function.
            
            Supported Devices&#58; NI PXIe-5650/5651/5652/5653/5673E 
            
            
            </summary>
            <param name="Source">
            
            source
            ViConstString
            Specifies the trigger source terminal for the digital edge Configuration List Step trigger. NI-RFSG sets the NIRFSG_ATTR_DIGITAL_EDGE_CONFIGURATION_LIST_STEP_TRIGGER_SOURCE  attribute to this value. Refer to this attribute for possible values.
            
            
            </param>
            <param name="Edge">
            
            edge
            ViInt32
            Specifies the active edge for the digital edge Configuration List Step trigger.  NI-RFSG sets NIRFSG_ATTR_DIGITAL_EDGE_CONFIGURATION_LIST_STEP_TRIGGER_EDGE to this value.
            Defined Values:NIRFSG_VAL_RISING_EDGERising edge trigger transition from low to high.NIRFSG_VAL_FALLING_EDGEFalling edge trigger.
            
            
            Default Value: NIRFSG_VAL_RISING_EDGE
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.DisableConfigurationListStepTrigger">
            <summary>
            
            niRFSG_DisableConfigurationListStepTrigger
            C Function Prototype
            ViStatus&#160;niRFSG_DisableConfigurationListStepTrigger&#160;(ViSession&#160;vi, ViConstString&#160;source, ViInt32&#160;edge);
            Purpose
            Configures the device to not receive triggers for the configuration list after the niRFSG_Initiate function is called.  The configuration list does not advance steps if this trigger is disabled.  Calling the niRFSG_DisableConfigurationListStepTrigger  function is necessary if the trigger has been previously configuration and then needs to be disabled. The NI-RFSG device must be in the Configuration state before you call this VI.
            
            Supported Devices&#58; NI PXIe-5650/5651/5652/5653/5673E
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetTerminalName(System.Int32,System.String,System.Int32,System.Text.StringBuilder)">
            <summary>
            
            niRFSG_GetTerminalName
            C Function Prototype
            ViStatus&#160;niRFSG_GetTerminalName&#160;(ViSession&#160;vi, ViInt32&#160;signal, ViConstString&#160;signalIdentifier, ViInt32&#160;bufferSize, ViChar&#160;terminalName);
            Purpose
            Returns the fully-qualified name of the signal being queried. The fully-qualified name is helpful to automatically route signals in a multisegment chassis.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            
            </summary>
            <param name="Signal">
            
            signal
            ViInt32
            Specifies the signal being queried.
            
            
            Defined Values:
            
            NIRFSG_VAL_START_TRIGGERQueries the Start trigger.NIRFSG_VAL_SCRIPT_TRIGGERQueries a Script trigger.
            NIRFSG_VAL_MARKER_EVENTQueries a Marker event.
            NIRFSG_VAL_STARTED_EVENTQueries the Started event.
            NIRFSG_VAL_DONE_EVENTQueries the Done event.
            NIRFSG_VAL_CONFIGURATION_LIST_STEP_TRIGGERQueries the Configuration List Step trigger.
            
            
            </param>
            <param name="Signal_Identifier">
            
            signalIdentifier
            ViConstString
            Specifies which instance of the selected signal to query.  This parameter is necessary when the signal parameter is set to NIRFSG_VAL_SCRIPT_TRIGGER or NIRFSG_VAL_MARKER_EVENT. Otherwise, set the signalIdentifier parameter to "" (empty string).
            
            
            
            
            Defined Values:
            
            NIRFSG_VAL_SCRIPT_TRIGGER0Specifies Script trigger 0.
            NIRFSG_VAL_SCRIPT_TRIGGER1Specifies Script trigger 1.
              NIRFSG_VAL_SCRIPT_TRIGGER2Specifies Script trigger 2.
              NIRFSG_VAL_SCRIPT_TRIGGER3Specifies Script trigger 3.
            NIRFSG_VAL_MARKER_EVENT0 Specifies Marker 0.
             NIRFSG_VAL_MARKER_EVENT1Specifies Marker 1.
              NIRFSG_VAL_MARKER_EVENT2 Specifies Marker 2.
               NIRFSG_VAL_MARKER_EVENT3Specifies Marker 3.
            "" (empty string)Does not specify a signal identifier. 
               
            
            </param>
            <param name="Buffer_Size">
            
            bufferSize
            ViInt32
            Pass the number of bytes in the ViChar buffer you specify for the attributeValue parameter.  
            
            If you pass 0, you can pass VI_NULL for the attributeValue parameter.
            </param>
            <param name="Terminal_Name">
            
            terminalName[]
            ViChar
            Returns the string to use as the source for other devices.
               
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the status code, call the niRFSG_error_message function.  To obtain additional information about the error condition, call the niRFSG_GetError function.  To clear the error information from the driver, call the niRFSG_ClearError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureRefClock(System.String,System.Double)">
            <summary>
            
            niRFSG_ConfigureRefClock
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureRefClock&#160;(ViSession&#160;vi, ViConstString&#160;clockSource, ViReal64&#160;refClockRate);
            Purpose
            Configures the NI-RFSG device Reference clock.  The Reference clock ensures that the NI-RFSG devices are operating from a common timebase.  The NI-RFSG device must be in the Configuration state before calling this function.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5653/5672/5673/5673E
            
            
            </summary>
            <param name="Ref_Clock_Source">
            
            refClockSource
            ViConstString
            Specifies the source of Reference clock signal. 
            
            
             
            
            NIRFSG_VAL_ONBOARD_CLOCK_STR (default)Uses the onboard Reference clock as the clock source.
            NIRFSG_VAL_REF_IN_STR             Uses the clock signal present at the front panel REF IN connector as the clock source.     
            NIRFSG_VAL_PXI_CLK_STRUses the PXI_CLK signal, which is present on the PXI backplane, as the clock source.  
            NIRFSG_VAL_CLK_IN_STR  Uses the clock signal present at the front panel CLK IN connector as the clock source.
            
            </param>
            <param name="Ref_Clock_Rate">
            
            refClockRate
            ViReal64
            Specifies the Reference clock rate, expressed in Hz. NI-RFSG sets NIRFSG_ATTR_REF_CLOCK_RATE to this value.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigurePXIChassisClk10(System.String)">
            <summary>
            
            niRFSG_ConfigurePXIChassisClk10
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigurePXIChassisClk10&#160;(ViSession&#160;vi, ViConstString&#160;pxiClk10Source);
            Purpose
            Specifies the signal to drive the 10&#160;MHz Reference clock on the PXI backplane. 
            This option can only be configured when the NI 5610 is in Slot 2 of the PXI chassis.
            The NI-RFSG device must be in the Configuration state before you call this function.
            
            Supported Devices&#58; NI PXI-5610/5670/5671
            
            
            </summary>
            <param name="PXI_Clk_10_Source">
            
            pxiClk10Source
            ViConstString
            Specifies the source of the Reference clock signal.
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ExportSignal(System.Int32,System.String,System.String)">
            <summary>
            
            niRFSG_ExportSignal
            C Function Prototype
            ViStatus&#160;niRFSG_ExportSignal&#160;(ViSession&#160;vi, ViInt32&#160;signal, ViConstString&#160;signalIdentifier, ViConstString&#160;outputTerminal);
            Purpose
            Routes signals (triggers, clocks, and events) to a specified output terminal. The NI-RFSG device must be in the Configuration state before you call this function.
            
            You can clear a previously routed signal by exporting the signal to "" (empty string). 
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            
            </summary>
            <param name="Signal">
            
            signal
            ViInt32
            Specifies the signal to route.Onboard Reference clock output terminal is not configurable on the&#160;NI 5670/5671/5672 device.Triggers and Marker events are not available on the NI 5650/5651/5652 device.
            
            
            Defined Values:
            <tr>
            NIRFSG_VAL_START_TRIGGERExports a Start trigger.NIRFSG_VAL_SCRIPT_TRIGGERExports a Script trigger.
            NIRFSG_VAL_MARKER_EVENTExports a Marker event.
            NIRFSG_VAL_DONE_EVENTExports a Done event.NIRFSG_VAL_REF_CLOCKRoutes the onboard 10 MHz synchronization clock (PXI chassis only).
            NIRFSG_VAL_STARTED_EVENTExports a Started event.</tr>
            
            </param>
            <param name="Signal_Identifier">
            
            signalIdentifier
            ViConstString
            Specifies which instance of the selected signal to export.This parameter is useful when the signal parameter is set to NIRFSG_VAL_SCRIPT_TRIGGER or NIRFSG_VAL_MARKER_EVENT. Otherwise, set the signalIdentifier parameter to "" (empty string).
            
            
            
            
            Defined Values:
            
            NIRFSG_VAL_SCRIPT_TRIGGER0Specifies Script trigger 0.
            NIRFSG_VAL_SCRIPT_TRIGGER1Specifies Script trigger 1.
              NIRFSG_VAL_SCRIPT_TRIGGER2Specifies Script trigger 2.
              NIRFSG_VAL_SCRIPT_TRIGGER3Specifies Script trigger 3.
            NIRFSG_VAL_MARKER_EVENT0 Specifies Marker 0.
             NIRFSG_VAL_MARKER_EVENT1Specifies Marker 1.
              NIRFSG_VAL_MARKER_EVENT2 Specifies Marker 2.
               NIRFSG_VAL_MARKER_EVENT3Specifies Marker 3.
            "" (empty string)None (no signal to export) 
               
            
            </param>
            <param name="Output_Terminal">
            
            outputTerminal
            ViConstString
            Specifies the terminal where the signal is exported.  You can choose not to export any signal.
            
            
            
            
            
            
            Defined Values:
            
            NIRFSG_VAL_DO_NOT_EXPORT_STRDoes not export a signal.
            NIRFSG_VAL_REF_OUT_STRExports a signal to the REF OUT connector.
              NIRFSG_VAL_REF_OUT2_STRExports a signal to the REF OUT2 connector, if applicable.
              NIRFSG_VAL_CLK_OUT_STRExports a signal to the CLK OUT connector.
            NIRFSG_VAL_PFI0_STR Exports a signal to the PFI 0 terminal.
             NIRFSG_VAL_PFI1_STRExports a signal to the PFI 1 terminal.
              NIRFSG_VAL_PFI4_STR Exports a signal to the PFI 4 terminal.
               NIRFSG_VAL_PFI5_STRExports a signal to the PFI 5 terminal.
              NIRFSG_VAL_PXI_TRIG0_STRExports a signal to the PXI trigger line 0 terminal.
              NIRFSG_VAL_PXI_TRIG1_STRExports a signal to the PXI trigger line 1 terminal.
              NIRFSG_VAL_PXI_TRIG2_STRExports a signal to the PXI trigger line 2 terminal.
              NIRFSG_VAL_PXI_TRIG3_STRExports a signal to the PXI trigger line 3 terminal.
              NIRFSG_VAL_PXI_TRIG4_STRExports a signal to the PXI trigger line 4 terminal.
            
              NNIRFSG_VAL_PXI_TRIG5_STRExports a signal to the PXI trigger line 5 terminal.
            
              NIRFSG_VAL_PXI_TRIG6_STRExports a signal to the PXI trigger line 6 terminal.
              NIRFSG_VAL_PXI_STAR_STRExports a signal to the PXI star trigger line terminal.
               
            
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStreamEndpointHandle(System.String,System.UInt32@)">
            <summary>
            
            niRFSG_GetStreamEndpointHandle
            C Function Prototype
            ViStatus&#160;niRFSG_GetStreamEndpointHandle&#160;(ViSession&#160;vi, ViConstString&#160;streamEndpoint, ViUInt32*&#160;readerHandle);
            Purpose
            Returns a reader endpoint handle that can be used with NI-P2P to configure a peer-to-peer stream with an RF signal generator endpoint.
            
            
            Supported Devices: NI PXIe-5673E
            
            
            </summary>
            <param name="Stream_Endpoint">
            
            streamEndpoint
            ViConstString
            Specifies the stream endpoint FIFO to configure. Refer to the Peer-to-Peer Data Streaming topic in the NI RF Signal Generators Help for more information.
            
            </param>
            <param name="Reader_Handle">
            
            readerHandle
            ViUInt32*
            Returns the reader endpoint handle that is used with NI-P2P to create a stream with the NI-RFSG device as an endpoint.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteP2PEndpointI16(System.String,System.Int32,System.Int16[])">
            <summary>
            
            
            
            niRFSG_WriteP2PEndpointI16
            
            ViStatus niRFSG_WriteP2PEndpointI16&#160;(ViSession&#160;vi, ViConstString&#160;streamEndpoint, ViInt32&#160;numberOfSamples, ViInt16&#160;endpointData[])
            
            Purpose
            
            Writes an array of 16-bit integer data to the peer-to-peer endpoint. Use this function to write initial data from the host to the endpoint before starting generation to avoid an underflow when you start the generation.
            
            Supported Devices: NI PXIe-5673E
            
            
            </summary>
            <param name="Stream_Endpoint">
            
            streamEndpoint
            ViConstString
            Specifies the stream endpoint FIFO to configure. Refer to the Peer-to-Peer Data Streaming topic in the NI RF Signal Generators Help for more information.
            
            </param>
            <param name="Number_Of_Samples">
            
            
            numberOfSamples
            ViInt32
            Specifies the number of samples to write into the endpoint FIFO.
             
            </param>
            <param name="Endpoint_Data">
            
            
            endpointData
            ViInt16 []
            Specifies the array of data to write into the endpoint FIFO. The binary data is left-justified.
             
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WriteScript(System.String)">
            <summary>
            
            niRFSG_WriteScript
            C Function Prototype
            ViStatus&#160;niRFSG_WriteScript&#160;(ViSession&#160;vi, ViConstString&#160;script);
            
            Purpose
            Writes a script to the device to control waveform generation in Script mode. First, configure your device for Script mode by calling the niRFSG_ConfigureGenerationMode function. The NI-RFSG device must be in the Configuration state before calling the niRFSG_WriteScript function. Refer to Scripting Instructions in the NI RF Signal Generators Help for information about using scripts
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            </summary>
            <param name="Script">
            
            
            script
            ViConstString
            Specifies a string containing a syntactically correct script. NI-RFSG supports multiple scripts that may be selected by name with the NIRFSG_ATTR_SELECTED_SCRIPT attribute. Refer to Scripting Instructions for more information about using scripts. 
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureOutputEnabled(System.Boolean)">
            <summary>
            
            niRFSG_ConfigureOutputEnabled
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureOutputEnabled&#160;(ViSession&#160;vi, ViBoolean&#160;output_enabled);
            Purpose
            Enables or disables signal output.  You can call this function in any software state, and it does not change the current software state.  Setting output_enabled to VI_FALSE while in the Generation state attenuates the generated signal so that no signal is output.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Output_Enabled">
            
            output_enabled
            ViBoolean
            Specifies whether you want to enable or disable the output.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ConfigureIQEnabled(System.Boolean)">
            <summary>
            
            niRFSG_ConfigureIQEnabled [OBSOLETE]
            C Function Prototype
            ViStatus&#160;niRFSG_ConfigureIQEnabled&#160;(ViSession&#160;vi, ViBoolean&#160;enabled);
            Purpose
            Configures the NI-RFSG device to apply I/Q (vector) modulation to the RF output signal. I/Q modulation must be enabled in order to generate any arbitrary (non-sine) waveform; if I/Q modulation is disabled, a sine tone is always generated, regardless if an arbitrary waveform is written. The NI-RFSG device must be in the Configuration state before calling this function.
            
            
            
            Note&#160;&#160;This function is obsolete.  Use the  NIRFSG_ATTR_GENERATION_MODE attribute to enable I/Q modulation instead.
            
            Upon device initialization, or calling the niRFSG_reset function or the niRFSG_ResetDevice function, I/Q modulation is disabled.
            
            
            </summary>
            <param name="IQ_Enabled">
            
            enabled
            ViBoolean
            NI-RFSG sets the NIRFSG_ATTR_IQ_ENABLED attribute to this value.
            
            
            
            Defined Values:
            
            
            VI_TRUEEnables IQ (vector) modulation (arbitrary waveform generation)VI_FALSEDisables IQ (vector) modulation (sine wave generation)
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ResetAttribute(System.String,System.Int32)">
            <summary>
            
            
            
            
            niRFSG_ResetAttribute
            
            ViStatus niRFSG_ResetAttribute         (ViSession vi, ViConstString channelName, ViAttr attributeId);
            
            Purpose
            
            Resets the attribute to its default value.
            
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            </summary>
            <param name="Channel_Name">
            
            channelName
            ViConstString
            Specifies the channel to which the attribute applies if this attribute is channel-based. If the attribute is not channel-based, set this parameter to &quot;&quot; (empty string) or VI_NULL.
            
            Default Value:  &quot;&quot; (empty string)
            
            
            
            </param>
            <param name="Attribute_ID">
            
            attributeID
            ViAttr
            Pass the ID of an attribute.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.Initiate">
            <summary>
            
            niRFSG_Initiate
            C Function Prototype
            ViStatus&#160;niRFSG_Initiate&#160;(ViSession&#160;vi);
            Purpose
            Initiates signal generation, causing the NI-RFSG device to leave the Configuration state and enter the Generation state.  If the settings have not been committed to the device before you call this function, they are committed with this function. The operation returns when the RF output signal settles. To return to the Configuration state, call the niRFSG_Abort function. On the NI 5653, this function tunes the device and waits for the required settling time.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.CheckGenerationStatus(System.Boolean@)">
            <summary>
            
            niRFSG_CheckGenerationStatus
            C Function Prototype
            ViStatus&#160;niRFSG_CheckGenerationStatus&#160;(ViSession&#160;vi, ViBoolean*&#160;isDone);
            Purpose
            Checks the status of the generation.  Call this function to check for any errors that might occur during the signal generation or to check whether the device has finished generating.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Is_Done">
            
            isDone
            ViBoolean*
            Returns information about the completion of signal generation.
            
            
            Defined Values:
            
            VI_TRUESignal generation is complete. VI_FALSE Signal generation is occurring.
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.Abort">
            <summary>
            
            niRFSG_Abort
            C Function Prototype
            ViStatus&#160;niRFSG_Abort&#160;(ViSession&#160;vi);
            Purpose
            Stops signal generation.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.Commit">
            <summary>
            
            niRFSG_Commit
            C Function Prototype
            ViStatus&#160;niRFSG_Commit&#160;(ViSession&#160;vi);
            Purpose
            Programs the device with the correct settings.  Calling this function moves the NI-RFSG device from the Configuration state to the Committed state. 
            After calling this function, changing any attribute reverts the NI-RFSG device to the Configuration state.
            
            <p class="Body">Supported devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E</p>
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.PerformThermalCorrection">
            <summary>
            
            niRFSG_PerformThermalCorrection
            C Function Prototype
            ViStatus&#160;niRFSG_PerformThermalCorrection&#160;(ViSession&#160;vi);
            Purpose
            Corrects for any signal drift due to environmental temperature variation when generating the same signal for extended periods of time without a parameter change.   Under normal circumstances of short-term signal generation, NI-RFSG performs thermal correction automatically by ensuring stable power levels, and you do not need to call this function.
            
            Use this function when generating the same signal for an extended period of time in a temperature-fluctuating environment.
            The NI-RFSG device must be in the Generation state before calling this function.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E 
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.WaitUntilSettled(System.Int32)">
            <summary>
            
            niRFSG_WaitUntilSettled
            C Function Prototype
            ViStatus&#160;niRFSG_WaitUntilSettled&#160;(ViSession&#160;vi, ViInt32&#160;maxTimeMilliseconds);
            Purpose
            Waits until the RF output signal has settled. This function is useful for devices that support changes while in the Generation state. Call this function after making a dynamic change to wait for the output to settle. 
            
            
            
            You can also call this function after calling the niRFSG_Commit function to wait for changes to settle. The niRFSG_WaitUntilSettled function is not needed after calling the niRFSG_Initiate function because the niRFSG_Initiate function does not return until the output is settled. 
            
            Supported Devices&#58;  NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Max_Time_Milliseconds">
            
            maxTimeMilliseconds
            ViInt32
            Defines the maximum time the function waits for the output to settle. If the maximum time is exceeded, this function returns an error. The units are expressed in milliseconds.
            
            Default Value: 10000
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.reset">
            <summary>
            
            niRFSG_reset
            C Function Prototype
            ViStatus&#160;niRFSG_reset&#160;(ViSession&#160;vi);
            Purpose
            Resets all attributes to their default values and moves the NI-RFSG device to the Configuration state.  This function aborts the generation, clears all routes, and resets session attributes to the initial values.  During a reset, routes of signals between this and other devices are released, regardless of which device created the route.
            
            Generally, calling this function instead of the niRFSG_ResetDevice function is acceptable.  The niRFSG_reset function executes faster than the niRFSG_ResetDevice function.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ResetDevice">
            <summary>
            
            niRFSG_ResetDevice
            C Function Prototype
            ViStatus&#160;niRFSG_ResetDevice&#160;(ViSession&#160;vi);
            
            Purpose
            
            Performs a hard reset on the device which consists of the following actions:
            Signal generation is stopped.
            All routes are released.
            External bidirectional terminals are tristated.
            FPGAs are reset.
            Hardware is configured to its default state.
            All session attributes are reset to their default states.
             
            During a device reset, routes of signals between this and other devices are released, regardless of which device created the route.
            
            NI 5610/5670/5671/5672&#8212; After calling this function, the device requires 25 seconds before returning to full functionality.  NI-RFSG enforces this condition by adding a wait, if needed, the next time you try to access the device. 
             
            
            Note&#160;&#160;You must call the niRFSG_ResetDevice function if the NI-RFSG device has shut down because of a high-temperature condition.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ResetWithDefaults">
            <summary>
            
            niRFSG_ResetWithDefaults
            C Function Prototype
            ViStatus&#160;niRFSG_ResetWithDefaults&#160;(ViSession vi);
            
            Purpose
            Performs a software reset of the device, returning it to the default state and applying any initial default settings from the IVI Configuration Store.
            <p class="body">Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E</p>
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetChannelName(System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            
            niRFSG_GetChannelName
            C Function Prototype
            ViStatus&#160;niRFSG_GetChannelName&#160;(ViSession vi, ViInt32 Index, ViInt32 BufferSize, ViChar Channel_Name[]);
            
            Purpose
            Returns the channel string that is in the channel table at an index you specify.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E
            
            
            </summary>
            <param name="Index">
            
            Index
            ViInt32
            Specifies a one-based index into the channel table.
            
            </param>
            <param name="BufferSize">
            
            BufferSize
            ViInt32
            Specifies the size of the buffer for the channel string
            
            </param>
            <param name="Channel_Name">
            
            Channel_Name
            ViChar[]
            Returns a channel string from the channel table at the index you specify in the Index parameter.
            Do not modify the contents of the channel string.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.Disable">
            <summary>
            
            niRFSG_Disable
            C Function Prototype
            ViStatus&#160;niRFSG_Disable&#160;(ViSession vi);
            
            Purpose
            Places the instrument in a quiescent state where it has minimal or no impact on the system to which it is connected.
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5672/5673/5673E
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.self_test(System.Int16@,System.Text.StringBuilder)">
            <summary>
            
            niRFSG_self_test
            C Function Prototype
            ViStatus&#160;niRFSG_self_test&#160;(ViSession&#160;vi, ViInt16*&#160;selfTestResult, ViChar[]&#160;selfTestMessage);
            Purpose
            Performs a self-test on the NI-RFSG device and returns the test results.  This function performs a simple series of tests to ensure that the NI-RFSG device is powered up and responding.  
            
            
            
            This function does not affect external I/O connections or connections between devices.  Complete functional testing and calibration are not performed by this function. The NI-RFSG device must be in the Configuration state before you call this function.
            
            Supported Devices&#58; NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            
            </summary>
            <param name="Self_Test_Result">
            
            selfTestResult
            ViInt16*
            This parameter contains the value returned from the NI-RFSG device self test.
            
            
            
            Self-Test Code Description
            0Self test passed
            1Self test failed
               
               
            
            
            
            </param>
            <param name="Self_Test_Message">
            
            selfTestMessage
            ViChar[]
            Returns the self-test response string from the NI-RFSG device. For an explanation of the string contents, refer to the status parameter of this function.
            
            You must pass a ViChar array with at least 256 bytes.
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.error_query(System.Int32@,System.Text.StringBuilder)">
            <summary>
            
            niRFSG_error_query
            C Function Prototype
            ViStatus&#160;niRFSG_error_query&#160;(ViSession&#160;vi, ViInt32&#160;*Error_Code, ViChar&#160;Error_Message[]);
            Purpose
            Reads an error code and an error message from the instrument error queue.
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            </summary>
            <param name="Error_Code">
            
            Error_Code
            ViInt32*
            Returns the error code read from the instrument error queue.
            
            </param>
            <param name="Error_Message">
            
            Error_Message
            ViChar[]
            Returns the error message string read from the instrument error message queue.
            You must pass a ViChar array with at least 256 bytes.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.revision_query(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            
            niRFSG_revision_query
            C Function Prototype
            ViStatus&#160;niRFSG_revision_query&#160;(ViSession&#160;vi, ViChar[]&#160;instrumentDriverRevision, ViChar[]&#160;firmwareRevision);
            Purpose
            Returns the revision numbers of the NI-RFSG driver and the instrument firmware.
            
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Instrument_Driver_Revision">
            
            instrumentDriverRevision
            ViChar[]
            Returns the value of the NIRFSG_ATTR_SPECIFIC_DRIVER_REVISION attribute in the form of a string.
            
            You must pass a ViChar array with at least 256 bytes.
            
            
            
            </param>
            <param name="Firmware_Revision">
            
            firmwareRevision
            ViChar[]
            Returns the value of the NIRFSG_ATTR_INSTRUMENT_FIRMWARE_REVISION attribute in the form of a string.
            
            You must pass a ViChar array with at least 256 bytes.
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.QueryArbWaveformCapabilities(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            niRFSG_QueryArbWaveformCapabilities
            C Function Prototype
            ViStatus&#160;niRFSG_QueryArbWaveformCapabilities&#160;(ViSession&#160;vi, ViInt32*&#160;maxNumberWaveforms, ViInt32*&#160;waveformQuantum, ViInt32*&#160;minWaveformSize, ViInt32*&#160;maxWaveformSize);
            Purpose
            Queries and returns the waveform capabilities of the NI-RFSG device.  These capabilities are related to the current device configuration. The NI-RFSG device must be in the Configuration  or the Generation state before calling this function.
            
            Supported Devices&#58; NI PXI-5670/5671, NI PXIe-5672/5673/5673E 
            
            
            </summary>
            <param name="Max_Number_Waveforms">
            
            maxNumberWaveforms
            ViInt32*
            Returns the value of the NIRFSG_ATTR_ARB_MAX_NUMBER_WAVEFORMS attribute. This value is the maximum number of waveforms you can write.
            
            
            
            </param>
            <param name="Waveform_Quantum">
            
            waveformQuantum
            ViInt32*
            Returns the value of the NIRFSG_ATTR_ARB_WAVEFORM_QUANTUM attribute. If the waveform quantum is q, then the size of the waveform that you write should be a multiple of q. The units are expressed in samples.
            
            
            
            </param>
            <param name="Min_Waveform_Size">
            
            minWaveformSize
            ViInt32*
            Returns the value of the NIRFSG_ATTR_ARB_WAVEFORM_SIZE_MIN attribute. The number of samples of the waveform that you write must be greater than or equal to this value.
            
            
            
            </param>
            <param name="Max_Waveform_Size">
            
            maxWaveformSize
            ViInt32*
            Returns the value of the NIRFSG_ATTR_ARB_WAVEFORM_SIZE_MAX attribute. The number of samples of the waveform that you write must be less than or equal to this value.
            
            
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SelfCal">
            <summary>
            
            niRFSG_SelfCal
            C Function Prototype
            ViStatus&#160;niRFSG_SelfCal&#160;(ViSession&#160;vi);
            Purpose
            Performs an internal self-calibration on the device. If the calibration is successful, new calibration data and constants are stored in the onboard nonvolatile memory of the module.
            
            Supported Devices&#58; NI PXI-5610/5670/5671, NI PXIe-5653/5672/5673/5673E
            
            
            </summary>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SelfCalibrateRange(System.Int64,System.Double,System.Double,System.Double,System.Double)">
             <summary>
             Self-calibrates all configurations within the specified frequency and peak power level limits.
             If there is an open session for NI-RFSA for your device, it may remain open but cannot be used while this function runs.
             It is recommended that no external signals are present on the RF In port while the calibration is taking place.
             For best results, NI recommends that you perform a self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
             Supported Devices&#58; NI 5644R/5645R/5646R
             
             </summary>
            <param name = "stepsToOmit">
             Specifies which calibration steps to skip during the self-calibration process. The default value is an empty array, which indicates that no calibration steps are omitted.
             Defined Values:
             NIRFSG_VAL_SELF_CAL_OMIT_NONENo calibration steps are omitted.
             NIRFSG_VAL_SELF_CAL_LO_SELF_CALOmits the LO Self Cal step. If you omit this step, the power level of the LO is not adjusted.
             NIRFSG_VAL_SELF_CAL_POWER_LEVEL_ACCURACYOmits the Power Level Accuracy step. If you omit this step, the power level accuracy of the device is not adjusted.
             NIRFSG_VAL_SELF_CAL_RESIDUAL_LO_POWEROmits the Residual LO Power step. If you omit this step, the Residual LO Power performance is not adjusted.
             NIRFSG_VAL_SELF_CAL_IMAGE_SUPPRESSIONOmits the Image Suppression step. If you omit this step, the Residual Sideband Image performance is not adjusted.
             Default Value: NIRFSG_VAL_SELF_CAL_OMIT_NONE
             
            </param>
            <param name = "minFrequency">
             Specifies the minimum frequency to calibrate.
             
            </param>
            <param name = "maxFrequency">
             Specifies the maximum frequency to calibrate.
             
            </param>
            <param name = "minPowerLevel">
             Specifies the minimum power level to calibrate.
             
            </param>
            <param name = "maxPowerLevel">
             Specifies the maximum power level to calibrate.
             
            </param>
            <returns>
             
            niRFSG_SelfCalibrateRange
             C Function Prototype
             ViStatus&#160;niRFSG_SelfCalibrateRange&#160;(ViSession&#160;vi,&#160;ViInt64&#160;stepsToOmit,&#160;ViReal64&#160;minFrequency,&#160;ViReal64&#160;maxFrequency,&#160;ViReal64&#160;minPowerLevel,&#160;ViReal64&#160;maxPowerLevel);
             Purpose
             Self-calibrates all configurations within the specified frequency and peak power level limits.
             If there is an open session for NI-RFSA for your device, it may remain open but cannot be used while this function runs.
             It is recommended that no external signals are present on the RF In port while the calibration is taking place.
             For best results, NI recommends that you perform a self-calibration without omitting any steps. However, if certain aspects of performance are less important for your application, you can omit that step for faster execution.
             Supported Devices&#58; NI 5644R/5645R/5646R
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSelfCalibrationDateAndTime(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            
            
            niRFSG_GetExternalCalibrationLastDateAndTime
            
            ViStatus niRFSG_GetExternalCalibrationLastDateAndTime&#160;(ViSession&#160;vi, ViInt32*&#160;year, ViInt32*&#160;month, ViInt32*&#160;day, ViInt32*&#160;hour, ViInt32*&#160;minute, ViInt32*&#160;second);
            
            Purpose
            
            Returns the date and time of the last successful external calibration. The time returned is 24-hour local time. For example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter. 
            
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Module">
            
            </param>
            <param name="Year">
            
            
            year
            ViInt32*
            Specifies the year of the last successful calibration.
             
            </param>
            <param name="Month">
            
            
            month
            ViInt32*
            Specifies the month of the last successful calibration.
             
            </param>
            <param name="Day">
            
            
            day
            ViInt32*
            Specifies the day of the last successful calibration.
             
            </param>
            <param name="Hour">
            
            
            hour
            ViInt32*
            Specifies the hour of the last successful calibration.
             
            </param>
            <param name="Minute">
            
            
            minute
            ViInt32*
            Specifies the minute of the last successful calibration.
             
            </param>
            <param name="Second">
            
            
            second
            ViInt32*
            Specifies the second of the last successful calibration.
             
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExternalCalibrationLastDateAndTime(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            
            
            
            niRFSG_GetExternalCalibrationLastDateAndTime
            
            ViStatus niRFSG_GetExternalCalibrationLastDateAndTime&#160;(ViSession&#160;vi, ViInt32*&#160;year, ViInt32*&#160;month, ViInt32*&#160;day, ViInt32*&#160;hour, ViInt32*&#160;minute, ViInt32*&#160;second);
            
            Purpose
            
            Returns the date and time of the last successful external calibration. The time returned is 24-hour (military) local time; for example, if the device was calibrated at 2:30 PM, this function returns 14 for the hours parameter and 30 for the minutes parameter. 
            
            Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
            
            
            </summary>
            <param name="Year">
            
            
            year
            ViInt32*
            Specifies the year of the last successful calibration.
             
            </param>
            <param name="Month">
            
            
            month
            ViInt32*
            Specifies the month of the last successful calibration.
             
            </param>
            <param name="Day">
            
            
            day
            ViInt32*
            Specifies the day of the last successful calibration.
             
            </param>
            <param name="Hour">
            
            
            hour
            ViInt32*
            Specifies the hour of the last successful calibration.
             
            </param>
            <param name="Minute">
            
            
            minute
            ViInt32*
            Specifies the minute of the last successful calibration.
             
            </param>
            <param name="Second">
            
            
            second
            ViInt32*
            Specifies the second of the last successful calibration.
             
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ChangeExternalCalibrationPassword(System.String,System.String)">
            <summary>
            
            
            
            niRFSG_ChangeExternalCalibrationPassword
            
            ViStatus niRFSG_ChangeExternalCalibrationPassword&#160;(ViSession&#160;vi, ViConstString&#160;Password, ViConstString&#160;newPassword);
            
            Purpose
            
            Changes the external calibration password of the device.
            
            Supported Devices: NI PXIe-5611/5653/5673/5673E
            
            
            
            </summary>
            <param name="Old_Password">
            
            
            Password
            ViConstString
            Specifies the old (current) external calibration password.  This password is case sensitive.
             
            </param>
            <param name="New_Password">
            
            
            newPassword
            ViConstString
            Specifies the new (desired) external calibration password.
             
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation.  The status code  either indicates success or describes an error or warning condition.  Examine the status code from each call to an instrument driver function to determine if an error occurred.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            ValueMeaning
            0Success
            Positive ValuesWarnings
            Negative ValuesErrors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.close">
             <summary>
             Aborts any signal generation in progress and destroys the instrument driver session.
             Note&#160;&#160;After calling this function, you cannot use NI-RFSG again until you call the niRFSG_init function or the  niRFSG_InitWithOptions function.
             Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
             
             </summary>
            
            <returns>
             
            niRFSG_close
             C Function Prototype
             ViStatus&#160;niRFSG_close&#160;(ViSession&#160;vi);
             Purpose
             Aborts any signal generation in progress and destroys the instrument driver session.
             Note&#160;&#160;After calling this function, you cannot use NI-RFSG again until you call the niRFSG_init function or the  niRFSG_InitWithOptions function.
             Supported Devices: NI PXI/PXIe-5650/5651/5652, NI PXI-5610/5670/5671, NI PXIe-5611/5653/5672/5673/5673E
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.VstSelfCalibrate(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.AlignLODaisyChain5840(System.Boolean,System.String,System.String,System.Int32[],System.Double,System.Double)">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ClearSelfCalibrationRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetActiveConfigurationList(System.String,System.String)">
             <summary>
            Specifies the name of the list to be active.  When you get or set    an attribute and it is in the configuration list configuration,    the attribute is set to or read from the active list step of the    active configuration list.   If the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set    to &quot;&quot; (empty string), no list is active. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetActiveConfigurationList(System.String,System.String@)">
             <summary>
            Specifies the name of the list to be active.  When you get or set    an attribute and it is in the configuration list configuration,    the attribute is set to or read from the active list step of the    active configuration list.   If the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set    to &quot;&quot; (empty string), no list is active. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetActiveConfigurationListStep(System.String,System.Int32)">
             <summary>
            Specifies the step in the configuration list for RF list mode    that you want to make active for configuration or initiation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetActiveConfigurationListStep(System.String,System.Int32@)">
             <summary>
            Specifies the step in the configuration list for RF list mode    that you want to make active for configuration or initiation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAllowOutOfSpecificationUserSettings(System.String,System.Int32)">
             <summary>
            Allows you to set the frequency and power values beyond the limits of the   NI-RFSG device specifications.  This allows a wider frequency and power   range, but accuracy cannot be guaranteed, and results may vary by unit. To   set this attribute, the NI-RFSG device must be in the Configuration state.   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAllowOutOfSpecificationUserSettings(System.String,System.Int32@)">
             <summary>
            Allows you to set the frequency and power values beyond the limits of the   NI-RFSG device specifications.  This allows a wider frequency and power   range, but accuracy cannot be guaranteed, and results may vary by unit. To   set this attribute, the NI-RFSG device must be in the Configuration state.   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationFmDeviation(System.String,System.Double)">
             <summary>
            Specifies the frequency deviation to use in frequency modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationFmDeviation(System.String,System.Double@)">
             <summary>
            >Specifies the frequency deviation to use in frequency modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationPmDeviation(System.String,System.Double)">
             <summary>
            Specifies the deviation to use in phase modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationPmDeviation(System.String,System.Double@)">
             <summary>
            Specifies the deviation to use in phase modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationType(System.String,System.Int32)">
             <summary>
            Specifies the analog modulation format to use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationType(System.String,System.Int32@)">
             <summary>
            Specifies the analog modulation format to use. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationWaveformFrequency(System.String,System.Double)">
             <summary>
            Specifies the frequency of the waveform to use as the message signal in   analog modulation. Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationWaveformFrequency(System.String,System.Double@)">
             <summary>
            Specifies the frequency of the waveform to use as the message signal in   analog modulation. Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationWaveformType(System.String,System.Int32)">
             <summary>
            Specifies the type of waveform to use as the message signal for analog   modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationWaveformType(System.String,System.Int32@)">
             <summary>
            Specifies the type of waveform to use as the message signal for analog   modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbCarrierFrequency(System.String,System.Double)">
             <summary>
            Indicates the carrier frequency generated by the arbitrary waveform   generator (AWG) module. The specified carrier frequency is related  
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbCarrierFrequency(System.String,System.Double@)">
             <summary>
            Indicates the carrier frequency generated by the arbitrary waveform   generator (AWG) module. The specified carrier frequency is related  
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbFilterRaisedCosineAlpha(System.String,System.Double)">
             <summary>
            Alpha value to use when calculating the pulse-shaping filter coefficients.   This attribute is only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device   that does not support OSP. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbFilterRaisedCosineAlpha(System.String,System.Double@)">
             <summary>
            Alpha value to use when calculating the pulse-shaping filter coefficients.   This attribute is only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device   that does not support OSP. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbFilterRootRaisedCosineAlpha(System.String,System.Double)">
             <summary>
            Alpha value to use when calculating the pulse-shaping FIR filter coefficients.   This attribute can only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_ROOT_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this property with a device   that does not support OSP. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbFilterRootRaisedCosineAlpha(System.String,System.Double@)">
             <summary>
            Alpha value to use when calculating the pulse-shaping FIR filter coefficients.   This attribute can only used when the NIRFSG_ATTR_ARB_FILTER_TYPE   attribute is set to NIRFSG_VAL_ARB_ROOT_RAISED_COSINE and with signal   generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this property with a device   that does not support OSP. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbFilterType(System.String,System.Int32)">
             <summary>
            Pulse-shaping filter type for the FIR filter. This attribute can be used   only with signal generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device that   does not support OSP. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbFilterType(System.String,System.Int32@)">
             <summary>
            Pulse-shaping filter type for the FIR filter. This attribute can be used   only with signal generators that support onboard signal processing (OSP).   NI-RFSG returns an error if you use this attribute with a device that   does not support OSP. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbMaxNumberWaveforms(System.String,System.Int32@)">
             <summary>
            Returns the maximum number of waveforms the device can hold in memory. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbOnboardSampleClockMode(System.String,System.Int32)">
             <summary>
            Specifies the Sample clock mode on the NI 5421/5441/5442/5450 AWG module.   To set this attribute, the device must be in the Configuration state. 
               NOTE: Using the high resolution clock may result in increased phase noise. /n 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbOnboardSampleClockMode(System.String,System.Int32@)">
             <summary>
            Specifies the Sample clock mode on the NI 5421/5441/5442/5450 AWG module.   To set this attribute, the device must be in the Configuration state. 
               NOTE: Using the high resolution clock may result in increased phase noise. /n 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbOscillatorPhaseDacValue(System.String,System.Int32)">
             <summary>
            Specifies the oscillator phase digital-to-analog converter (DAC) value    on the arbitrary waveform generator (AWG).  Use this attribute to reduce    the trigger jitter when synchronizing multiple devices with NI-TClk.    This attribute can also help maintain synchronization repeatability    by writing a previous measurement's phase DAC value to the current session.    This attribute is applicable only when using the    NIRFSG_ATTR_ARB_SAMPLE_CLOCK_SOURCE attribute set to NIRFSG_VAL_CLK_IN_STR. /n   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbOscillatorPhaseDacValue(System.String,System.Int32@)">
             <summary>
            Specifies the oscillator phase digital-to-analog converter (DAC) value    on the arbitrary waveform generator (AWG).  Use this attribute to reduce    the trigger jitter when synchronizing multiple devices with NI-TClk.    This attribute can also help maintain synchronization repeatability    by writing a previous measurement's phase DAC value to the current session.    This attribute is applicable only when using the    NIRFSG_ATTR_ARB_SAMPLE_CLOCK_SOURCE attribute set to NIRFSG_VAL_CLK_IN_STR. /n   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbPower(System.String,System.Double@)">
             <summary>
            Indicates the average output power from the NI 5421/5441/5442/5450   AWG module. If an arbitrary waveform is being generated, this   attribute specifies either the average power or the peak power of the   signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute setting. 
                Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbPreFilterGain(System.String,System.Double)">
             <summary>
            Specifies the AWG prefilter gain. The prefilter gain is   applied to the waveform data before any other signal processing.   Reduce this value to prevent overflow in the AWG interpolation filters.   Other gains on the NI-RFSG device are automatically adjusted to   compensate for nonunity AWG prefilter gain. The NI PXI-5671 and   the NI PXIe-5672 must be in the Configuration state to use this attribute.   However, the NI PXIe-5673/5673E can be in either the Configuration   or the Generation state to use this attribute. 
               On the NI PXI-5671, this attribute applies only when the   NIRFSG_ATTR_IQ_RATE attribute is set to a value   less than or equal to 8.33 MS/s. 
               Units: dB 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbPreFilterGain(System.String,System.Double@)">
             <summary>
            Specifies the AWG prefilter gain. The prefilter gain is   applied to the waveform data before any other signal processing.   Reduce this value to prevent overflow in the AWG interpolation filters.   Other gains on the NI-RFSG device are automatically adjusted to   compensate for nonunity AWG prefilter gain. The NI PXI-5671 and   the NI PXIe-5672 must be in the Configuration state to use this attribute.   However, the NI PXIe-5673/5673E can be in either the Configuration   or the Generation state to use this attribute. 
               On the NI PXI-5671, this attribute applies only when the   NIRFSG_ATTR_IQ_RATE attribute is set to a value   less than or equal to 8.33 MS/s. 
               Units: dB 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbSampleClockRate(System.String,System.Double@)">
             <summary>
            Returns the rate of the Sample clock on the AWG module. 
               Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbSampleClockSource(System.String,System.String)">
             <summary>
            Specifies the Sample clock source for the NI 5421/5441/5442/5450/5451   AWG module. To set this attribute, the NI-RFSG device must   be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbSampleClockSource(System.String,System.String@)">
             <summary>
            Specifies the Sample clock source for the NI 5421/5441/5442/5450/5451   AWG module. To set this attribute, the NI-RFSG device must   be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbTemperature(System.String,System.Double@)">
             <summary>
            Indicates the AWG module temperature in degrees Celsius. 
               Units: degrees Celsius (°C) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbWaveformQuantum(System.String,System.Int32@)">
             <summary>
            Returns the waveform quantum for the device. The number of samples   in a waveform must be an integer multiple of the waveform quantum.   The other restrictions on the length of the waveform are the minimum and    maximum arbitrary waveform sizes. On the NI 5671/5672, the value of this   attribute depends on the I/Q rate. Set the NIRFSG_ATTR_IQ_RATE attribute   before reading this attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbWaveformRepeatCount(System.String,System.Int32@)">
             <summary>
            Returns the repeat count of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM and the repeat count is finite.
               To set this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAttrArbWaveformRepeatCountIsFinite(System.String,System.Boolean@)">
             <summary>
            Returns the repetition mode of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM.
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbWaveformSizeMax(System.String,System.Int32@)">
             <summary>
            Returns the size of the largest waveform that is allowed. To read   this attribute, the NI-RFSG device must be in the Configuration state.
               For the NI 5671/5672, the value of this attribute depends on the I/Q rate.   Set the I/Q rate before reading this attribute.  For the NI 5673/5673E,   the maximum waveform size is reduced to account for the amount of device   memory currently used. 
               Note: Not all onboard memory can be used for waveform storage. A portion   of onboard memory stores scripts that specify how the waveforms are   generated.  These scripts typically require less than 1 KB of onboard   memory. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbWaveformSizeMin(System.String,System.Int32@)">
             <summary>
            Returns the size of the smallest waveform that is allowed. For the   NI 5671/5672, the value of this attribute depends on the I/Q rate.   Set the NIRFSG_ATTR_IQ_RATE attribute before reading this attribute.
               Units: Samples 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbWaveformSoftwareScalingFactor(System.String,System.Double)">
             <summary>
            Specifies how much to scale the data before writing it with the   niRFSG_WriteArbWaveform function. The resulting waveform must be   smaller than 1.0 in complex magnitude. This attribute is supported only   if the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to   NIRFSG_VAL_PEAK_POWER. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbWaveformSoftwareScalingFactor(System.String,System.Double@)">
             <summary>
            Specifies how much to scale the data before writing it with the   niRFSG_WriteArbWaveform function. The resulting waveform must be   smaller than 1.0 in complex magnitude. This attribute is supported only   if the NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to   NIRFSG_VAL_PEAK_POWER. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbWaveformRepeatCount(System.String,System.Int32)">
             <summary>
            Specifies the repeat count of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM and the repeat count is finite.
               To set this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbWaveformRepeatCountIsFinite(System.String,System.Boolean)">
             <summary>
            Specifies the repetition mode of a waveform when you set the NIRFSG_ATTR_GENERATION_MODE attribute to NIRFSG_VAL_ARB_WAVEFORM.
               To set this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAttenuatorHoldEnabled(System.String,System.Boolean)">
             <summary>
            Specifies whether attenuator hold is enabled. While this attribute is   set to VI_TRUE, changing the power level causes NI-RFSG to scale the   digital data sent to the AWG instead of adjusting the attenuators.   Changing power levels in this manner allows the device to increase or   decrease the power level in more accurate increments, but it may affect   signal-to-noise ratios (noise density).
               Setting this attribute to VI_TRUE limits the power levels that can be   attained. With attenuator hold enabled, the power level must satisfy the   following conditions:
               - Power level &lt;= the maximum power level set with the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute 
               - Power level &gt;= (the maximum power level set with  the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute -70 dB)
               - Power level &gt;= -145 dBm
               To set this attribute, the NI-RFSG device must be in the Configuration   state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAttenuatorHoldEnabled(System.String,System.Boolean@)">
             <summary>
            Specifies whether attenuator hold is enabled. While this attribute is   set to VI_TRUE, changing the power level causes NI-RFSG to scale the   digital data sent to the AWG instead of adjusting the attenuators.   Changing power levels in this manner allows the device to increase or   decrease the power level in more accurate increments, but it may affect   signal-to-noise ratios (noise density).
               Setting this attribute to VI_TRUE limits the power levels that can be   attained. With attenuator hold enabled, the power level must satisfy the   following conditions:
               - Power level &lt;= the maximum power level set with the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute 
               - Power level &gt;= (the maximum power level set with  the   NIRFSG_ATTR_ATTENUATOR_HOLD_MAX_POWER attribute -70 dB)
               - Power level &gt;= -145 dBm
               To set this attribute, the NI-RFSG device must be in the Configuration   state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAttenuatorHoldMaxPower(System.String,System.Double)">
             <summary>
            Specifies the maximum power level of the RF output signal whenthe   NIRFSG_ATTR_ATTENUATOR_HOLD_ENABLED attribute is set to VI_TRUE.
               To set this attribute, the NI-RFSG device must be in the Configuration   state.
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAttenuatorHoldMaxPower(System.String,System.Double@)">
             <summary>
            Specifies the maximum power level of the RF output signal whenthe   NIRFSG_ATTR_ATTENUATOR_HOLD_ENABLED attribute is set to VI_TRUE.
               To set this attribute, the NI-RFSG device must be in the Configuration   state.
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAutomaticThermalCorrection(System.String,System.Int32@)">
             <summary>
            Enables or disables automatic thermal correction. When enabled, settings   changes cause NI-RFSG to check whether the device temperature has changed   and adjustd the settings as needed.When disabled, you must explicitly call   the niRFSG_PerformThermalCorrection function to adjust the device for   temperature changes. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetCache(System.String,System.Boolean)">
             <summary>
            Specifies whether to cache the value of attributes. When caching is   enabled, NI-RFSG tracks the current NI-RFSG device settings and avoids   sending redundant commands to the device. 
               NI-RFSG can always cache or never cache particular attributes, regardless   of the setting of this attribute.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetCache(System.String,System.Boolean@)">
             <summary>
            Specifies whether to cache the value of attributes. When caching is   enabled, NI-RFSG tracks the current NI-RFSG device settings and avoids   sending redundant commands to the device. 
               NI-RFSG can always cache or never cache particular attributes, regardless   of the setting of this attribute.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetCompensateForFilterGroupDelay(System.String,System.Boolean@)">
            <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetCompensateForFilterGroupDelay(System.String,System.Boolean)">
            <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetConfigurationListStepInProgress(System.String,System.Int64@)">
             <summary>
            Specifies the Configuration List step that is currently programmed to the hardware.    This attribute can be read only when a Configuration List is running. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetConfigurationListStepTriggerTerminalName(System.String,System.String@)">
             <summary>
            Returns the fully-qualified signal name as a string. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetConfigurationListStepTriggerType(System.String,System.Int32)">
             <summary>
            Specifies the type of trigger to use as the Configuration List Step Trigger.    To set this attribute, the NI-RFSG device must be in the    Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetConfigurationListStepTriggerType(System.String,System.Int32@)">
             <summary>
            Specifies the type of trigger to use as the Configuration List Step Trigger.    To set this attribute, the NI-RFSG device must be in the    Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDataTransferBlockSize(System.String,System.Int32)">
             <summary>
            Indicates the number of samples download to onboard memory at one time. This   attribute is useful when the total data to be transferred to onboard   memory is large. 
               Units: Samples 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDataTransferBlockSize(System.String,System.Int32@)">
             <summary>
            Indicates the number of samples download to onboard memory at one time. This   attribute is useful when the total data to be transferred to onboard   memory is large. 
               Units: Samples 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDataTransferMaximumBandwidth(System.String,System.Double)">
             <summary>
            Specifies the maximum amount of bus bandwidth to use for data transfers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDataTransferMaximumBandwidth(System.String,System.Double@)">
             <summary>
            Specifies the maximum amount of bus bandwidth to use for data transfers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDataTransferMaximumInFlightReads(System.String,System.Int32)">
             <summary>
            Specifies the maximum number of concurrent PCI Express read requests the RF signal   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDataTransferMaximumInFlightReads(System.String,System.Int32@)">
             <summary>
            Specifies the maximum number of concurrent PCI Express read requests the RF signal   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDataTransferPreferredPacketSize(System.String,System.Int32)">
             <summary>
            Specifies the preferred size of the data field in a PCI Express read request packet. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDataTransferPreferredPacketSize(System.String,System.Int32@)">
             <summary>
            Specifies the preferred size of the data field in a PCI Express read request packet. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDeviceTemperature(System.String,System.Double@)">
             <summary>
            Returns the device temperature. If the NI-RFSG session is controlling   multiple devices, this attribute returns the temperature of the primary   NI RF device.  The NI-RFSG session is opened using the primary RF device name. 
               Serial signals between the sensor and the system control unit could   modulate the signal being generated, thus causing phase spurs. After the device   thoroughly warms up, its temperature varies only slightly (less than 1 degree Celsius)   and slowly, and it is not necessary to constantly poll this temperature sensor.   Refer to the thermal management topic appropriate to your device in the   NI RF Signal Generators Help for more information about device temperature. 
               Units: desgrees Celsius (°C) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalEdgeConfigurationListStepTriggerEdge(System.String,System.Int32)">
             <summary>
            Specifies the active edge for the Configuration List Step    trigger.  This attribute is valid only when the    NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute    is set to NIRFSG_VAL_DIGITAL_EDGE. To set this property, the NI-RFSG    device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalEdgeConfigurationListStepTriggerEdge(System.String,System.Int32@)">
             <summary>
            Specifies the active edge for the Configuration List Step    trigger.  This attribute is valid only when the    NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute    is set to NIRFSG_VAL_DIGITAL_EDGE. To set this property, the NI-RFSG    device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalEdgeConfigurationListStepTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the Configuration List Step trigger.   This attribute is valid only when the   NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalEdgeConfigurationListStepTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the Configuration List Step trigger.   This attribute is valid only when the   NIRFSG_ATTR_CONFIGURATION_LIST_STEP_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalEdgeScriptTriggerEdge(System.String,System.Int32)">
             <summary>
            Specifies the active edge for the script trigger. This attribute is used   when NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE is set to NIRFSG_VAL_DIGITAL_EDGE. To   set the NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_EDGE attribute,   the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalEdgeScriptTriggerEdge(System.String,System.Int32@)">
             <summary>
            Specifies the active edge for the script trigger. This attribute is used   when NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE is set to NIRFSG_VAL_DIGITAL_EDGE. To   set the NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_EDGE attribute,   the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalEdgeScriptTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set this   attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalEdgeScriptTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set this   attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalEdgeStartTriggerEdge(System.String,System.Int32)">
             <summary>
            Specifies the active edge for the start trigger. This attribute is used   when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. To set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_EDGE   attribute, the NI-RFSG device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalEdgeStartTriggerEdge(System.String,System.Int32@)">
             <summary>
            Specifies the active edge for the start trigger. This attribute is used   when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. To set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_EDGE   attribute, the NI-RFSG device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalEdgeStartTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the start trigger. This attribute is   used when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set the   NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute, the NI-RFSG device   must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalEdgeStartTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the start trigger. This attribute is   used when the NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_EDGE. This attribute is not case-sensitive. To set the   NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute, the NI-RFSG device   must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalEqualizationEnabled(System.String,System.Int32)">
             <summary>
            When this attribute is enabled, NI-RFSG equalizes the waveform   data to correct for variations in the response of the NI-RFSG device.   Enabling digital equalization improves   the modulation error rates (MER) and error vector magnitude (EVM) for   signals with large bandwidths (> 500 kHz). On the NI 5670/5671, this   equalization is performed in the software so that tuning time is   increased. On the NI 5672, this is performed in the hardware so that it   has no performance penalties.
               This attribute only applies when the NIRFSG_ATTR_GENERATION_MODE attribute   is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. To set this   attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalEqualizationEnabled(System.String,System.Int32@)">
             <summary>
            When this attribute is enabled, NI-RFSG equalizes the waveform   data to correct for variations in the response of the NI-RFSG device.   Enabling digital equalization improves   the modulation error rates (MER) and error vector magnitude (EVM) for   signals with large bandwidths (> 500 kHz). On the NI 5670/5671, this   equalization is performed in the software so that tuning time is   increased. On the NI 5672, this is performed in the hardware so that it   has no performance penalties.
               This attribute only applies when the NIRFSG_ATTR_GENERATION_MODE attribute   is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. To set this   attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalLevelScriptTriggerActiveLevel(System.String,System.Int32)">
             <summary>
            Specifies the active level for the Script trigger. This attribute is used   when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalLevelScriptTriggerActiveLevel(System.String,System.Int32@)">
             <summary>
            Specifies the active level for the Script trigger. This attribute is used   when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalLevelScriptTriggerSource(System.String,System.String)">
             <summary>
            Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. This attribute is not case-sensitive. To set   the NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_SOURCE attribute,   the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalLevelScriptTriggerSource(System.String,System.String@)">
             <summary>
            Specifies the source terminal for the Script trigger. This attribute is   used when the NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute is set to   NIRFSG_VAL_DIGITAL_LEVEL. This attribute is not case-sensitive. To set   the NIRFSG_ATTR_DIGITAL_LEVEL_SCRIPT_TRIGGER_SOURCE attribute,   the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalModulationFskDeviation(System.String,System.Double)">
             <summary>
            Specifies the deviation to use in FSK modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalModulationFskDeviation(System.String,System.Double@)">
             <summary>
            Specifies the deviation to use in FSK modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalModulationPrbsOrder(System.String,System.Int32)">
             <summary>
            Specifies the order of the pseudorandom bit sequence (PRBS)   sequence internally generated by hardware   and used as the message signal in digital modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalModulationPrbsOrder(System.String,System.Int32@)">
             <summary>
            Specifies the order of the pseudorandom bit sequence (PRBS)   sequence internally generated by hardware   and used as the message signal in digital modulation. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalModulationPrbsSeed(System.String,System.Int32)">
             <summary>
            Specifies the seed of the internally generated   pseudorandom bit sequence (PRBS) sequence.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalModulationPrbsSeed(System.String,System.Int32@)">
             <summary>
            Specifies the seed of the internally generated   pseudorandom bit sequence (PRBS) sequence.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalModulationSymbolRate(System.String,System.Double)">
             <summary>
            Specifies the symbol rate of the bit stream for FSK modulation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalModulationSymbolRate(System.String,System.Double@)">
             <summary>
            Specifies the symbol rate of the bit stream for FSK modulation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalModulationType(System.String,System.Int32)">
             <summary>
            Specifies the digital modulation format to use.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalModulationType(System.String,System.Int32@)">
             <summary>
            Specifies the digital modulation format to use.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalModulationWaveformType(System.String,System.Int32)">
             <summary>
            Specifies the type of waveform to use as the message signal in digital   modulation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalModulationWaveformType(System.String,System.Int32@)">
             <summary>
            Specifies the type of waveform to use as the message signal in digital   modulation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDigitalPattern(System.String,System.Boolean)">
             <summary>
            Enables or disables digital pattern on the NI 5421/5441 AWG module. This   attribute must be set to VI_TRUE to enable signal routing to and from the   Digital Data &amp; Control connector. To set this attribute, the NI-RFSG   device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDigitalPattern(System.String,System.Boolean@)">
             <summary>
            Enables or disables digital pattern on the NI 5421/5441 AWG module. This   attribute must be set to VI_TRUE to enable signal routing to and from the   Digital Data &amp; Control connector. To set this attribute, the NI-RFSG   device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDirectDmaEnabled(System.String,System.Boolean)">
             <summary>
            Enables the device for Direct DMA writes.  When enabled, the   niRFSG_WriteArbWaveform function writes data residing on the direct DMA   device (specified in the data address in the   NIRFSG_ATTR_DIRECT_DMA_WINDOW_ADDRESS attribute) to the NI-RFSG device   onboard memory.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDirectDmaEnabled(System.String,System.Boolean@)">
             <summary>
            Enables the device for Direct DMA writes.  When enabled, the   niRFSG_WriteArbWaveform function writes data residing on the direct DMA   device (specified in the data address in the   NIRFSG_ATTR_DIRECT_DMA_WINDOW_ADDRESS attribute) to the NI-RFSG device   onboard memory.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDirectDmaWindowAddress(System.String,System.Int32)">
             <summary>
            Specifies the window address (beginning of window) of the waveform data   source. This window address is specified by your Direct DMA-compatible   data source.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDirectDmaWindowAddress(System.String,System.Int32@)">
             <summary>
            Specifies the window address (beginning of window) of the waveform data   source. This window address is specified by your Direct DMA-compatible   data source.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDirectDmaWindowSize(System.String,System.Int32)">
             <summary>
            Specifies the size of the memory window provided by your direct   DMA-compatible data source. 
               Units: bytes 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDirectDmaWindowSize(System.String,System.Int32@)">
             <summary>
            Specifies the size of the memory window provided by your direct   DMA-compatible data source. 
               Units: bytes 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDirectDownload(System.String,System.Int32)">
             <summary>
            Specifies whether the niRFSG_WriteArbWaveform function writes waveforms   immediately to the device or copies the waveform to host memory for   download later. NI-RFSG reads and validates this attribute when an   arbitrary waveform is first allocated.
               NI 5670: Direct download is always disabled. 
               NI 5671: To increase performance when using large waveforms,   enable direct download.  To maximize reconfigurability, disable direct   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDirectDownload(System.String,System.Int32@)">
             <summary>
            Specifies whether the niRFSG_WriteArbWaveform function writes waveforms   immediately to the device or copies the waveform to host memory for   download later. NI-RFSG reads and validates this attribute when an   arbitrary waveform is first allocated.
               NI 5670: Direct download is always disabled. 
               NI 5671: To increase performance when using large waveforms,   enable direct download.  To maximize reconfigurability, disable direct   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDoneEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the name of the fully-qualified signal name as a string. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDriverSetup(System.String,System.String@)">
             <summary>
            The driver setup string is used to set the initial values for attributes   that are specific to NI-RFSG.
                The format of the driver setup string is in the following format:
                    Tag: Value
               where
               Tag is the name of the driver setup string attribute
                Value is the value set to the attribute.
                To set multiple attributes, separate their assignments with a semicolon.
               The following describes the driver setup string tags:
               AWG--Specifies the resource name of the Arbitrary Waveform Generator to   use for this session. If this driver setup tag is not specified, the   resource name for the upconverter associated in MAX is used.
               Example:  DriverSetup=AWG:pxi1slot4 
                or 
               DriverSetup=AWGModule:pxi1slot4 
                Refer to the niRFSG_InitWithOptions function for additional information   about the optionsString parameter. Refer to the NI RF Signal Generators   Getting Started Guide, located at Start» All Programs»National   Instruments»NI-RFSG» Documentation, for information about MAX setup.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetEventsDelay(System.String,System.Double)">
             <summary>
            Specifies the delay, in seconds, applied to the Started event, Done event, and all Marker events with respect to the analog    output of the RF signal generator. To set this attribute, the NI-RFSG device must be in the Configuration state. 
                By default, markers and events are delayed to align with the waveform data generated from the device.    This attribute adds an additional delay to markers and events. Use this attribute to adjust the time delay between    events and the corresponding data. 
                Units: Seconds 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetEventsDelay(System.String,System.Double@)">
             <summary>
            Specifies the delay, in seconds, applied to the Started event, Done event, and all Marker events with respect to the analog    output of the RF signal generator. To set this attribute, the NI-RFSG device must be in the Configuration state. 
                By default, markers and events are delayed to align with the waveform data generated from the device.    This attribute adds an additional delay to markers and events. Use this attribute to adjust the time delay between    events and the corresponding data. 
                Units: Seconds 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedConfigurationListStepTriggerOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for exporting the Configuration List Step   trigger.  To set this attribute, the NI-RFSG device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedConfigurationListStepTriggerOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for exporting the Configuration List Step   trigger.  To set this attribute, the NI-RFSG device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedDoneEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for exporting the Done event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedDoneEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for exporting the Done event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedMarkerEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for exporting the marker event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedMarkerEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for exporting the marker event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedRefClockOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for exporting the reference clock on   the NI 5650/5651/5652/5673 RF signal generators. To set this attribute,   the NI-RFSG device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedRefClockOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for exporting the reference clock on   the NI 5650/5651/5652/5673 RF signal generators. To set this attribute,   the NI-RFSG device must be in the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedScriptTriggerOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for exporting the script trigger. To   set this attribute, the NI-RFSG device must be in the Configuration state.   For trigger delay information, refer to the triggering section in the NI   RF Signal Generators Help. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedScriptTriggerOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for exporting the script trigger. To   set this attribute, the NI-RFSG device must be in the Configuration state.   For trigger delay information, refer to the triggering section in the NI   RF Signal Generators Help. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedStartedEventOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for exporting the started event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedStartedEventOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for exporting the started event. To set   this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedStartTriggerOutputTerminal(System.String,System.String)">
             <summary>
            Specifies the destination terminal for exporting the Start trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedStartTriggerOutputTerminal(System.String,System.String@)">
             <summary>
            Specifies the destination terminal for exporting the Start trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExternalCalibrationRecommendedInterval(System.String,System.Int32@)">
             <summary>
            Returns the recommended interval between each external calibration of the device. 
               Units: months 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExternalCalibrationTemperature(System.String,System.Double@)">
             <summary>
            Indicates in degrees Celsius the temperature of the device at the time of   the last external calibration. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExternalCalibrationUserDefinedInfo(System.String,System.String@)">
             <summary>
            Specifies a string that contains arbitrary, user-defined information that   is stored with external calibration. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExternalCalibrationUserDefinedInfoMaxSize(System.String,System.Int32@)">
             <summary>
            Returns the maximum string length for the   NIRFSG_ATTR_EXTERNAL_CALIBRATION_USER_DEFINED_INFO attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExternalGain(System.String,System.Double)">
             <summary>
            Specifies the external amplification or attenuation, if any, between   the RF signal generator and the device under test.   
               Positive values for this property represent amplification, and   negative values for this property represent attenuation.  
               Note:  Setting this property adjusts the device output   power to compensate for any amplification or attenuation between   the RF signal generator and the device under test.  
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExternalGain(System.String,System.Double@)">
             <summary>
            Specifies the external amplification or attenuation, if any, between   the RF signal generator and the device under test.   
               Positive values for this property represent amplification, and   negative values for this property represent attenuation.  
               Note:  Setting this property adjusts the device output   power to compensate for any amplification or attenuation between   the RF signal generator and the device under test.  
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetFpgaBitfilePath(System.String,System.String@)">
             <summary>
            Returns a string containing the path to the location of the current NI-RFSG instrument    driver FPGA extensions bitfile, a .lvbitx file, that is programmed on the device.    You can specify the bitfile location using the Driver Setup string in the optionString parameter    of the niRFSG_InitWithOptions function. 
                NI-RFSG instrument driver FPGA extensions enable you to use pre-compiled FPGA bitfiles to    customize the behavior of the vector signal transceiver FPGA while maintaining the functionality    of the NI-RFSG instrument driver. 
                Refer to the NI-RFSA and NI-RFSG Instrument Driver FPGA Extensions topic in the NI RF Signal    Generators Help for more information about using NI-RFSG instrument driver FPGA extensions for    NI vector signal analyzers. 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetFrequency(System.String,System.Double)">
             <summary>
            Specifies the frequency of the generated RF signal. For arbitrary waveform   generation, this attribute specifies the center frequency of the signal. 
               Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetFrequency(System.String,System.Double@)">
             <summary>
            Specifies the frequency of the generated RF signal. For arbitrary waveform   generation, this attribute specifies the center frequency of the signal. 
               Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetFrequencySettling(System.String,System.Double)">
             <summary>
            Configures the frequency settling time.  Interpretation of this value   depends on the NIRFSG_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetFrequencySettling(System.String,System.Double@)">
             <summary>
            Configures the frequency settling time.  Interpretation of this value   depends on the NIRFSG_ATTR_FREQUENCY_SETTLING_UNITS attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetFrequencySettlingUnits(System.String,System.Int32)">
             <summary>
            Specifies the interpretation of the value passed to the   NIRFSG_ATTR_FREQUENCY_SETTLING attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetFrequencySettlingUnits(System.String,System.Int32@)">
             <summary>
            Specifies the interpretation of the value passed to the   NIRFSG_ATTR_FREQUENCY_SETTLING attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetFrequencyTolerance(System.String,System.Double)">
             <summary>
            Specifies the maximum frequency error allowed during the software   upconversion process. NI-RFSG may introduce a frequency error up to the   specified amount in order to optimize computational speed and onboard   memory usage while upconverting phase-continuous signals. 
               If the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED attribute is set to   NIRFSG_VAL_DISABLE, the NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute is   ignored, and the driver does not introduce a frequency error. On devices   that do not use software upconversion, this property is ignored. The   NI 5670 always uses software upconversion, and the NI 5671 uses software   upconversion for I/Q rates greater than 8.33 MS/s. 
               To set the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute, the NI-RFSG device must be in   the Configuration state.
               Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetFrequencyTolerance(System.String,System.Double@)">
             <summary>
            Specifies the maximum frequency error allowed during the software   upconversion process. NI-RFSG may introduce a frequency error up to the   specified amount in order to optimize computational speed and onboard   memory usage while upconverting phase-continuous signals. 
               If the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED attribute is set to   NIRFSG_VAL_DISABLE, the NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute is   ignored, and the driver does not introduce a frequency error. On devices   that do not use software upconversion, this property is ignored. The   NI 5670 always uses software upconversion, and the NI 5671 uses software   upconversion for I/Q rates greater than 8.33 MS/s. 
               To set the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute, the NI-RFSG device must be in   the Configuration state.
               Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetGenerationMode(System.String,System.Int32)">
             <summary>
            Specifies whether to generate a continuous wave (CW) signal, the arb   waveform specified by the NIRFSG_ATTR_SELECTED_WAVEFORM attribute, or the   script specified by the NIRFSG_ATTR_SELECTED_SCRIPT attribute, upon   calling the niRFSG_Initiate function. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetGenerationMode(System.String,System.Int32@)">
             <summary>
            Specifies whether to generate a continuous wave (CW) signal, the arb   waveform specified by the NIRFSG_ATTR_SELECTED_WAVEFORM attribute, or the   script specified by the NIRFSG_ATTR_SELECTED_SCRIPT attribute, upon   calling the niRFSG_Initiate function. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetGroupCapabilities(System.String,System.String@)">
             <summary>
            Returns a string that contains a comma-separated list of class-extension   groups that NI-RFSG implements.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInstrumentFirmwareRevision(System.String,System.String@)">
             <summary>
            Returns a string that contains the firmware revision information for the   NI-RFSG device you are currently using.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInstrumentManufacturer(System.String,System.String@)">
             <summary>
            Returns a string that contains the name of the manufacturer for the   NI-RFSG device you are currently using.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInstrumentModel(System.String,System.String@)">
             <summary>
            Returns a string that contains the model number or name of the NI-RFSG   device that you are currently using. For drivers that support more than   one device, this attribute returns a comma-separated list of   supported devices.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetInterchangeCheck(System.String,System.Boolean)">
             <summary>
            Specifies whether to perform interchangeability checking and retrieve   interchangeability warnings.
               NOTE: This attribute is currently not supported. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInterchangeCheck(System.String,System.Boolean@)">
             <summary>
            Specifies whether to perform interchangeability checking and retrieve   interchangeability warnings.
               NOTE: This attribute is currently not supported. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetInterpolationDelay(System.String,System.Double)">
             <summary>
            Specifies the delay, in seconds, to apply to the I/Q waveform. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
                Units: Seconds 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInterpolationDelay(System.String,System.Double@)">
             <summary>
            Specifies the delay, in seconds, to apply to the I/Q waveform. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
                Units: Seconds 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqGainImbalance(System.String,System.Double)">
             <summary>
            Specifies the gain imbalance of the I/Q modulator (I versus Q). 
               Units: dB 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqGainImbalance(System.String,System.Double@)">
             <summary>
            Specifies the gain imbalance of the I/Q modulator (I versus Q). 
               Units: dB 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqImpairmentEnabled(System.String,System.Boolean)">
             <summary>
            Enables/disables I/Q impairment.  The NIRFSG_ATTR_IQ_I_OFFSET,   NIRFSG_ATTR_IQ_Q_OFFSET, NIRFSG_ATTR_IQ_GAIN_IMBALANCE, and   NIRFSG_ATTR_IQ_SKEW attributes are ignored when the   NIRFSG_ATTR_IQ_IMPAIRMENT_ENABLED attribute is disabled. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqImpairmentEnabled(System.String,System.Boolean@)">
             <summary>
            Enables/disables I/Q impairment.  The NIRFSG_ATTR_IQ_I_OFFSET,   NIRFSG_ATTR_IQ_Q_OFFSET, NIRFSG_ATTR_IQ_GAIN_IMBALANCE, and   NIRFSG_ATTR_IQ_SKEW attributes are ignored when the   NIRFSG_ATTR_IQ_IMPAIRMENT_ENABLED attribute is disabled. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqIOffset(System.String,System.Double)">
             <summary>
            When using a National Instruments AWG, this attribute specifies the   I-signal DC offset.  Actual AWG signal offset is equal to the I/Q   modulator offset correction plus the value specified by this attribute.    Units are either percent or volts, depending on the    NIRFSG_ATTR_OFFSET_UNITS attribute.
               When using an external AWG, this attribute is read-only 
               and indicates the I/Q modulator I-offset.  Units are volts, as indicated   by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqIOffset(System.String,System.Double@)">
             <summary>
            When using a National Instruments AWG, this attribute specifies the   I-signal DC offset.  Actual AWG signal offset is equal to the I/Q   modulator offset correction plus the value specified by this attribute.    Units are either percent or volts, depending on the    NIRFSG_ATTR_OFFSET_UNITS attribute.
               When using an external AWG, this attribute is read-only 
               and indicates the I/Q modulator I-offset.  Units are volts, as indicated   by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqOffsetUnits(System.String,System.Int32)">
             <summary>
            Specifies the units of the NIRFSG_ATTR_IQ_I_OFFSET attribute and the   NIRFSG_ATTR_IQ_Q_OFFSET attribute.  Offset units are either percent or   volts.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOffsetUnits(System.String,System.Int32@)">
             <summary>
            Specifies the units of the NIRFSG_ATTR_IQ_I_OFFSET attribute and the   NIRFSG_ATTR_IQ_Q_OFFSET attribute.  Offset units are either percent or   volts.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqQOffset(System.String,System.Double)">
             <summary>
            When using a National Instruments AWG, this attribute 
               specifies the Q-signal DC offset.  Actual AWGsignal offset is equal to the   I/Q modulator offset correction plus the value specified by this   attribute.  Units are either percent or volts, depending on the   NIRFSG_ATTR_OFFSET_UNITS attribute.
               When using an external AWG, 
               this attribute is read-only, and indicates the IQ modulator Q offset.   Units are volts, as indicated by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqQOffset(System.String,System.Double@)">
             <summary>
            When using a National Instruments AWG, this attribute 
               specifies the Q-signal DC offset.  Actual AWGsignal offset is equal to the   I/Q modulator offset correction plus the value specified by this   attribute.  Units are either percent or volts, depending on the   NIRFSG_ATTR_OFFSET_UNITS attribute.
               When using an external AWG, 
               this attribute is read-only, and indicates the IQ modulator Q offset.   Units are volts, as indicated by the NIRFSG_ATTR_OFFSET_UNITS attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqOutPortCarrierFrequency(System.String,System.Double)">
             <summary>
            Specifies the frequency of the I/Q OUT port signal. The onboard signal processing (OSP)    applies the specified frequency shift to the I/Q data before the data is sent to the    digital-to-analog converter (DAC). To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOutPortCarrierFrequency(System.String,System.Double@)">
             <summary>
            Specifies the frequency of the I/Q OUT port signal. The onboard signal processing (OSP)    applies the specified frequency shift to the I/Q data before the data is sent to the    digital-to-analog converter (DAC). To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Hertz (Hz) 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqOutPortCommonModeOffset(System.String,System.Double)">
             <summary>
            Specifies the common-mode offset applied to the signals generated at each differential output terminal.    This attribute applies only when you set the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute to NIRFSG_VAL_DIFFERENTIAL.    Common-mode offset shifts both positive and negative terminals in the same direction. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Volts 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOutPortCommonModeOffset(System.String,System.Double@)">
             <summary>
            Specifies the common-mode offset applied to the signals generated at each differential output terminal.    This attribute applies only when you set the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute to NIRFSG_VAL_DIFFERENTIAL.    Common-mode offset shifts both positive and negative terminals in the same direction. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Volts 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqOutPortLevel(System.String,System.Double)">
             <summary>
            Specifies the amplitude of the generated signal in volts, peak-to-peak (Vpp). For example,    if you set this attribute to 1.0, the output signal ranges from -0.5 volts to 0.5 volts. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the specifications document for your device for allowable output levels. 
                Units: Volts, peak-to-peak 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOutPortLevel(System.String,System.Double@)">
             <summary>
            Specifies the amplitude of the generated signal in volts, peak-to-peak (Vpp). For example,    if you set this attribute to 1.0, the output signal ranges from -0.5 volts to 0.5 volts. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the specifications document for your device for allowable output levels. 
                Units: Volts, peak-to-peak 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqOutPortLoadImpedance(System.String,System.Double)">
             <summary>
            Specifies the load impedance connected to the I/Q OUT port. To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Ohms 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOutPortLoadImpedance(System.String,System.Double@)">
             <summary>
            Specifies the load impedance connected to the I/Q OUT port. To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Ohms 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqOutPortOffset(System.String,System.Double)">
             <summary>
            Specifies the value, in volts, that the signal generator adds to the arbitrary waveform data.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Volts 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOutPortOffset(System.String,System.Double@)">
             <summary>
            Specifies the value, in volts, that the signal generator adds to the arbitrary waveform data.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Units: Volts 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOutPortTemperature(System.String,System.Double@)">
             <summary>
            Returns the temperature of the I/Q Out circuitry on the device. To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Untis: Degrees Celsius 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqOutPortTerminalConfiguration(System.String,System.Int32)">
             <summary>
            Specifies whether to use the I/Q OUT port for Differential configuration or Single-Ended configuration.    If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, you must terminate the negative I and Q output    connectors with a 50 Ohm termination. 
                If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, the positive I and Q connectors generate the resulting waveform.    If you set this attribute to NIRFSG_VAL_DIFFERENTIAL, both the positive and negative I and Q connectors generate the resulting waveform. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Differential and Single-Ended Operation (I/Q Interface) topic of the NI RF Signal Generators Help    for more information about differential and single-ended operation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqOutPortTerminalConfiguration(System.String,System.Int32@)">
             <summary>
            Specifies whether to use the I/Q OUT port for Differential configuration or Single-Ended configuration.    If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, you must terminate the negative I and Q output    connectors with a 50 Ohm termination. 
                If you set this attribute to NIRFSG_VAL_SINGLE_ENDED, the positive I and Q connectors generate the resulting waveform.    If you set this attribute to NIRFSG_VAL_DIFFERENTIAL, both the positive and negative I and Q connectors generate the resulting waveform. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Differential and Single-Ended Operation (I/Q Interface) topic of the NI RF Signal Generators Help    for more information about differential and single-ended operation.
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqRate(System.String,System.Double)">
             <summary>
            This attribute specifies the I/Q rate of the arbitrary waveform.   The I/Q rate is coerced to what rates the hardware can achieve.   Read this value back after setting it to see what the actual   I/Q rate is. NI-RFSG internally uses an FIR filter with flat   response up to (0.4 × IQ rate). Given a desired signal with   the maximum frequency content f, sample the signal at   an I/Q rate greater than or equal to (f/0.4). 
               This attribute applies only when the NIRFSG_ATTR_GENERATION_MODE   attribute is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
               Use this attribute to associate an I/Q rate with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of   the NI RF Signal Generators Help for more information about assigning  
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqRate(System.String,System.Double@)">
             <summary>
            This attribute specifies the I/Q rate of the arbitrary waveform.   The I/Q rate is coerced to what rates the hardware can achieve.   Read this value back after setting it to see what the actual   I/Q rate is. NI-RFSG internally uses an FIR filter with flat   response up to (0.4 × IQ rate). Given a desired signal with   the maximum frequency content f, sample the signal at   an I/Q rate greater than or equal to (f/0.4). 
               This attribute applies only when the NIRFSG_ATTR_GENERATION_MODE   attribute is set to NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
               Use this attribute to associate an I/Q rate with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of   the NI RF Signal Generators Help for more information about assigning  
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqSkew(System.String,System.Double)">
             <summary>
            Specifies the adjustment of the phase angle between the I and Q vectors.   If this skew is zero, the phase angle is 90 degrees. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqSkew(System.String,System.Double@)">
             <summary>
            Specifies the adjustment of the phase angle between the I and Q vectors.   If this skew is zero, the phase angle is 90 degrees. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetIqSwapEnabled(System.String,System.Boolean)">
             <summary>
            Enables or disables the inverse phase rotation of the IQ signal by   swapping the I and Q inputs.  
               To set this attribute, the NI-RFSG device must   be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetIqSwapEnabled(System.String,System.Boolean@)">
             <summary>
            Enables or disables the inverse phase rotation of the IQ signal by   swapping the I and Q inputs.  
               To set this attribute, the NI-RFSG device must   be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLogicalName(System.String,System.String@)">
             <summary>
            Contains the logical name you specified when opening the current IVI session.   You can pass a logical name to the niRFSG_init   function or the niRFSG_InitWithOptions function. The IVI Configuration   Utility must contain an entry for the logical name. The logical name entry   refers to a driver session section in the IVI Configuration file. The   driver session section specifies a physical device and initial user   options.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLoInPower(System.String,System.Double)">
             <summary>
            Specifies the power level of the signal at the front panel LO IN   connector. 
               NOTE: This attribute is read/write if you are using an external LO.   Otherwise, this attribute is read-only. 
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoInPower(System.String,System.Double@)">
             <summary>
            Specifies the power level of the signal at the front panel LO IN   connector. 
               NOTE: This attribute is read/write if you are using an external LO.   Otherwise, this attribute is read-only. 
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLoopBandwidth(System.String,System.Int32)">
             <summary>
            Configures the loop bandwidth of the tuning PLLs.NI 5610/5670/5671/5672 --   this attribute is ignoredfor signal bandwidths greater than or equal to 10   MHz. 
                Note: Setting this attribute to NIRFSG_VAL_HIGH on the    NI 5650/5651/5652/5673/5673E allows the frequency to settle    significantly faster at the expense of increased phase noise.    Setting this attribute to NIRFSG_VAL_MEDIUM is not a valid    option on the NI 5650/5651/5652/5673/5673E. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoopBandwidth(System.String,System.Int32@)">
             <summary>
            Configures the loop bandwidth of the tuning PLLs.NI 5610/5670/5671/5672 --   this attribute is ignoredfor signal bandwidths greater than or equal to 10   MHz. 
                Note: Setting this attribute to NIRFSG_VAL_HIGH on the    NI 5650/5651/5652/5673/5673E allows the frequency to settle    significantly faster at the expense of increased phase noise.    Setting this attribute to NIRFSG_VAL_MEDIUM is not a valid    option on the NI 5650/5651/5652/5673/5673E. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLoOutEnabled(System.String,System.Boolean)">
             <summary>
            Specifies whether the local oscillator signal is present at the front   panel LO Out connector.
               The local oscillator signal remains at the LO OUT front panel connector   until this attribute is set to VI_FALSE even if the   NIRFSG_ATTR_OUTPUT_ENABLED attribute is set to VI FALSE,   the niRFSG_Abort function is called, or the NI-RFSG sesssion is closed.   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoOutEnabled(System.String,System.Boolean@)">
             <summary>
            Specifies whether the local oscillator signal is present at the front   panel LO Out connector.
               The local oscillator signal remains at the LO OUT front panel connector   until this attribute is set to VI_FALSE even if the   NIRFSG_ATTR_OUTPUT_ENABLED attribute is set to VI FALSE,   the niRFSG_Abort function is called, or the NI-RFSG sesssion is closed.   
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoOutPower(System.String,System.Double@)">
             <summary>
            Specifies the power level of the signal at the front panel LO OUT   connector. 
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLoPllFractionalModeEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether to use fractional mode for the local oscillator (LO) phase-locked loop (PLL).    This attribute enables or disables fractional frequency tuning in the LO. Fractional mode    provides a finer frequency step resolution and allows smaller values for the   
             
             </summary>
             <param name="channel">
             </param>
             <param name="value">
             </param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoPllFractionalModeEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether to use fractional mode for the local oscillator (LO) phase-locked loop (PLL).    This attribute enables or disables fractional frequency tuning in the LO. Fractional mode    provides a finer frequency step resolution and allows smaller values for the   
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLoSource(System.String,System.String)">
             <summary>
            Specifies whether to use the internal or external local oscillator (LO) source.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
                To use an external LO source, set this attribute to NIRFSG_VAL_LO_SOURCE_LO_IN_STR,    connect a signal to the LO IN connector on the device, and use the    NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute to specify the LO frequency. 
                To use the internal LO source, set the NIRFSG_ATTR_LO_SOURCE attribute to    NIRFSG_VAL_LO_SOURCE_ONBOARD_STR. If you specify an internal LO source,    the LO is generated inside the device itself. 
             
             </summary>
             <returns>
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoSource(System.String,System.String@)">
             <summary>
            Specifies whether to use the internal or external local oscillator (LO) source.    To set this attribute, the NI-RFSG device must be in the Configuration state. 
                To use an external LO source, set this attribute to NIRFSG_VAL_LO_SOURCE_LO_IN_STR,    connect a signal to the LO IN connector on the device, and use the    NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute to specify the LO frequency. 
                To use the internal LO source, set the NIRFSG_ATTR_LO_SOURCE attribute to    NIRFSG_VAL_LO_SOURCE_ONBOARD_STR. If you specify an internal LO source,    the LO is generated inside the device itself. 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLoFrequencyStepSize(System.String,System.Double)">
             <summary>
            Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
                When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is enabled, the specified step size    affects the fractional spur performance of the device. When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED    attribute is disabled, the specified step size affects the phase noise performance of the device. 
                The valid values for this attribute depend on the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute.    If you disable the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute, the specified value is    coerced to the closest valid value. 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoFrequencyStepSize(System.String,System.Double@)">
             <summary>
            Specifies the step size for tuning the local oscillator (LO) phase-locked loop (PLL). 
                When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute is enabled, the specified step size    affects the fractional spur performance of the device. When the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED    attribute is disabled, the specified step size affects the phase noise performance of the device. 
                The valid values for this attribute depend on the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute.    If you disable the NIRFSG_ATTR_LO_PLL_FRACTIONAL_MODE_ENABLED attribute, the specified value is    coerced to the closest valid value. 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLoTemperature(System.String,System.Double@)">
             <summary>
            Indicates the LO module temperature in degrees Celsius. 
               Units: degrees Celsius (°C) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetMarkerEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the name of the fully-qualified signal name as a string. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetMemorySize(System.String,System.Int64@)">
             <summary>
            The total amount of memory on the signal generator in bytes. 
               Note: Not all onboard memory can be used for waveform storage. A portion   of onboard memory stores scripts that specify how the waveforms are   generated. These scripts typically require less than 1 KB of   onboard memory.  
                 Units: bytes 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetModuleRevision(System.String,System.String@)">
             <summary>
            Returns the module revision letter.  If the NI-RFSG session is controlling multiple devices,  this returns the module revision letter of the primary RF device.  The NI-RFSG session is   opened using the primary RF device name.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetOutputEnabled(System.String,System.Boolean)">
             <summary>
            Specifies whether signal output is enabled. Setting the   NIRFSG_ATTR_OUTPUT_ENABLED attribute to VI_FALSE while in   the Generation state stops signal output, although generation   continues internally. Setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute while in the Committed state does not transition the   device to the Configuration state, but output changes immediately. 
               Note: When the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set   to a valid list name, setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute transitions the device to the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetOutputEnabled(System.String,System.Boolean@)">
             <summary>
            Specifies whether signal output is enabled. Setting the   NIRFSG_ATTR_OUTPUT_ENABLED attribute to VI_FALSE while in   the Generation state stops signal output, although generation   continues internally. Setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute while in the Committed state does not transition the   device to the Configuration state, but output changes immediately. 
               Note: When the NIRFSG_ATTR_ACTIVE_CONFIGURATION_LIST attribute is set   to a valid list name, setting the NIRFSG_ATTR_OUTPUT_ENABLED   attribute transitions the device to the Configuration state. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetOutputPort(System.String,System.Int32)">
             <summary>
            Specifies the connector(s) to use to generate the signal. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
                You must write complex I and Q data for all options. The Q data has no effect if    you set this attribute to I Only and set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY    attribute to 0. If you set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY attribute to a    value other than 0, the onboard signal processing (OSP) frequency shifts I and Q as a complex    value and outputs the real portion of the result on the I connector(s) of the device. 
                If you set the NIRFSG_ATTR_OUTPUT_PORT attribute to NIRFSG_VAL_I_ONLY or NIRFSG_VAL_IQ_OUT,    the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute applies. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetOutputPort(System.String,System.Int32@)">
             <summary>
            Specifies the connector(s) to use to generate the signal. To set this attribute,    the NI-RFSG device must be in the Configuration state. 
                You must write complex I and Q data for all options. The Q data has no effect if    you set this attribute to I Only and set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY    attribute to 0. If you set the NIRFSG_ATTR_IQ_OUT_PORT_CARRIER_FREQUENCY attribute to a    value other than 0, the onboard signal processing (OSP) frequency shifts I and Q as a complex    value and outputs the real portion of the result on the I connector(s) of the device. 
                If you set the NIRFSG_ATTR_OUTPUT_PORT attribute to NIRFSG_VAL_I_ONLY or NIRFSG_VAL_IQ_OUT,    the NIRFSG_ATTR_IQ_OUT_PORT_TERMINAL_CONFIGURATION attribute applies. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetP2pDataTransferPermissionitialCredits(System.String,System.Int64)">
             <summary>
            Specifies the initial amount of data that the writer peer    can transfer over the bus into the configured endpoint when the    peer-to-peer data stream is enabled. If this attribute is not    set and the endpoint is empty, credits equal to the full endpoint    size are issued to the writer peer. If data is written to the    endpoint using the niRFSG_WriteP2PEndpointI16 function prior to    enabling the stream, credits equal to the remaining space available    in the endpoint are issued to the writer peer. This attribute is    coerced up by NI-RFSG to 8-byte boundaries.     This attribute is endpoint based 
                Units: samples per channel 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pDataTransferPermissionitialCredits(System.String,System.Int64@)">
             <summary>
            Specifies the initial amount of data that the writer peer    can transfer over the bus into the configured endpoint when the    peer-to-peer data stream is enabled. If this attribute is not    set and the endpoint is empty, credits equal to the full endpoint    size are issued to the writer peer. If data is written to the    endpoint using the niRFSG_WriteP2PEndpointI16 function prior to    enabling the stream, credits equal to the remaining space available    in the endpoint are issued to the writer peer. This attribute is    coerced up by NI-RFSG to 8-byte boundaries.     This attribute is endpoint based 
                Units: samples per channel 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetP2pDataTransferPermissionInterval(System.String,System.Int64)">
             <summary>
            Specifies the interval at which the RF signal generator issues    credits to allow the writer peer to transfer data over the bus into    the configured endpoint. Refer to the Flow Control topic in the    NI RF Signal Generators Help for more information. This attribute is    coerced up by NI-RFSG to the nearest 128-byte boundary.    This attribute is endpoint based.   
                Units: samples per channel 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pDataTransferPermissionInterval(System.String,System.Int64@)">
             <summary>
            Specifies the interval at which the RF signal generator issues    credits to allow the writer peer to transfer data over the bus into    the configured endpoint. Refer to the Flow Control topic in the    NI RF Signal Generators Help for more information. This attribute is    coerced up by NI-RFSG to the nearest 128-byte boundary.    This attribute is endpoint based.   
                Units: samples per channel 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetP2pEnabled(System.String,System.Boolean)">
             <summary>
            Specifies whether the device reads data from the peer-to-peer    endpoint.  This attribute is endpoint-based. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pEnabled(System.String,System.Boolean@)">
             <summary>
            Specifies whether the device reads data from the peer-to-peer    endpoint.  This attribute is endpoint-based. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pEndpointCount(System.String,System.Int32@)">
             <summary>
            Returns the number of peer-to-peer FIFO endpoints supported by the device. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetP2pEndpointFullnessStartTriggerLevel(System.String,System.Int64)">
             <summary>
            Specifies the number of samples needed to be received by the endpoint before    the device starts generation. This attribute applies only when the    NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSG_VAL_P2P_ENDPOINT_FULLNESS.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pEndpointFullnessStartTriggerLevel(System.String,System.Int64@)">
             <summary>
            Specifies the number of samples needed to be received by the endpoint before    the device starts generation. This attribute applies only when the    NIRFSG_ATTR_START_TRIGGER_TYPE attribute is set to    NIRFSG_VAL_P2P_ENDPOINT_FULLNESS.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pEndpointSize(System.String,System.Int64@)">
             <summary>
            Returns the size, in samples, of the device's endpoint.    This attribute is endpoint-based. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pMostSpaceAvailableInEndpoint(System.String,System.Int64@)">
             <summary>
            Returns the largest number of samples per channel available in the endpoint since    this attribute was last read. You can use this attribute to determine how much    endpoint space to use as a buffer against bus traffic latencies by reading    the attribute and keeping track of the largest value returned.    This attribute is endpoint based. 
                If you want to minimize the latency for data to move through the endpoint    and be generated by the RF signal generator, use the    NIRFSG_ATTR_P2P_DATA_TRANSFER_PERMISSION_INITIAL_CREDITS attribute to grant    fewer initial credits than the default of the entire endpoint size. 
                Units: samples per channel 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetP2pSpaceAvailableInEndpoint(System.String,System.Int64@)">
             <summary>
            Returns the current space available in the endpoint. You can use this    attribute when priming the endpoint with initial data using the    niRFSG_WriteP2PEndpointI16 function to determine how many samples    you can write. You also can use this attribute to characterize the    performance and measure the latency of the peer-to-peer stream as data    moves across the bus. This attribute is endpoint based. 
                Units: samples per channel 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPeakEnvelopePower(System.String,System.Double@)">
             <summary>
            Specifies the maximum instantaneous power of the current RF output signal.   
               Note: This attribute is valid only when the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute is set to NIRFSG_VAL_AVERAGE_POWER. 
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPeakPowerAdjsutmentInheritance(System.String,System.Int32)">
             <summary>
            Determines the inheritance behavior of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute when a script inherits values from specified waveforms. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPeakPowerAdjsutmentInheritance(System.String,System.Int32@)">
             <summary>
            Determines the inheritance behavior of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute when a script inherits values from specified waveforms. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPeakPowerAdjustment(System.String,System.Double)">
             <summary>
            Specifies the adjustment for the NIRFSG_ATTR_POWER_LEVEL attribute.    The value of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT attribute adds    to the NIRFSG_ATTR_POWER_LEVEL attribute. The NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute typically specifies the peak-to-average power ratio (PAPR) of    a waveform. If the PAPR is specified, the specified power level becomes    the average power level of the waveform, even if the    NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to NIRFSG_VAL_PEAK_POWER. 
                Note: Use this attribute to associate a peak power adjustment with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of the    NI RFSG Main Help for more information. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPeakPowerAdjustment(System.String,System.Double@)">
             <summary>
            Specifies the adjustment for the NIRFSG_ATTR_POWER_LEVEL attribute.    The value of the NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT attribute adds    to the NIRFSG_ATTR_POWER_LEVEL attribute. The NIRFSG_ATTR_PEAK_POWER_ADJUSTMENT    attribute typically specifies the peak-to-average power ratio (PAPR) of    a waveform. If the PAPR is specified, the specified power level becomes    the average power level of the waveform, even if the    NIRFSG_ATTR_POWER_LEVEL_TYPE attribute is set to NIRFSG_VAL_PEAK_POWER. 
                Note: Use this attribute to associate a peak power adjustment with a waverform.   Refer to the Assigning Properties or Attributes to a Waveform topic of the    NI RFSG Main Help for more information. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPhaseContinuityEnabled(System.String,System.Int32)">
             <summary>
            Specifies whether the driver maintains phase continuity in the   arbitrary waveforms. When this attribute is set to   NIRFSG_VAL_ENABLE, NI-RFSG may increase the waveform size. When   this attribute is set to NIRFSG_VAL_ENABLE, the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute specifies the maximum   allowable frequency error that can be introduced when keeping the   signal phase-continuous. To set the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED   attribute, the NI-RFSG device must be in the Configuration state.   NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED applies only when the   NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
               On the NI 5671: When using the NI 5671 with I/Q rates less than or equal   to 8.33 MS/s, an input phase-continuous signal is always phase-continuous   upon output, and this attribute has no effect. 
               NI 5672/5673/5673E: Phase continuity is always enabled on this device. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPhaseContinuityEnabled(System.String,System.Int32@)">
             <summary>
            Specifies whether the driver maintains phase continuity in the   arbitrary waveforms. When this attribute is set to   NIRFSG_VAL_ENABLE, NI-RFSG may increase the waveform size. When   this attribute is set to NIRFSG_VAL_ENABLE, the   NIRFSG_ATTR_FREQUENCY_TOLERANCE attribute specifies the maximum   allowable frequency error that can be introduced when keeping the   signal phase-continuous. To set the NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED   attribute, the NI-RFSG device must be in the Configuration state.   NIRFSG_ATTR_PHASE_CONTINUITY_ENABLED applies only when the   NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_SCRIPT. 
               On the NI 5671: When using the NI 5671 with I/Q rates less than or equal   to 8.33 MS/s, an input phase-continuous signal is always phase-continuous   upon output, and this attribute has no effect. 
               NI 5672/5673/5673E: Phase continuity is always enabled on this device. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPhaseOffset(System.String,System.Double)">
             <summary>
            Specifies the phase of the RF output signal. You can use this attribute   to align the phase of the RF output with the phase of the RF output of   another device, as long as the two devices are phase-coherent. 
               Units: degrees (º) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPhaseOffset(System.String,System.Double@)">
             <summary>
            Specifies the phase of the RF output signal. You can use this attribute   to align the phase of the RF output with the phase of the RF output of   another device, as long as the two devices are phase-coherent. 
               Units: degrees (º) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPowerLevel(System.String,System.Double)">
             <summary>
            Specifies either the average power level or peak power level of the   generated RF signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute setting. average power of the signal or the peak power of the   signal. 
               Refer to the specifications document for your device for allowable   power level settings. 
               Note: This attribute is read-only for the NI 5653 device.   It is read/write for all other supported devices. 
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPowerLevel(System.String,System.Double@)">
             <summary>
            Specifies either the average power level or peak power level of the   generated RF signal, depending on the NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute setting. average power of the signal or the peak power of the   signal. 
               Refer to the specifications document for your device for allowable   power level settings. 
               Note: This attribute is read-only for the NI 5653 device.   It is read/write for all other supported devices. 
               Units: dBm 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPowerLevelType(System.String,System.Int32)">
             <summary>
            Specifies how NI-RFSG interprets the value of the   NIRFSG_ATTR_POWER_LEVEL attribute.  The NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute also affects how waveforms are scaled.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPowerLevelType(System.String,System.Int32@)">
             <summary>
            Specifies how NI-RFSG interprets the value of the   NIRFSG_ATTR_POWER_LEVEL attribute.  The NIRFSG_ATTR_POWER_LEVEL_TYPE   attribute also affects how waveforms are scaled.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPulseModulationEnabled(System.String,System.Boolean)">
             <summary>
            Enables or disables pulse modulation.  If this property is enabled and the   signal at the PLS MOD connector is high, the device generates a signal. If   the signal is low, output generation is disabled. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPulseModulationEnabled(System.String,System.Boolean@)">
             <summary>
            Enables or disables pulse modulation.  If this property is enabled and the   signal at the PLS MOD connector is high, the device generates a signal. If   the signal is low, output generation is disabled. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPxiChassisClk10Source(System.String,System.String)">
             <summary>
            Specifies the clock source for driving the PXI 10 MHz backplane reference   clock. This option can only be configured if the NI 5610 upconverter   module is installed in Slot 2 of a PXI chassis. To set this attribute, the   NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPxiChassisClk10Source(System.String,System.String@)">
             <summary>
            Specifies the clock source for driving the PXI 10 MHz backplane reference   clock. This option can only be configured if the NI 5610 upconverter   module is installed in Slot 2 of a PXI chassis. To set this attribute, the   NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetQueryInstrumentStatus(System.String,System.Boolean)">
             <summary>
            Specifies whether NI-RFSG queries the NI-RFSG device status   after each operation. Querying the device status is useful   for debugging. After you validate your program, set this attribute   to VI_FALSE to disable status checking and maximize performance.   NI-RFSG can choose to ignore status checking for particular attributes,   regardless of the setting of this attribute. Use the niRFSG_InitWithOptions   function to override the default value. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetQueryInstrumentStatus(System.String,System.Boolean@)">
             <summary>
            Specifies whether NI-RFSG queries the NI-RFSG device status   after each operation. Querying the device status is useful   for debugging. After you validate your program, set this attribute   to VI_FALSE to disable status checking and maximize performance.   NI-RFSG can choose to ignore status checking for particular attributes,   regardless of the setting of this attribute. Use the niRFSG_InitWithOptions   function to override the default value. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRangeCheck(System.String,System.Boolean)">
             <summary>
            Specifies whether to validate attribute values and function   parameters. Range checking parameters is very useful for debugging.   After you validate your program, set this attribute to VI_FALSE to disable   range checking and maximize performance. Use the niRFSG_InitWithOptions   function to override the default value. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRangeCheck(System.String,System.Boolean@)">
             <summary>
            Specifies whether to validate attribute values and function   parameters. Range checking parameters is very useful for debugging.   After you validate your program, set this attribute to VI_FALSE to disable   range checking and maximize performance. Use the niRFSG_InitWithOptions   function to override the default value. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRecordCoercions(System.String,System.Boolean)">
             <summary>
            Specifies whether the IVI engine keeps a list of the value coercions it   makes for integer and real type attributes.
               This attribute is currently not supported.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRecordCoercions(System.String,System.Boolean@)">
             <summary>
            Specifies whether the IVI engine keeps a list of the value coercions it   makes for integer and real type attributes.
               This attribute is currently not supported.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRefClockRate(System.String,System.Double)">
             <summary>
            Specifies the rate of the reference clock. NI-RFSG supports only   a Reference clock rate of 10 MHz.To set this attribute, the   NI-RFSG device must be in the Configuration state.
                Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRefClockRate(System.String,System.Double@)">
             <summary>
            Specifies the rate of the reference clock. NI-RFSG supports only   a Reference clock rate of 10 MHz.To set this attribute, the   NI-RFSG device must be in the Configuration state.
                Units: hertz (Hz) 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRefClockSource(System.String,System.String)">
             <summary>
            Specifies the reference clock source. To set this attribute, the NI-RFSG   device must be in the Configuration state. Only certain combinations   of this attribute and the NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE   attribute are valid
               Note: NI 5670/5671/5672 devices also allow you to drive the PXI 10 MHz   backplane clock on PXI chassis only using the   NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRefClockSource(System.String,System.String@)">
             <summary>
            Specifies the reference clock source. To set this attribute, the NI-RFSG   device must be in the Configuration state. Only certain combinations   of this attribute and the NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE   attribute are valid
               Note: NI 5670/5671/5672 devices also allow you to drive the PXI 10 MHz   backplane clock on PXI chassis only using the   NIRFSG_ATTR_PXI_CHASSIS_CLK10_SOURCE attribute. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRefPllBandwidth(System.String,System.Int32)">
             <summary>
            Configures the loop bandwidth of the reference PLL.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRefPllBandwidth(System.String,System.Int32@)">
             <summary>
            Configures the loop bandwidth of the reference PLL.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRfBlankingSource(System.String,System.String)">
             <summary>
            Specifies the marker event at which RF blanking occurs. RF blanking quickly attenuates the RF OUT signal.    Use marker events to toggle the state of RF blanking. The RF Output always starts in the unblanked state. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                You can specify marker events by using scripts to trigger blanking at a certain point in a waveform.    For example, if you set this attribute to NIRFSG_VAL_MARKER0, and marker0 occurs on samples 1,000    and 2,000 of a script, then the RF Output will be blanked (attenuated) between samples 1,000 and 2,000. 
                Note: The shortest supported blanking interval is eight microseconds. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRfBlankingSource(System.String,System.String@)">
             <summary>
            Specifies the marker event at which RF blanking occurs. RF blanking quickly attenuates the RF OUT signal.    Use marker events to toggle the state of RF blanking. The RF Output always starts in the unblanked state. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                You can specify marker events by using scripts to trigger blanking at a certain point in a waveform.    For example, if you set this attribute to NIRFSG_VAL_MARKER0, and marker0 occurs on samples 1,000    and 2,000 of a script, then the RF Output will be blanked (attenuated) between samples 1,000 and 2,000. 
                Note: The shortest supported blanking interval is eight microseconds. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetScriptTriggerTerminalName(System.String,System.String@)">
             <summary>
            Returns the name of the fully-qualified signal name as a string.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetScriptTriggerType(System.String,System.Int32)">
             <summary>
            Specifies the script trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetScriptTriggerType(System.String,System.Int32@)">
             <summary>
            Specifies the script trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration   state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSelectedScript(System.String,System.String)">
             <summary>
            Specifies the script in onboard memory to generate upon calling the   niRFSG_Initiate function when NIRFSG_ATTR_GENERATION_MODE is set to   NIRFSG_VAL_SCRIPT.  
               The NIRFSG_ATTR_SELECTED_SCRIPT attribute is ignored   when the NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_CW. To set the   NIRFSG_ATTR_SELECTED_SCRIPT attribute, the NI-RFSG device must be in the   Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSelectedScript(System.String,System.String@)">
             <summary>
            Specifies the script in onboard memory to generate upon calling the   niRFSG_Initiate function when NIRFSG_ATTR_GENERATION_MODE is set to   NIRFSG_VAL_SCRIPT.  
               The NIRFSG_ATTR_SELECTED_SCRIPT attribute is ignored   when the NIRFSG_ATTR_GENERATION_MODE attribute is set to   NIRFSG_VAL_ARB_WAVEFORM or NIRFSG_VAL_CW. To set the   NIRFSG_ATTR_SELECTED_SCRIPT attribute, the NI-RFSG device must be in the   Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSelfCalibrationTemperature(System.String,System.Double@)">
             <summary>
            Indicates in degrees Celsius the temperature of the device at the time of   the last self calibration. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSerialNumber(System.String,System.String@)">
             <summary>
            Returns the serial number of the RF module.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSignalBandwidth(System.String,System.Double)">
             <summary>
            Specifies the bandwidth of the arbitrary signal. 
               This value must be less than or equal to (0.8 * IQ rate).  
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSignalBandwidth(System.String,System.Double@)">
             <summary>
            Specifies the bandwidth of the arbitrary signal. 
               This value must be less than or equal to (0.8 * IQ rate).  
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSimulate(System.String,System.Boolean@)">
             <summary>
            Returns whether NI-RFSG simulates I/O operations. This attribute   is useful for debugging applications without using hardware.   Once a session is opened, you cannot change the simulation state.   Use the niRFSG_InitWithOptions function to enable simulation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSpecificDriverClassSpecMajorVersion(System.String,System.Int32@)">
             <summary>
            Returns the major version number of the class specification with which   NI-RFSG is compliant.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSpecificDriverClassSpecMinorVersion(System.String,System.Int32@)">
             <summary>
            Returns the minor version number of the class specification with which   NI-RFSG is compliant.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSpecificDriverDescription(System.String,System.String@)">
             <summary>
            Returns a string that contains a brief description of NI-RFSG.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSpecificDriverPrefix(System.String,System.String@)">
             <summary>
            Returns a string that contains the prefix for NI-RFSG. The name of each   user-callable function in NI-RFSG starts with this prefix.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSpecificDriverRevision(System.String,System.String@)">
             <summary>
            Returns a string that contains additional version information about   NI-RFSG.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSpecificDriverVendor(System.String,System.String@)">
             <summary>
            Returns a string that contains the name of the vendor that supplies   NI-RFSG.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStartedEventTerminalName(System.String,System.String@)">
             <summary>
            Returns the name of the fully-qualified signal name as a string. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStartTriggerTerminalName(System.String,System.String@)">
             <summary>
            Returns the name of the fully-qualified signal name as a string.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetStartTriggerType(System.String,System.Int32)">
             <summary>
            Specifies the start trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStartTriggerType(System.String,System.Int32@)">
             <summary>
            Specifies the start trigger type. Depending upon the value of this   attribute, more attributes may be needed to fully configure the trigger.   To set this attribute, the NI-RFSG device must be in the Configuration state.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetStreamingEnabled(System.String,System.Boolean)">
             <summary>
            Enables or disables streaming of waveform data.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStreamingEnabled(System.String,System.Boolean@)">
             <summary>
            Enables or disables streaming of waveform data.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStreamingSpaceAvailableInWaveform(System.String,System.Int64@)">
             <summary>
            Indicates the space available in samples in the streaming   waveform for writing new data. For optimal performance, write   new data to the waveform in a fixed size that is an integer   divisor of the total size of the streaming waveform.   This waveform size ensures that writes do not have to wrap   around from the end to the beginning of the waveform buffer. 
               To read this attribute, the NI-RFSG device must be in   the Committed state. 
               Units: Samples 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetStreamingWaveformName(System.String,System.String)">
             <summary>
            Specifies the name of the waveform used to continuously stream data during   generation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStreamingWaveformName(System.String,System.String@)">
             <summary>
            Specifies the name of the waveform used to continuously stream data during   generation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetStreamingWriteTimeout(System.String,System.Double)">
             <summary>
            Indicates the maximum amount of time allowed to complete a streaming write operation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetStreamingWriteTimeout(System.String,System.Double@)">
             <summary>
            Indicates the maximum amount of time allowed to complete a streaming write operation.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSupportedInstrumentModels(System.String,System.String@)">
             <summary>
            Returns a model code of the NI-RFSG device.   For drivers that support more than one device,   this attribute contains a comma-separated list of supported devices. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSyncSampleClockDistLine(System.String,System.String@)">
             <summary>
            Specifies which external trigger line distributes the Sample Clock sync signal.    When synchronizing the Sample Clock, configure all devices to use the same Sample Clock sync distribution line.
                To set this attribute, the NI-RFSG device must be in the Configuration state.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSyncSampleClockDistLine(System.String,System.String)">
             <summary>
            Specifies which external trigger line distributes the Sample Clock sync signal.    When synchronizing the Sample Clock, configure all devices to use the same Sample Clock sync distribution line.
                To set this attribute, the NI-RFSG device must be in the Configuration state.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSyncSampleClockMaster(System.String,System.Boolean@)">
             <summary>
            Specifies whether the device is the master device when synchronizing the Sample Clock between multiple devices. 
                The master device distributes the Sample Clock sync signal to all devices in the system through the Sample     Clock sync distribution line. 
                When synchronizing the Sample Clock, one device must always be designated as the master.    The master device actively drives the Sample Clock sync distribution line. 
                To set this attribute, the NI-RFSG device must be in the Configuration state.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSyncSampleClockMaster(System.String,System.Boolean)">
             <summary>
            Specifies whether the device is the master device when synchronizing the Sample Clock between multiple devices. 
                The master device distributes the Sample Clock sync signal to all devices in the system through the Sample     Clock sync distribution line. 
                When synchronizing the Sample Clock, one device must always be designated as the master.    The master device actively drives the Sample Clock sync distribution line. 
                To set this attribute, the NI-RFSG device must be in the Configuration state.
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic in the NI RF Signal Generators Help    for more information about NI 5646R device synchronization.
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSyncScriptTriggerDistLine(System.String,System.String@)">
             <summary>
            Specifies which external trigger line distributes the synchronized Script Trigger signal.    When synchronizing the Script Trigger, configure all devices to use the same Script Trigger distribution line. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSyncScriptTriggerDistLine(System.String,System.String)">
             <summary>
            Specifies which external trigger line distributes the synchronized Script Trigger signal.    When synchronizing the Script Trigger, configure all devices to use the same Script Trigger distribution line. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSyncScriptTriggerMaster(System.String,System.Boolean@)">
             <summary>
            Specifies whether the device is the master device when synchronizing the Script Trigger between multiple devices. 
                The master device distributes the synchronized Script Trigger to all devices in the system through the Script Trigger distribution line. 
                When synchronizing the Script Trigger, one device must always be designated as the master.    The master device actively drives the Script Trigger distribution line. For slave devices, set the    NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute to NIRFSG_VAL_DIGITAL_EDGE, and set the    NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_SOURCE attribute to sync_script. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSyncScriptTriggerMaster(System.String,System.Boolean)">
             <summary>
            Specifies whether the device is the master device when synchronizing the Script Trigger between multiple devices. 
                The master device distributes the synchronized Script Trigger to all devices in the system through the Script Trigger distribution line. 
                When synchronizing the Script Trigger, one device must always be designated as the master.    The master device actively drives the Script Trigger distribution line. For slave devices, set the    NIRFSG_ATTR_SCRIPT_TRIGGER_TYPE attribute to NIRFSG_VAL_DIGITAL_EDGE, and set the    NIRFSG_ATTR_DIGITAL_EDGE_SCRIPT_TRIGGER_SOURCE attribute to sync_script. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSyncStartTriggerDistLine(System.String,System.String@)">
             <summary>
            Specifies which external trigger line distributes the synchronized Start Trigger signal. When synchronizing the Start Trigger,    configure all devices to use the same Start Trigger distribution line. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSyncStartTriggerDistLine(System.String,System.String)">
             <summary>
            Specifies which external trigger line distributes the synchronized Start Trigger signal. When synchronizing the Start Trigger,    configure all devices to use the same Start Trigger distribution line. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSyncStartTriggerMaster(System.String,System.Boolean@)">
             <summary>
            Specifies whether the device is the master device when synchronizing the Start Trigger between multiple devices. 
                The master device distributes the synchronized Start Trigger to all devices in the system through the Start Trigger distribution line. 
                When synchronizing the Start Trigger, one device must always be designated as the master.    The master device actively drives the Start Trigger distribution line. For slave devices, set the NIRFSG_ATTR_START_TRIGGER_TYPE    attribute to NIRFSG_VAL_DIGITAL_EDGE, and set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to sync_script. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetSyncStartTriggerMaster(System.String,System.Boolean)">
             <summary>
            Specifies whether the device is the master device when synchronizing the Start Trigger between multiple devices. 
                The master device distributes the synchronized Start Trigger to all devices in the system through the Start Trigger distribution line. 
                When synchronizing the Start Trigger, one device must always be designated as the master.    The master device actively drives the Start Trigger distribution line. For slave devices, set the NIRFSG_ATTR_START_TRIGGER_TYPE    ibute to NIRFSG_VAL_DIGITAL_EDGE, and set the NIRFSG_ATTR_DIGITAL_EDGE_START_TRIGGER_SOURCE attribute to sync_script. 
                To set this attribute, the NI-RFSG device must be in the Configuration state. 
                Refer to the Synchronization Using NI-RFSA and NI-RFSG topic appropriate to your device in the    NI RF Signal Generators Help for more information about device synchronization for vector signal transceivers. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetTimerEventInterval(System.String,System.Double)">
             <summary>
            Specifies the time before the timer emits an event    after the task is started and the time interval    between Timer events after the first one. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetTimerEventInterval(System.String,System.Double@)">
             <summary>
            Specifies the time before the timer emits an event    after the task is started and the time interval    between Timer events after the first one. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetUpconverterCenterFrequency(System.String,System.Double)">
             <summary>
            Indicates the center frequency of the passband containing the upconverted   RF signal.  Writing a value to this attribute while using the    NI 5672/5673/5673E device enables in-band retuning.    In-band retuning increases the speed of   frequency sweeps by reducing the amount of upconverter retunes. 
               This attribute is read-write on the NI 5610/5611/5672/5673/5673E and read-only   on the NI 5670/5671.  This attribute is resettable only on the NI 5673/5673E. 
               Units: Hz 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetUpconverterCenterFrequency(System.String,System.Double@)">
             <summary>
            Indicates the center frequency of the passband containing the upconverted   RF signal.  Writing a value to this attribute while using the    NI 5672/5673/5673E device enables in-band retuning.    In-band retuning increases the speed of   frequency sweeps by reducing the amount of upconverter retunes. 
               This attribute is read-write on the NI 5610/5611/5672/5673/5673E and read-only   on the NI 5670/5671.  This attribute is resettable only on the NI 5673/5673E. 
               Units: Hz 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetUpconverterCenterFrequencyIncrement(System.String,System.Double)">
             <summary>
            Specifies which upconverter center frequencies are used. This attribute   can be used to increase the speed of frequency sweeps by reducing the   number of times the upconverter is retuned. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetUpconverterCenterFrequencyIncrement(System.String,System.Double@)">
             <summary>
            Specifies which upconverter center frequencies are used. This attribute   can be used to increase the speed of frequency sweeps by reducing the   number of times the upconverter is retuned. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetUpconverterCenterFrequencyIncrementAnchor(System.String,System.Double)">
             <summary>
            Specifies the reference point for the upconverter center frequencies to   use.This attribute can be used to speed up frequency sweeps by reducing   the number of times the upconverter is retuned. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetUpconverterCenterFrequencyIncrementAnchor(System.String,System.Double@)">
             <summary>
            Specifies the reference point for the upconverter center frequencies to   use.This attribute can be used to speed up frequency sweeps by reducing   the number of times the upconverter is retuned. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetUpconverterFrequencyOffset(System.String,System.Double)">
             <summary>
            This attribute offsets the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY from the RF frequency.    Use this attribute to keep the local oscillator (LO) leakage at a determined offset from the RF signal. 
                Note: You cannot set the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute or    the NIRFSG_ATTR_ARB_CARRIER_FREQUENCY attribute at the same time as the NIRFSG_ATTR_UPCONVERTER_FREQUENCY_OFFSET attribute. 
                Note: Resetting this attribute disables the upcoverter frequency offset. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetUpconverterFrequencyOffset(System.String,System.Double@)">
             <summary>
            This attribute offsets the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY from the RF frequency.    Use this attribute to keep the local oscillator (LO) leakage at a determined offset from the RF signal. 
                Note: You cannot set the NIRFSG_ATTR_UPCONVERTER_CENTER_FREQUENCY attribute or    the NIRFSG_ATTR_ARB_CARRIER_FREQUENCY attribute at the same time as the NIRFSG_ATTR_UPCONVERTER_FREQUENCY_OFFSET attribute. 
                Note: Resetting this attribute disables the upcoverter frequency offset. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetUpconverterGain(System.String,System.Double)">
             <summary>
            Specifies the gain the upconverter applies to the signal. 
               Units: dB 
               Note: This attribute is read/write on the NI 5610/5611 and   read-only on the NI 5670/5671/5672/5673/5673E. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetUpconverterGain(System.String,System.Double@)">
             <summary>
            Specifies the gain the upconverter applies to the signal. 
               Units: dB 
               Note: This attribute is read/write on the NI 5610/5611 and   read-only on the NI 5670/5671/5672/5673/5673E. 
             
             </summary>
             <param name="channel"></param>
             <param name="value"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetUserData(System.String,System.Int32,System.Char[]@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="Channel_Name"></param>
            <param name="bufferSize"></param>
            <param name="data"></param>
            <param name="actualDataSize"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetUserData(System.String,System.Int32,System.Char[])">
            <summary>
            
            </summary>
            <param name="Channel_Name"></param>
            <param name="bufferSize"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetYigMainCoilDrive(System.String,System.Int32)">
             <summary>
            Adjusts the dynamics of the current driving the YIG main coil.
                Note: Setting this attribute to NIRFSG_VAL_FAST on the NI 5653    allows the frequency to settle significantly faster for some frequency    transitions at the expense of increased phase noise. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetYigMainCoilDrive(System.String,System.Int32@)">
             <summary>
            Adjusts the dynamics of the current driving the YIG main coil.
                Note: Setting this attribute to NIRFSG_VAL_FAST on the NI 5653    allows the frequency to settle significantly faster for some frequency    transitions at the expense of increased phase noise. 
             
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSGProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLong(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLong(NationalInstruments.ModularInstruments.Interop.niRFSGProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSGProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetString(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetString(NationalInstruments.ModularInstruments.Interop.niRFSGProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSGProperties)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetInt32(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Int32@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLong(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Int64@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLong(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Int64@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetDouble(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Double@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetString(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetString(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetInt32(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetInt32(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Int32)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLong(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLong(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Int64)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDouble(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetDouble(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Double)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetString(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetString(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetBoolean(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.Boolean)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAttributeViSession(NationalInstruments.ModularInstruments.Interop.niRFSGProperties,System.String,System.IntPtr@)">
            <summary>
            
            </summary>
            <param name="propertyId"></param>
            <param name="repeatedCapabilityOrChannel"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetError(System.Runtime.InteropServices.HandleRef,System.Int32,System.Text.StringBuilder)">
             <summary>
             Retrieves and then clears the IVI error information for the session or the current execution thread.
             
             </summary>
            <param>
             Specifies the error code.
             
            </param>
            <param>
             Specifies the error message returned.
             
            </param>
            <returns>    
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSG function to determine if an error has occurred.   
             The general meaning of the status code is as follows:   
             Value           Meaning 
             0               Success 
             Positive Values Warnings    
             Negative Values Errors  
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetError(System.Int32,System.Text.StringBuilder)">
             <summary>
             Retrieves and then clears the IVI error information for the session or the current execution thread.
             
             </summary>
            <param>
             Specifies the error code.
             
            </param>
            <param>
             Specifies the error message returned.
             
            </param>
            <returns>    
             Returns the status code of this operation. The status code  either indicates success or describes an error or warning condition. Examine the status code from each call to an NI-RFSG function to determine if an error has occurred.   
             To obtain a text description of the status code and additional information about the error condition, call the niRFSG_GetError function.    
             The general meaning of the status code is as follows:   
             Value           Meaning 
             0               Success 
             Positive Values Warnings    
             Negative Values Errors  
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ErrorMessage(System.Runtime.InteropServices.HandleRef,System.Int32,System.Text.StringBuilder)">
             <summary>
             Converts a status code returned by an NI-RFSG function into a user-readable string.
             
             </summary>
            <param>
             Identifies your instrument session. vi is obtained from the niRFSG_init or niRFSG_InitExtCal function and identifies a particular instrument session.
             
            </param>
            <param>
             Passes the Status parameter that is returned from any NI-RFSG function. The default value is 0 (VI_SUCCESS).
             
            </param>
            <param>
             Returns the user-readable message string that corresponds to the status code you specify.
             
            </param>
            <returns>
             Converts a status code returned by an NI-RFSG function into a user-readable string.
             
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.ErrorMessage(System.Int32,System.Text.StringBuilder)">
             <summary>
             Converts a status code returned by an NI-RFSG function into a user-readable string.
             
             </summary>
            <param>
             Identifies your instrument session. vi is obtained from the niRFSG_init or niRFSG_InitExtCal function and identifies a particular instrument session.
             
            </param>
            <param>
             Passes the Status parameter that is returned from any NI-RFSG function. The default value is 0 (VI_SUCCESS).
             
            </param>
            <param>
             Returns the user-readable message string that corresponds to the status code you specify.
             
            </param>
            <returns>
             Converts a status code returned by an NI-RFSG function into a user-readable string.
             
            </returns>:
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbWaveformNextWritePosition(System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="relativeTo"></param>
            <param name="offset"></param>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPulseModulationMode(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPulseModulationMode(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationFmBand(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationFmBand(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationFmNarrowbandIntegrator(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationFmNarrowbandIntegrator(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationFmSensitivity(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationFmSensitivity(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationAmSensitivity(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationAmSensitivity(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationPmSensitivity(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationPmSensitivity(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAnalogModulationPmMode(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAnalogModulationPmMode(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetExportedConfigurationSettledEventOutputTerminal(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetExportedConfigurationSettledEventOutputTerminal(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetConfigurationSettledEventTerminalName(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetConfigurationSettledEventTerminalName(System.String,System.String@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAeTemperature(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAmplitudeSettling(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAmplitudeSettling(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetCorrectionTemperature(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetCorrectionTemperature(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAlcControl(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAlcControl(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAutoPowerSearch(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAutoPowerSearch(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAmpPath(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAmpPath(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAttenuatorSetting(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAttenuatorSetting(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetFastTuningOption(System.String,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetConfigurationListRepeat(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetConfigurationListRepeat(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetConfigurationListIsDone(System.String,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetMarkerEventOutputBehaviour(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetMarkerEventOutputBehaviour(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetMarkerEventPulseWidth(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetMarkerEventPulseWidth(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetMarkerEventPulseWidthUnits(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetMarkerEventPulseWidthUnits(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetMarkerEventToggleInitialState(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetMarkerEventToggleInitialState(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetArbDigitalGain(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetArbDigitalGain(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetFpgaTemperature(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetTemperatureReadInterval(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetTemperatureReadInterval(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetPeakPowerAdjustmentInheritance(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetPeakPowerAdjustmentInheritance(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetModulePowerConsumption(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRelativeDelay(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRelativeDelay(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetAbsoluteDelay(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetAbsoluteDelay(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetOverflowErrorReporting(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetOverflowErrorReporting(System.String,System.Int32@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetThermalCorrectionTemperatureResolution(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetThermalCorrectionTemperatureResolution(System.String,System.Double@)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetRFInLOExportEnabled(System.String,System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetRFInLOExportEnabled(System.String,System.Int32@)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.SetLOOutExportConfigureFromRfsa(System.String,System.Int32)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetLOOutExportConfigureFromRfsa(System.String,System.Int32@)">
             <summary>
            
             </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.CheckIfWaveformExists(System.String,System.Boolean@)">
            <summary>
            
            niRFSG_CheckIfWaveformExists
            
            C Function Prototype
            ViStatus niRFSG_CheckIfWaveformExists ViSession vi, ViConstString waveformName, ViBoolean* waveformExists);
            Purpose
            Returns whether the waveform that you specify as waveformName exists.
            Supported Devices NI 5673/5673E
            
            </summary>
            <param name="waveformName">
            
            waveformName
            ViConstString
            Specifies the name used to store the waveform. This string is case-insensitive.
            
            </param>
            <param name="waveformExists">
            
            waveformExists
            ViBoolean*
            Returns VI_TRUE if the waveform exists.
            Defined Values:
            VI_TRUEThe waveform exists. VI_FALSE The waveform does not exist.
            
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
            
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            Value  Meaning
            0  Success
            Positive Values  Warnings
            Negative Values  Errors
            
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.CheckIfScriptExists(System.String,System.Boolean@)">
            <summary>
            
            niRFSG_CheckIfScriptExists
            
            C Function Prototype
            ViStatus niRFSG_CheckIfScriptExists (ViSession vi, ViConstString scriptName, ViBoolean* scriptExists);
            Purpose
            Returns whether the script that you specify as scriptName exists. 
            Supported Devices NI 5673/5673E
            
            </summary>
            <param name="scriptName">
            
            waveformName
            ViConstString
            Specifies the name of the script. This string is case-insensitive
            
            
            </param>
            <param name="scriptExists">
            
            scriptExists
            ViBoolean*
            Returns VI_TRUE if the script exists.
            
            Valid Values:
            VI_TRUE The script exists.
            VI_FALSE The script does not exist.
            </param>
            <returns>
            
            status
            ViStatus
            Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
            To obtain a text description of the error code, call the niRFSG_GetError function.
                      
            The general meaning of the status code is as follows:
            Value  Meaning
            0  Success
            Positive Values  Warnings
            Negative Values  Errors
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.CheckIfConfigurationListExists(System.String,System.Boolean@)">
            <summary>
            
            niRFSG_CheckIfConfigurationListExists
            
            C Function Prototype
            ViStatus niRFSG_CheckIfConfigurationListExists (ViSession vi, ViConstString listName, ViBoolean* listExists);
            Purpose
            Returns whether the configuration list that you specify as listName exists.
            Supported Devices NI PXIe-5650/5651/5652/5654/5654 with NI 5696, NI 5673E
            
            </summary>
            <param name = "listName">
            listName
            ViConstString
            Specifies the name of the configuration list. This string is case-insensitive.
            
            </param>
            <param name = "listExists">
            listExists
            ViBoolean*
            Returns VI_TRUE if the configuration list exists.
            Defined Values:
            VI_TRUE The configuration list exists. 
            VI_FALSE The configuration list does not exist.
            
            </param>
            <returns>
            
            status
            ViStatus
            
            Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
            To obtain a text description of the error code, call the niRFSG_GetError function.
            
            The general meaning of the status code is as follows:
            Value  Meaning
            0  Success
            Positive Values  Warnings
            Negative Values  Errors
            </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.GetSelfCalibrationTemperature(System.Int32,System.Double@)">
             <summary>
             
             niRFSG_GetSelfCalibrationTemperature
             
             C Function Prototype
             ViStatus niRFSG_GetSelfCalibrationTemperature&#160;(ViSession vi, ViInt32 module, ViReal64* temperature);
             Purpose
             Returns the temperature, in degrees Celsius, of the device at the last successful self-calibration. 
             Supported Devices: NI 5610, NI 5653, NI 5670/5671/5672/5673/5673E
             
             </summary>
             <param name = "module">
            
             Module
             ViInt32
             
             Specifies from which module to retrieve the last successful self-calibration temperature.
             Defined Values:
             NIRFSG_VAL_PRIMARY_MODULEThe stand-alone device or the main module in a multi-module device.
             NIRFSG_VAL_AWGThe AWG associated with the primary module.
             NIRFSG_VAL_LOThe LO associated with the primary module.
             Default Value: NIRFSG_VAL_PRIMARY_MODULE
             
             </param>
             <param name = "temperature">
            
             temperature
             ViReal64*
             Returns the temperature, in degrees Celsius, of the device at the last successful self-calibration.
             
             </param>
             <returns>
             
             status
             ViStatus
             
             Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
             To obtain a text description of the error code, call the niRFSG_GetError function.
             
             The general meaning of the status code is as follows:
             Value  Meaning
             0  Success
             Positive Values  Warnings
             Negative Values  Errors
             </returns>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.niRFSG.PerformPowerSearch">
             <summary>
             
             niRFSG_PerformPowerSearch
             
             C Function Prototype
             ViStatus niRFSG_PerformPowerSearch (ViSession vi);
             Purpose
             Performs a power search if the NIRFSG_ATTR_ALC_CONTROL attribute is disabled. Calling this function disables modulation for a short time while the device levels the output signal.
             Note  Power search temporarily enables the ALC, so ensure the appropriate included cable is connected between the NI 5654 ALC IN connector and the NI 5696 ALC OUT connector to successfully perform a power search.
             
             Supported Devices NI 5654 with NI 5696
             
             </summary>
            <returns>
             
             status
             ViStatus
             
             Returns the status code of this operation. The status code either indicates success or describes an error or warning condition.
             To obtain a text description of the error code, call the niRFSG_GetError function.
             
             The general meaning of the status code is as follows:
             Value  Meaning
             0  Success
             Positive Values  Warnings
             Negative Values  Errors
             
            </returns>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSGConstants">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi7Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi0Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi4Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi1Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi5Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi6Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Rtsi3Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.OnBoardClockStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.onboardClockStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiClk10Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Cw">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbWaveform">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Script">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.AveragePower">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PeakPower">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pfi0Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pfi1Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pfi2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pfi3Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig0Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig1Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig3Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig4Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig5Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig6Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiTrig7Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiStarStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RisingEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.FallingEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ScriptTrigger0">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ScriptTrigger1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ScriptTrigger2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ScriptTrigger3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SelfCalOmitNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SelfCalLoSelfCal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SelfCalPowerLevelAccuracy">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SelfCalResidualLoPower">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SelfCalImageSuppression">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ActiveHigh">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ActiveLow">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.StartTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ScriptTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Marker0EventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Marker1EventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Marker2EventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Marker3EventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.TimerEventStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.MarkerEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RefClock">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.StartedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DoneEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ConfigurationListStepTrigger">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.MarkerEvent0">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.MarkerEvent1">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.MarkerEvent2">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.MarkerEvent3">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.OnboardClockStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RefInStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiClkStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ClkInStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.NoneStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DoNotExportStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RefOutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RefOut2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pfi4Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pfi5Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SyncStartTriggerStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SyncScriptTriggerStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.LoSourceOnboardStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.LoSourceLoInStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Enable">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Disable">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Auto">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbFilterTypeNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbFilterTypeRootRaisedCosine">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbFilterTypeRaisedCosine">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DucNone">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DucRootRaisedCosine">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DucRaisedCosine">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.HighResolution">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DivideDown">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ClkOutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Fm">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pm">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Sine">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Square">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Triangle">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Fsk">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Ook">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Psk">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Prbs">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RfOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.IqOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.CalOut">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.IOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Differential">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SingleEnded">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.UserDefined">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Medium">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Wide">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Slow">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Fast">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.TimeAfterLock">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.TimeAfterIo">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Ppm">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DigitalEdge">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DigitalLevel">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Software">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.P2pEndpointFullness">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.MaxTimeImmediate">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.MaxTimeInfinite">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbTriggerSourceImmediate">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbTriggerSourceExternal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbTriggerSourceSoftware">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbExternalTriggerSlopePositive">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ArbExternalTriggerSlopeNegative">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Percent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Volts">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ExactMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Minimum">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.FmContinuous">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.FmBanded">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ConfigurationSettledEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.TrigInStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.TrigOutStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants._10mhz">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ConfigurationListRepeatContinuous">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ConfigurationListRepeatSingle">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Narrow">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Am">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.HighPower">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.LowHarmonic">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Narrowband">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Wideband">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants._100hzTo1khz">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants._1khzTo10khz">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants._10khzTo100khz">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.HighDeviation">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.LowPhaseNoise">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.OptimalMatch">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.HighIsolation">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ReferenceOscillatorSourceInternal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ReferenceOscillatorSourceExternal">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RefClockSourcePxiClk">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Low">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DigitalLow">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.DigitalHigh">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Seconds">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SampleClockPeriods">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Pulse">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Toggle">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.SelfCalSynthesizerAlignment">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ErrorReportingWarning">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.ErrorReportingDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PXIeDStarBStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PXIeDStarCStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.StartOfWaveform">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.CurrentPosition">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.Secondary">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RefIn2Str">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PxiClkMasterStr">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RFInLOExportEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RFInLOExportDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.RFInLOExportUnspecified">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.LOOutExportConfigureFromRfsaEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.LOOutExportConfigureFromRfsaDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PortRFIN">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGConstants.PortRFOut">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.niRFSGProperties">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IOResourceDescriptor">
            <summary>
            System.string
             </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbCarrierFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.CompensateForFilterGroupDelay">
            <summary>
            System.Boolean
             </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DataTransferBlockSize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DirectDmaEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DirectDmaWindowAddress">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DirectDmaWindowSize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DirectDownload">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.StreamingSpaceAvailableInWaveform">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.StreamingEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.StreamingWriteTimeout">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.StreamingWaveformName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DataTransferMaximumBandwidth">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DataTransferMaximumInFlightReads">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DataTransferPreferredPacketSize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalEqualizationEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalPattern">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.GenerationMode">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqRate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqSwapEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.MemorySize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PhaseContinuityEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbPower">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbPreFilterGain">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbFilterType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbFilterRaisedCosineAlpha">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbFilterRootRaisedCosineAlpha">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SelectedScript">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SignalBandwidth">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbWaveformSoftwareScalingFactor">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbMaxNumberWaveforms">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbWaveformSizeMax">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbWaveformSizeMin">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbWaveformQuantum">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbWaveformRepeatCount">
            <summary>
            int
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbWaveformRepeatCountIsFinite">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbOscillatorPhaseDacValue">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbOnboardSampleClockMode">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbSampleClockRate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbSampleClockSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PxiChassisClk10Source">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedRefClockOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.RefClockRate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.RefClockSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ActiveConfigurationList">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ActiveConfigurationListStep">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ConfigurationListStepInProgress">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DeviceTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SerialNumber">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ModuleRevision">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedDoneEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DoneEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedMarkerEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.MarkerEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedStartedEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.StartedEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SyncSampleClockDistLine">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SyncSampleClockMaster">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SyncScriptTriggerDistLine">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SyncScriptTriggerMaster">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SyncStartTriggerDistLine">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SyncStartTriggerMaster">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.EventsDelay">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.InterpolationDelay">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.OutputPort">
            <summary>
            RfsgAttrOutputPort
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoSource">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoFrequencyStepSize">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoPllFractionalModeEnabled">
            <summary>
            RfsgAttrDigitalEqualizationEnabled
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOutPortCarrierFrequency">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOutPortTerminalConfiguration">
            <summary>
            RfsgAttrIqOutPortTerminalConfiguration
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOutPortLevel">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOutPortCommonModeOffset">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOutPortOffset">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOutPortTemperature">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOutPortLoadImpedance">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.RfBlankingSource">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FpgaBitfilePath">
            <summary>
            string
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.TimerEventInterval">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExternalCalibrationTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExternalCalibrationRecommendedInterval">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LogicalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DriverSetup">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.GroupCapabilities">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SupportedInstrumentModels">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SpecificDriverClassSpecMajorVersion">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SpecificDriverClassSpecMinorVersion">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SpecificDriverDescription">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SpecificDriverPrefix">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SpecificDriverVendor">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SpecificDriverRevision">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.InstrumentFirmwareRevision">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.InstrumentManufacturer">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.InstrumentModel">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.Cache">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.InterchangeCheck">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.QueryInstrumentStatus">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.RangeCheck">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.RecordCoercions">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.Simulate">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqImpairmentEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqOffsetUnits">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqIOffset">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqQOffset">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqGainImbalance">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqSkew">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationFmDeviation">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationPmDeviation">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationWaveformFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationWaveformType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalModulationFskDeviation">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalModulationType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalModulationPrbsOrder">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalModulationPrbsSeed">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalModulationSymbolRate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalModulationWaveformType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UpconverterFrequencyOffset">
            <summary>
            double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UpconverterCenterFrequencyIncrement">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UpconverterCenterFrequencyIncrementAnchor">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pDataTransferPermissionitialCredits">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pDataTransferPermissionInterval">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pEndpointCount">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pEndpointSize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pMostSpaceAvailableInEndpoint">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pSpaceAvailableInEndpoint">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.RefPllBandwidth">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.YigMainCoilDrive">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AllowOutOfSpecificationUserSettings">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttenuatorHoldEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttenuatorHoldMaxPower">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AutomaticThermalCorrection">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExternalGain">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.Frequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FrequencySettling">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FrequencySettlingUnits">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FrequencyTolerance">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoInPower">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoOutEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoOutPower">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoopBandwidth">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.OutputEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PeakEnvelopePower">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PeakPowerAdjustment">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PeakPowerAdjsutmentInheritance">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PhaseOffset">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PowerLevel">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PowerLevelType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UpconverterCenterFrequency">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UpconverterGain">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PulseModulationEnabled">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SelfCalibrationTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ConfigurationListStepTriggerType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedConfigurationListStepTriggerOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ConfigurationListStepTriggerTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalEdgeConfigurationListStepTriggerEdge">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalEdgeConfigurationListStepTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalEdgeScriptTriggerEdge">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalEdgeScriptTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalLevelScriptTriggerActiveLevel">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalLevelScriptTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedScriptTriggerOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ScriptTriggerTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ScriptTriggerType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalEdgeStartTriggerEdge">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalEdgeStartTriggerSource">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedStartTriggerOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pEndpointFullnessStartTriggerLevel">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.StartTriggerTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.StartTriggerType">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ThermalCorrectionEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.SampleClockRate">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UpconverterTemperature">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LocalOscillatorOut0Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IfCarrierFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IfPower">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DigitalIfEqualizationEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DucPreFilterGain">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DucFirFilterType">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DucFirFilterRootRaisedCosineAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.DucFirFilterRaisedCosineAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UpconverterLoopBandwidth">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.Spy">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.UseSpecificSimulation">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ChannelCount">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FunctionCapabilities">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqNominalVoltage">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.IqEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbFilterFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FgenSession">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.LoSession">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ReferenceOscillatorExternalFrequency">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbTriggerSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PulseModulationMode">
            <summary>
            RfsgPulseModulationMode
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationFmBand">
            <summary>
            RfsgAnalogModulationFmBand
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationFmNarrowbandIntegrator">
            <summary>
            RfsgAnalogModulationFmNarrowbandIntegrator
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationFmSensitivity">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationAmSensitivity">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationPmSensitivity">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AnalogModulationPmMode">
            <summary>
            RfsgAnalogModulationPmMode
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExportedConfigurationSettledEventOutputTerminal">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ConfigurationSettledEventTerminalName">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AeTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AeSession">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AmplitudeSettling">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.CorrectionTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AlcControl">
            <summary>
            RfsgAlcControl
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AutoPowerSearch">
            <summary>
            RfsgAlcControl
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AmpPath">
            <summary>
            RfsgAmpPath
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttenuatorSetting">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FastTuningOption">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ConfigurationListRepeat">
            <summary>
            RfsgConfigurationListRepeat
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ConfigurationListIsDone">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AlcEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ReferenceOscillatorSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExternalCalibrationUserDefinedInfo">
            <summary>
            System.String
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ExternalCalibrationUserDefinedInfoMaxSize">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.MarkerEventOutputBehaviour">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.MarkerEventPulseWidth">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.MarkerEventPulseWidthUnits">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.MarkerEventToggleInitialState">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ArbDigitalGain">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.FpgaTemperature">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.TemperatureReadInterval">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.PeakPowerAdjustmentInheritance">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.ModulePowerConsumption">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pIsFiniteGeneration">
            <summary>
            System.Boolean
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pNumberOfSamplesToGenerate">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.P2pGenerationFifoSampleQuantum">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttrRelativeDelay">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttrAbsoluteDelay">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttrOverflowErrorReporting">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttrLOOutExportConfigureFromRfsa">
            <summary>
            System.Double
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttrRFInLOExportEnabled">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="F:NationalInstruments.ModularInstruments.Interop.niRFSGProperties.AttrThermalCorrectionTemperatureResolution">
            <summary>
            System.Int32
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexI16">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexI16.#ctor(System.Int16,System.Int16)">
            <summary>
            
            </summary>
            <param name="Real"></param>
            <param name="Imaginary"></param>
        </member>
        <member name="P:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexI16.Real">
            <summary>
            
            </summary>
        </member>
        <member name="P:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexI16.Imaginary">
            <summary>
            
            </summary>
        </member>
        <member name="T:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexNumberF32">
            <summary>
            
            </summary>
        </member>
        <member name="M:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexNumberF32.#ctor(System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="Real"></param>
            <param name="Imaginary"></param>
        </member>
        <member name="P:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexNumberF32.Real">
            <summary>
            
            </summary>
        </member>
        <member name="P:NationalInstruments.ModularInstruments.Interop.RfsgNIComplexNumberF32.Imaginary">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
